/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.component;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.Iterables;

/**
 * A typed message sent to define the available components.
 */
@BeanDefinition
public class ComponentInfosMsg extends DirectBean {

  /**
   * The component info list.
   */
  @PropertyDefinition(validate = "notNull")
  private final List<ComponentInfo> _infos = new ArrayList<ComponentInfo>();
  /**
   * The map of default classifiers.
   */
  @PropertyDefinition(validate = "notNull")
  private final Map<Class<?>, String> _defaultClassifier = new HashMap<Class<?>, String>();

  /**
   * Creates an instance.
   */
  public ComponentInfosMsg() {
  }

  /**
   * Creates an instance.
   * 
   * @param infos  the infos to add, not null
   */
  public ComponentInfosMsg(Iterable<ComponentInfo> infos) {
    Iterables.addAll(_infos, infos);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ComponentInfosMsg}.
   * @return the meta-bean, not null
   */
  public static ComponentInfosMsg.Meta meta() {
    return ComponentInfosMsg.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(ComponentInfosMsg.Meta.INSTANCE);
  }

  @Override
  public ComponentInfosMsg.Meta metaBean() {
    return ComponentInfosMsg.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 100348293:  // infos
        return getInfos();
      case 31240002:  // defaultClassifier
        return getDefaultClassifier();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @SuppressWarnings("unchecked")
  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 100348293:  // infos
        setInfos((List<ComponentInfo>) newValue);
        return;
      case 31240002:  // defaultClassifier
        setDefaultClassifier((Map<Class<?>, String>) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_infos, "infos");
    JodaBeanUtils.notNull(_defaultClassifier, "defaultClassifier");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ComponentInfosMsg other = (ComponentInfosMsg) obj;
      return JodaBeanUtils.equal(getInfos(), other.getInfos()) &&
          JodaBeanUtils.equal(getDefaultClassifier(), other.getDefaultClassifier());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getInfos());
    hash += hash * 31 + JodaBeanUtils.hashCode(getDefaultClassifier());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the component info list.
   * @return the value of the property, not null
   */
  public List<ComponentInfo> getInfos() {
    return _infos;
  }

  /**
   * Sets the component info list.
   * @param infos  the new value of the property
   */
  public void setInfos(List<ComponentInfo> infos) {
    this._infos.clear();
    this._infos.addAll(infos);
  }

  /**
   * Gets the the {@code infos} property.
   * @return the property, not null
   */
  public final Property<List<ComponentInfo>> infos() {
    return metaBean().infos().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the map of default classifiers.
   * @return the value of the property, not null
   */
  public Map<Class<?>, String> getDefaultClassifier() {
    return _defaultClassifier;
  }

  /**
   * Sets the map of default classifiers.
   * @param defaultClassifier  the new value of the property
   */
  public void setDefaultClassifier(Map<Class<?>, String> defaultClassifier) {
    this._defaultClassifier.clear();
    this._defaultClassifier.putAll(defaultClassifier);
  }

  /**
   * Gets the the {@code defaultClassifier} property.
   * @return the property, not null
   */
  public final Property<Map<Class<?>, String>> defaultClassifier() {
    return metaBean().defaultClassifier().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ComponentInfosMsg}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code infos} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<ComponentInfo>> _infos = DirectMetaProperty.ofReadWrite(
        this, "infos", ComponentInfosMsg.class, (Class) List.class);
    /**
     * The meta-property for the {@code defaultClassifier} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Map<Class<?>, String>> _defaultClassifier = DirectMetaProperty.ofReadWrite(
        this, "defaultClassifier", ComponentInfosMsg.class, (Class) Map.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map = new DirectMetaPropertyMap(
        this, null,
        "infos",
        "defaultClassifier");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 100348293:  // infos
          return _infos;
        case 31240002:  // defaultClassifier
          return _defaultClassifier;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ComponentInfosMsg> builder() {
      return new DirectBeanBuilder<ComponentInfosMsg>(new ComponentInfosMsg());
    }

    @Override
    public Class<? extends ComponentInfosMsg> beanType() {
      return ComponentInfosMsg.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code infos} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<List<ComponentInfo>> infos() {
      return _infos;
    }

    /**
     * The meta-property for the {@code defaultClassifier} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Map<Class<?>, String>> defaultClassifier() {
      return _defaultClassifier;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
