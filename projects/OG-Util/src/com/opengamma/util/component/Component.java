/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.util.component;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * A principal component of the OpenGamma system.
 */
@BeanDefinition
public class Component extends DirectBean {

  /**
   * The instance that provides the functionality.
   */
  @PropertyDefinition
  private Object _instance;
  /**
   * The component type representing the available functionality.
   */
  @PropertyDefinition
  private Class<?> _type;
  /**
   * The classifier of the type.
   * This acts as a key to disambiguate multiple options for the same component type.
   */
  @PropertyDefinition
  private String _classifier;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code Component}.
   * @return the meta-bean, not null
   */
  public static Component.Meta meta() {
    return Component.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(Component.Meta.INSTANCE);
  }

  @Override
  public Component.Meta metaBean() {
    return Component.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 555127957:  // instance
        return getInstance();
      case 3575610:  // type
        return getType();
      case -281470431:  // classifier
        return getClassifier();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 555127957:  // instance
        setInstance((Object) newValue);
        return;
      case 3575610:  // type
        setType((Class<?>) newValue);
        return;
      case -281470431:  // classifier
        setClassifier((String) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      Component other = (Component) obj;
      return JodaBeanUtils.equal(getInstance(), other.getInstance()) &&
          JodaBeanUtils.equal(getType(), other.getType()) &&
          JodaBeanUtils.equal(getClassifier(), other.getClassifier());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getInstance());
    hash += hash * 31 + JodaBeanUtils.hashCode(getType());
    hash += hash * 31 + JodaBeanUtils.hashCode(getClassifier());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the instance that provides the functionality.
   * @return the value of the property
   */
  public Object getInstance() {
    return _instance;
  }

  /**
   * Sets the instance that provides the functionality.
   * @param instance  the new value of the property
   */
  public void setInstance(Object instance) {
    this._instance = instance;
  }

  /**
   * Gets the the {@code instance} property.
   * @return the property, not null
   */
  public final Property<Object> instance() {
    return metaBean().instance().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the component type representing the available functionality.
   * @return the value of the property
   */
  public Class<?> getType() {
    return _type;
  }

  /**
   * Sets the component type representing the available functionality.
   * @param type  the new value of the property
   */
  public void setType(Class<?> type) {
    this._type = type;
  }

  /**
   * Gets the the {@code type} property.
   * @return the property, not null
   */
  public final Property<Class<?>> type() {
    return metaBean().type().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the classifier of the type.
   * This acts as a key to disambiguate multiple options for the same component type.
   * @return the value of the property
   */
  public String getClassifier() {
    return _classifier;
  }

  /**
   * Sets the classifier of the type.
   * This acts as a key to disambiguate multiple options for the same component type.
   * @param classifier  the new value of the property
   */
  public void setClassifier(String classifier) {
    this._classifier = classifier;
  }

  /**
   * Gets the the {@code classifier} property.
   * This acts as a key to disambiguate multiple options for the same component type.
   * @return the property, not null
   */
  public final Property<String> classifier() {
    return metaBean().classifier().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code Component}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code instance} property.
     */
    private final MetaProperty<Object> _instance = DirectMetaProperty.ofReadWrite(
        this, "instance", Component.class, Object.class);
    /**
     * The meta-property for the {@code type} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Class<?>> _type = DirectMetaProperty.ofReadWrite(
        this, "type", Component.class, (Class) Class.class);
    /**
     * The meta-property for the {@code classifier} property.
     */
    private final MetaProperty<String> _classifier = DirectMetaProperty.ofReadWrite(
        this, "classifier", Component.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map = new DirectMetaPropertyMap(
        this, null,
        "instance",
        "type",
        "classifier");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 555127957:  // instance
          return _instance;
        case 3575610:  // type
          return _type;
        case -281470431:  // classifier
          return _classifier;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends Component> builder() {
      return new DirectBeanBuilder<Component>(new Component());
    }

    @Override
    public Class<? extends Component> beanType() {
      return Component.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code instance} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Object> instance() {
      return _instance;
    }

    /**
     * The meta-property for the {@code type} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Class<?>> type() {
      return _type;
    }

    /**
     * The meta-property for the {@code classifier} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> classifier() {
      return _classifier;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
