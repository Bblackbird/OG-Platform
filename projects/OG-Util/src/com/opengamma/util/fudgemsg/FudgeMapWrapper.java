/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.util.fudgemsg;

import java.util.HashMap;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * A wrapper for a map that ensures transfer by Fudge.
 * <p>
 * Fudge does not handle transfer of maps on their own very well,
 * but does handle them when wrapped in this class.
 * <p>
 * Due to Joda-Bean limitations, this class is not generified.
 */
@SuppressWarnings("rawtypes")
@BeanDefinition
public class FudgeMapWrapper extends DirectBean {

  /**
   * The map.
   */
  @PropertyDefinition(validate = "notNull")
  private Map _wrappedMap = new HashMap();

  /**
   * Creates an instance.
   * 
   * @param map  the map, not null
   * @return the wrapped map, not null
   */
  public static FudgeMapWrapper of(Map<?, ?> map) {
    return new FudgeMapWrapper(map);
  }

  //-------------------------------------------------------------------------
  /**
   * Creates an instance.
   */
  private FudgeMapWrapper() {
  }

  /**
   * Creates an instance.
   * 
   * @param map  the map, not null
   */
  @SuppressWarnings("unchecked")
  public FudgeMapWrapper(Map<?, ?> map) {
    getWrappedMap().putAll(map);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FudgeMapWrapper}.
   * @return the meta-bean, not null
   */
  public static FudgeMapWrapper.Meta meta() {
    return FudgeMapWrapper.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(FudgeMapWrapper.Meta.INSTANCE);
  }

  @Override
  public FudgeMapWrapper.Meta metaBean() {
    return FudgeMapWrapper.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -628777321:  // wrappedMap
        return getWrappedMap();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -628777321:  // wrappedMap
        setWrappedMap((Map) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_wrappedMap, "wrappedMap");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FudgeMapWrapper other = (FudgeMapWrapper) obj;
      return JodaBeanUtils.equal(getWrappedMap(), other.getWrappedMap());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getWrappedMap());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the map.
   * @return the value of the property, not null
   */
  public Map getWrappedMap() {
    return _wrappedMap;
  }

  /**
   * Sets the map.
   * @param wrappedMap  the new value of the property, not null
   */
  public void setWrappedMap(Map wrappedMap) {
    JodaBeanUtils.notNull(wrappedMap, "wrappedMap");
    this._wrappedMap = wrappedMap;
  }

  /**
   * Gets the the {@code wrappedMap} property.
   * @return the property, not null
   */
  public final Property<Map> wrappedMap() {
    return metaBean().wrappedMap().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FudgeMapWrapper}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code wrappedMap} property.
     */
    private final MetaProperty<Map> _wrappedMap = DirectMetaProperty.ofReadWrite(
        this, "wrappedMap", FudgeMapWrapper.class, Map.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map = new DirectMetaPropertyMap(
        this, null,
        "wrappedMap");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -628777321:  // wrappedMap
          return _wrappedMap;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends FudgeMapWrapper> builder() {
      return new DirectBeanBuilder<FudgeMapWrapper>(new FudgeMapWrapper());
    }

    @Override
    public Class<? extends FudgeMapWrapper> beanType() {
      return FudgeMapWrapper.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code wrappedMap} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Map> wrappedMap() {
      return _wrappedMap;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
