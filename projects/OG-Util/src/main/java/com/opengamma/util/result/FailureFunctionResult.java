/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.util.result;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.slf4j.helpers.FormattingTuple;
import org.slf4j.helpers.MessageFormatter;

/**
 * {@link FunctionResult} indicating the failure of a function.
 *
 * @param <T> the type of the underlying result which is only required
 * for allowing method signatures to match
 */
@BeanDefinition
public final class FailureFunctionResult<T> implements FunctionResult<T>, ImmutableBean {

  /**
   * The status associated with the failure.
   */
  @PropertyDefinition(validate = "notNull")
  private final FailureStatus _status;

  /**
   * The error message associated with the failure. Not evaluated unless
   * actually requested.
   */
  @PropertyDefinition(validate = "notNull")
  private final FormattingTuple _errorMessage;

  /* package */ FailureFunctionResult(FailureStatus failureStatus, String message, Object... messageArgs) {
    this(failureStatus, MessageFormatter.arrayFormat(message, messageArgs));
  }

  @ImmutableConstructor
  /* package */ FailureFunctionResult(FailureStatus failureStatus, FormattingTuple errorMessage) {
    _status = failureStatus;
    _errorMessage = errorMessage;
  }

  @Override
  public T getResult() {
    throw new IllegalStateException("Unable to get a value from a failure result");
  }

  @Override
  public String getFailureMessage() {
    return _errorMessage.getMessage();
  }

  @Override
  public String toString() {
    return "FailureFunctionResult{_status=" + _status + ", _errorMessage=" + getFailureMessage() + '}';
  }

  @Override
  public boolean isResultAvailable() {
    return _status.isResultAvailable();
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FailureFunctionResult}.
   * @return the meta-bean, not null
   */
  @SuppressWarnings("rawtypes")
  public static FailureFunctionResult.Meta meta() {
    return FailureFunctionResult.Meta.INSTANCE;
  }

  /**
   * The meta-bean for {@code FailureFunctionResult}.
   * @param <R>  the bean's generic type
   * @param cls  the bean's generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R> FailureFunctionResult.Meta<R> metaFailureFunctionResult(Class<R> cls) {
    return FailureFunctionResult.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(FailureFunctionResult.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @param <T>  the type
   * @return the builder, not null
   */
  public static <T> FailureFunctionResult.Builder<T> builder() {
    return new FailureFunctionResult.Builder<T>();
  }

  @SuppressWarnings("unchecked")
  @Override
  public FailureFunctionResult.Meta<T> metaBean() {
    return FailureFunctionResult.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the status associated with the failure.
   * @return the value of the property, not null
   */
  public FailureStatus getStatus() {
    return _status;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the error message associated with the failure. Not evaluated unless
   * actually requested.
   * @return the value of the property, not null
   */
  public FormattingTuple getErrorMessage() {
    return _errorMessage;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder<T> toBuilder() {
    return new Builder<T>(this);
  }

  @Override
  public FailureFunctionResult<T> clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FailureFunctionResult<?> other = (FailureFunctionResult<?>) obj;
      return JodaBeanUtils.equal(getStatus(), other.getStatus()) &&
          JodaBeanUtils.equal(getErrorMessage(), other.getErrorMessage());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getStatus());
    hash += hash * 31 + JodaBeanUtils.hashCode(getErrorMessage());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FailureFunctionResult}.
   */
  public static final class Meta<T> extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code status} property.
     */
    private final MetaProperty<FailureStatus> _status = DirectMetaProperty.ofImmutable(
        this, "status", FailureFunctionResult.class, FailureStatus.class);
    /**
     * The meta-property for the {@code errorMessage} property.
     */
    private final MetaProperty<FormattingTuple> _errorMessage = DirectMetaProperty.ofImmutable(
        this, "errorMessage", FailureFunctionResult.class, FormattingTuple.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "status",
        "errorMessage");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -892481550:  // status
          return _status;
        case 1203236063:  // errorMessage
          return _errorMessage;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public FailureFunctionResult.Builder<T> builder() {
      return new FailureFunctionResult.Builder<T>();
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends FailureFunctionResult<T>> beanType() {
      return (Class) FailureFunctionResult.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code status} property.
     * @return the meta-property, not null
     */
    public MetaProperty<FailureStatus> status() {
      return _status;
    }

    /**
     * The meta-property for the {@code errorMessage} property.
     * @return the meta-property, not null
     */
    public MetaProperty<FormattingTuple> errorMessage() {
      return _errorMessage;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -892481550:  // status
          return ((FailureFunctionResult<?>) bean).getStatus();
        case 1203236063:  // errorMessage
          return ((FailureFunctionResult<?>) bean).getErrorMessage();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FailureFunctionResult}.
   */
  public static final class Builder<T> extends DirectFieldsBeanBuilder<FailureFunctionResult<T>> {

    private FailureStatus _status;
    private FormattingTuple _errorMessage;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(FailureFunctionResult<T> beanToCopy) {
      this._status = beanToCopy.getStatus();
      this._errorMessage = beanToCopy.getErrorMessage();
    }

    //-----------------------------------------------------------------------
    @SuppressWarnings("unchecked")
    @Override
    public Builder<T> set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -892481550:  // status
          this._status = (FailureStatus) newValue;
          break;
        case 1203236063:  // errorMessage
          this._errorMessage = (FormattingTuple) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder<T> set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<T> setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder<T> setString(MetaProperty<?> property, String value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<T> setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public FailureFunctionResult<T> build() {
      return new FailureFunctionResult<T>(
          _status,
          _errorMessage);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code status} property in the builder.
     * @param status  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<T> status(FailureStatus status) {
      JodaBeanUtils.notNull(status, "status");
      this._status = status;
      return this;
    }

    /**
     * Sets the {@code errorMessage} property in the builder.
     * @param errorMessage  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<T> errorMessage(FormattingTuple errorMessage) {
      JodaBeanUtils.notNull(errorMessage, "errorMessage");
      this._errorMessage = errorMessage;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("FailureFunctionResult.Builder{");
      buf.append("status").append('=').append(JodaBeanUtils.toString(_status)).append(',').append(' ');
      buf.append("errorMessage").append('=').append(JodaBeanUtils.toString(_errorMessage));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
