<project name="og-language" default="compile" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property environment="env" />
	<property file="${user.home}/.OG-Build-common.properties" />
	<property file="${basedir}/build.properties" />
	<property file="${basedir}/../../common/build.properties" />

	<path id="build.path">
		<pathelement path="${basedir}/Connector" />
		<pathelement path="${basedir}/ConnectorTest" />
		<pathelement path="${basedir}/Client" />
		<pathelement path="${basedir}/Service" />
		<pathelement path="${basedir}/ServiceRunner" />
		<pathelement path="${basedir}/ServiceTest" />
		<pathelement path="${basedir}/Util" />
		<pathelement path="${basedir}/UtilTest" />
	</path>

	<macrodef name="unpack-include">
		<attribute name="org" />
		<attribute name="name" />
		<sequential>
			<unzip dest="${lib.dir}/include" overwrite="false">
				<fileset dir="${lib.dir}/include/@{org}/@{name}">
					<include name="*.zip" />
				</fileset>
			</unzip>
		</sequential>
	</macrodef>
	<macrodef name="unpack-dll">
		<attribute name="org" />
		<attribute name="name" />
		<attribute name="file" />
		<attribute name="debug" default="" />
		<attribute name="release" default="" />
		<attribute name="win32" default="" />
		<attribute name="x64" default="" />
		<sequential>
			<copy tofile="${lib.dir}/DebugWin32/@{file}@{win32}@{debug}.dll" overwrite="false">
				<fileset dir="${lib.dir}/dll/@{org}/@{name}">
					<include name="@{name}-DebugWin32-*.dll" />
				</fileset>
			</copy>
			<copy tofile="${lib.dir}/ReleaseWin32/@{file}@{win32}@{release}.dll" overwrite="false">
				<fileset dir="${lib.dir}/dll/@{org}/@{name}">
					<include name="@{name}-ReleaseWin32-*.dll" />
				</fileset>
			</copy>
			<copy tofile="${lib.dir}/Debugx64/@{file}@{x64}@{debug}.dll" overwrite="false">
				<fileset dir="${lib.dir}/dll/@{org}/@{name}">
					<include name="@{name}-Debugx64-*.dll" />
				</fileset>
			</copy>
			<copy tofile="${lib.dir}/Releasex64/@{file}@{x64}@{release}.dll" overwrite="false">
				<fileset dir="${lib.dir}/dll/@{org}/@{name}">
					<include name="@{name}-Releasex64-*.dll" />
				</fileset>
			</copy>
		</sequential>
	</macrodef>
	<macrodef name="unpack-lib">
		<attribute name="org" />
		<attribute name="name" />
		<attribute name="file" />
		<sequential>
			<copy tofile="${lib.dir}/DebugWin32/@{file}.lib" overwrite="false">
				<fileset dir="${lib.dir}/lib/@{org}/@{name}">
					<include name="@{name}-DebugWin32-*.lib" />
				</fileset>
			</copy>
			<copy tofile="${lib.dir}/ReleaseWin32/@{file}.lib" overwrite="false">
				<fileset dir="${lib.dir}/lib/@{org}/@{name}">
					<include name="@{name}-ReleaseWin32-*.lib" />
				</fileset>
			</copy>
			<copy tofile="${lib.dir}/Debugx64/@{file}.lib" overwrite="false">
				<fileset dir="${lib.dir}/lib/@{org}/@{name}">
					<include name="@{name}-Debugx64-*.lib" />
				</fileset>
			</copy>
			<copy tofile="${lib.dir}/Releasex64/@{file}.lib" overwrite="false">
				<fileset dir="${lib.dir}/lib/@{org}/@{name}">
					<include name="@{name}-Releasex64-*.lib" />
				</fileset>
			</copy>
		</sequential>
	</macrodef>
	<target name="unpack-resolve" depends="resolve" description="--> unpacks include files and Windows binaries">
		<unpack-dll org="org.fudgemsg" name="fudge-c" file="libfudgec" debug="d" x64="X64" />
		<unpack-include org="org.fudgemsg" name="fudge-c" />
		<unpack-lib org="org.fudgemsg" name="fudge-c" file="libfudgec" />
		<unpack-dll org="org.apache" name="log4cxx" file="log4cxx" />
		<unpack-include org="org.apache" name="log4cxx" />
		<unpack-lib org="org.apache" name="log4cxx" file="log4cxx" />
		<unpack-dll org="org.apache" name="apr" file="apr" />
		<unpack-dll org="org.apache" name="apr-util" file="aprutil" />
	</target>

	<target name="deploy-jars">
                <copy file="${basedir}/config/Client.properties" todir="${build.dir}" failonerror="true" />
                <copy file="${basedir}/config/Client.xml" todir="${build.dir}" failonerror="true" />
                <copy file="${basedir}/config/logback.xml" todir="${build.dir}" failonerror="false" />
                <mkdir dir="${build.dir}/jar" />
                <ivy:retrieve pattern="${build.dir}/jar/[organization]-[module]-[artifact].[ext]" type="jar" />
	</target>

	<target name="compile" depends="unpack-resolve,deploy-jars" description="--> compile all components">

		<!-- Java stuff -->
		<subant target="deploy" buildpath="${basedir}/Client" antfile="build.parent-invoked.xml" />

		<!-- C++ projects (in build order) -->
		<subant target="compile" buildpath="${basedir}/Util" />
		<subant target="compile" buildpath="${basedir}/Service" />
		<subant target="compile" buildpath="${basedir}/ServiceRunner" />
		<subant target="compile" buildpath="${basedir}/Connector" />

	</target>

	<target name="tests" depends="unpack-resolve,deploy-jars" description="--> compile and run unit tests">

		<!-- Test compilation pre-requisite -->
		<subant target="deploy" buildpath="${basedir}/Client" antfile="build.parent-invoked.xml" />

		<!-- C++ pre-requisites -->
		<subant target="compile" buildpath="${basedir}/Util" />
		<subant target="compile" buildpath="${basedir}/Service" />
		<subant target="compile" buildpath="${basedir}/ServiceRunner" />
		<subant target="compile" buildpath="${basedir}/Connector" />

		<!-- C++ tests -->
		<subant target="tests" buildpath="${basedir}/UtilTest" />
		<subant target="tests" buildpath="${basedir}/ServiceTest" />
		<subant target="tests" buildpath="${basedir}/ConnectorTest" />

		<!-- Java tests -->
		<subant target="tests" buildpath="${basedir}/Client" antfile="build.parent-invoked.xml" />

	</target>

	<target name="tests-with-clover" description="--> build and run all tests with local Clover reports generated">
		<!-- Java targets -->
		<subant target="tests-with-clover" buildpath="${basedir}/Client" />
	</target>

	<target name="publish" depends="compile">
		<!-- TODO -->
	</target>
	<target name="publish-local" depends="compile">
		<!-- TODO -->
	</target>
	<target name="tarball" depends="compile">
		<!-- TODO -->
	</target>

	<target name="zipfile" depends="compile">
		<!-- TODO -->
	</target>

	<target name="clean" description="--> clean the project">
		<subant target="clean" buildpathref="build.path" />
		<delete includeemptydirs="true" failonerror="false" dir="${build.dir}" />
	</target>

	<target name="clean-lib" description="--> clean the library path" unless="clean.lib.disabled">
		<delete includeemptydirs="true" failonerror="false" dir="${lib.dir}" />
	</target>

	<target name="clean-src" description="--> clean the auto-generated source code files">
		<subant target="clean-src" buildpathref="build.path" />
	</target>

	<target name="fudge-proto" description="--> autogenerate files from Fudge .proto definitions">
		<subant target="fudge-proto" buildpath="${basedir}/Client" />
		<subant target="proto-c" buildpath="${basedir}/Client" />
	</target>

	<target name="joda-bean">
		<!-- TODO -->
	</target>

	<condition property="env.IVY_SHARED_DEFAULT_ROOT_DEFAULT" value="${env.IVY_SHARED_DEFAULT_ROOT_WINDOWS}" else="${env.IVY_SHARED_DEFAULT_ROOT_NONWINDOWS}"><os family="windows" /></condition>
	<condition property="env.IVY_SHARED_DEFAULT_ROOT" value="${env.IVY_SHARED_DEFAULT_ROOT_DEFAULT}"><not><isset property="env.IVY_SHARED_DEFAULT_ROOT" /></not></condition>
	<import file="${basedir}/../../common/common-ivy.xml" />

</project>
