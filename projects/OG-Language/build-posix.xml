<project name="build-cpp-impl" xmlns:cpptasks="antlib:net.sf.antcontrib.cpptasks">

	<target name="clean" depends="clean-src" description="--> clean the output folders">
		<delete includeemptydirs="true" failonerror="false" dir="${basedir}/Debug" />
		<delete includeemptydirs="true" failonerror="false" dir="${basedir}/Release" />
	</target>

	<target name="cpptask-defined">
		<taskdef resource="cpptasks.tasks" />
		<available classname="net.sf.antcontrib.cpptasks.CCTask" property="cpptasks.present" />
	</target>
	<property name="jni.base.include.dir" value="/etc/alternatives/java_sdk/include" />
	<property name="jni.native.include.dir" value="${jni.base.include.dir}/linux" />
	<target name="cpptask" depends="cpptask-defined" if="cpptasks.present">
		<cpptasks:cc objdir="${build.dir}"
			outfile="${build.dir}/stdafx"
			outtype="static"
			outputfileproperty="cpptask.ok"
			failonerror="false">
			<defineset>
				<define name="HAVE_PTHREAD" if="cc.library.have_pthread" />
			</defineset>
			<includepath>
				<pathelement path="${solution.dir}" />
				<pathelement path="${lib.dir}/include" />
				<pathelement path="${jni.base.include.dir}" />
				<pathelement path="${jni.native.include.dir}" />
			</includepath>
			<fileset dir="${basedir}">
				<include name="stdafx.cpp" />
			</fileset>
		</cpptasks:cc>
	</target>
	<target name="cpptask-none" unless="cpptask.ok">
		<echo>Can't build ${ant.project.name} - required header files and libraries missing</echo>
	</target>

	<target name="compile-impl">
		<mkdir dir="${basedir}/${cc.configuration}" />
		<mkdir dir="${build.dir}/${cc.configuration}" />
		<cpptasks:cc debug="${cc.debug}"
			multithreaded="${cc.multithreaded}"
			objdir="${basedir}/${cc.configuration}"
			optimize="${cc.optimization}"
			outtype="${cc.outtype}"
			warnings="${cc.warnings}"
			runtime="${cc.runtime}"
			subsystem="${cc.subsystem}"
			outfile="${build.dir}/${cc.configuration}/${ant.project.name}">
			<compilerarg value="${cc.cflags}" if="cc.cflags" />
			<defineset>
				<define name="_DEBUG" if="cc.isDebug" />
				<define name="NDEBUG" if="cc.isRelease" />
				<define name="HAVE_PTHREAD" if="cc.library.have_pthread" />
				<define name="DEFAULT_CONFIG_FOLDER" value="TEXT (QUOTE (${defaults.config.folder}))" if="defaults.config.folder" />
				<define name="DEFAULT_CONFIG_BASE" value="TEXT (QUOTE (${defaults.config.base}))" if="defaults.config.base" />
				<define name="DEFAULT_JVM_LIBRARY" value="TEXT (QUOTE (${defaults.jvm.library}))" if="defaults.jvm.library" />
				<define name="DEFAULT_PIPE_FOLDER" value="TEXT (QUOTE (${defaults.pipe.folder}))" if="defaults.pipe.folder" />
			</defineset>
			<includepath>
				<pathelement path="${solution.dir}" />
				<pathelement path="${lib.dir}/include" />
				<pathelement path="${jni.base.include.dir}" />
				<pathelement path="${jni.native.include.dir}" />
			</includepath>
			<fileset dir="${basedir}">
				<include name="*.c" />
				<include name="*.cpp" />
			</fileset>
			<libset dir="${build.dir}/${cc.configuration}" libs="${cc.libInternal}" if="cc.libInternal" />
			<libset dir="${lib.dir}/lib/${cc.configuration}" libs="${cc.libExternal}" if="cc.libExternal" />
			<libset libs="${cc.libDefault}" if="cc.libDefault" />
		</cpptasks:cc>
		<antcall target="compile-after">
			<param name="compile.type" value="${cc.configuration}" />
		</antcall>
	</target>
	<target name="compile-debug" if="cpptask.ok">
		<antcall target="compile-impl">
			<param name="cc.isDebug" value="true" />
			<param name="cc.debug" value="true" />
			<param name="cc.configuration" value="Debug" />
			<param name="cc.optimization" value="none" />
		</antcall>
	</target>
	<target name="compile-release" if="cpptask.ok">
		<antcall target="compile-impl">
			<param name="cc.isRelease" value="true" />
			<param name="cc.debug" value="false" />
			<param name="cc.configuration" value="Release" />
			<param name="cc.optimization" value="speed" />
		</antcall>
	</target>
	<target name="compile" depends="cpptask,cpptask-none,compile-debug,compile-release" description="--> compile project" />

	<property name="tests.results.dir" value="${solution.dir}/TestResults" />
	<target name="tests-impl-none" unless="cpptask.ok">
		<echo>Did not run ${ant.project.name}</echo>
		<echo file="${tests.results.dir}/${ant.project.name}-${cc.configuration}.log">Did not run</echo>
	</target>
	<target name="tests-impl" depends="tests-impl-none" if="cpptask.ok">
		<echo>Running tests - ${ant.project.name}</echo>
		<exec	executable="./${ant.project.name}"
			dir="${build.dir}/${cc.configuration}"
			failonerror="false"
			output="${tests.results.dir}/${ant.project.name}-${cc.configuration}.log" />
		<java classname="com.opengamma.util.test.CPPLogToJUnit" classpathref="run.path.id" fork="true">
			<arg value="${tests.results.dir}/${ant.project.name}-${cc.configuration}.log" />
			<arg value="${tests.results.dir}" />
		</java>
	</target>
	<target name="tests-debug" depends="compile-debug">
		<antcall target="tests-impl">
			<param name="cc.configuration" value="Debug" />
		</antcall>
	</target>
	<target name="tests-release" depends="compile-release">
		<antcall target="tests-impl">
			<param name="cc.configuration" value="Release" />
		</antcall>
	</target>
	<target name="tests-prep" depends="cpptask,cpptask-none">
		<mkdir dir="${solution.dir}/TestResults" />
	</target>
	<target name="tests" depends="tests-prep,tests-debug,tests-release" description="--> run tests in the project" />

	<target name="dist-impl">
		<mkdir dir="${dist.dir}/lib/${cc.configuration}" />
		<mkdir dir="${dist.dir}/bin/${cc.configuration}" />
		<copy file="${build.dir}/${cc.configuration}/lib${ant.project.name}.a" todir="${dist.dir}/lib/${cc.configuration}" failonerror="false" />
		<copy file="${build.dir}/${cc.configuration}/lib${ant.project.name}.so" todir="${dist.dir}/lib/${cc.configuration}" failonerror="false" />
		<copy file="${build.dir}/${cc.configuration}/${ant.project.name}" todir="${dist.dir}/bin/${cc.configuration}" failonerror="false" />
	</target>
	<target name="dist-debug" if="cpptask.ok">
		<antcall target="dist-impl">
			<param name="cc.configuration" value="Debug" />
		</antcall>
	</target>
	<target name="dist-release" if="cpptask.ok">
		<antcall target="dist-impl">
			<param name="cc.configuration" value="Release" />
		</antcall>
	</target>
	<target name="dist" depends="cpptask,cpptask-none,dist-debug,dist-release" description="--> copy artifacts to distribution directories" />

</project>
