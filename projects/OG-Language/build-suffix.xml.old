<project name="build-suffix" xmlns:ivy="antlib:org.apache.ivy.ant">

  <import file="${common.dir}/version.xml" />
  <import file="${common.dir}/cpp.xml" />

  <path id="build.path">
    <path refid="java.build.path" />
    <path refid="cc.build.path" />
    <path refid="cctest.build.path" />
    <path refid="javatest.build.path" />
  </path>

  <condition property="env.IVY_SHARED_DEFAULT_ROOT_DEFAULT" value="${env.IVY_SHARED_DEFAULT_ROOT_WINDOWS}" else="${env.IVY_SHARED_DEFAULT_ROOT_NONWINDOWS}"><os family="windows" /></condition>
  <condition property="env.IVY_SHARED_DEFAULT_ROOT" value="${env.IVY_SHARED_DEFAULT_ROOT_DEFAULT}"><not><isset property="env.IVY_SHARED_DEFAULT_ROOT" /></not></condition>
  <import file="${common.dir}/common-ivy.xml" />

  <target name="unpack-resolve" depends="resolve,cpp.unpack-resolve" />

  <target name="deploy-jars">
    <mkdir dir="${build.dir}/jar" />
    <ivy:retrieve pattern="${build.dir}/jar/[organization]-[module]-[artifact].[ext]" type="jar" />
  </target>

  <!-- THIS BIT NEEDS COPYING STILL -->
  <target name="make-config">
    <property file="${common.dir}/tests.properties" />
    <property name="opengamma.configuration.url" value="http://${opengamma.engine.host}:${opengamma.engine.port}${opengamma.engine.path}jax/configuration/0/" />
    <property name="opengamma.configuration.failOnInvalid" value="true" />
    <property name="opengamma.configuration.failOnMissing" value="false" />
    <echo file="${build.dir}/OpenGamma.properties"># Build system defaults

opengamma.configuration.url=${opengamma.configuration.url}
opengamma.configuration.failOnInvalid=${opengamma.configuration.failOnInvalid}
opengamma.configuration.failOnMissing=${opengamma.configuration.failOnMissing}
    </echo>
  </target>
  <!-- END OF THIS BIT -->

  <target name="compile" depends="unpack-resolve,deploy-jars,version-cpp-header" description="Compiles all components">
    <subant target="deploy" buildpathref="java.build.path" antfile="build.parent-invoked.xml">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="compile" buildpathref="cc.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
  </target>

  <target name="compile-tests" depends="compile" description="Compiles (but does not run) unit tests">
    <subant target="compile" buildpathref="cctest.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="compile-tests" buildpathref="javatest.build.path" antfile="build.parent-invoked.xml">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
  </target>

  <target name="tests" depends="unpack-resolve,deploy-jars,clean-tests,version-cpp-header" description="Compiles and runs unit tests">
    <subant target="deploy" buildpathref="java.build.path" antfile="build.parent-invoked.xml">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="compile" buildpathref="cc.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="tests" buildpathref="cctest.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="tests" buildpathref="javatest.build.path" antfile="build.parent-invoked.xml">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <mkdir dir="${basedir}/TestResults/html" />
    <junitreport todir="${basedir}/TestResults">
      <fileset dir="${basedir}" includes="*/tests/output/xml/TEST-*.xml,TestResults/TEST-*.xml" />
      <report todir="${basedir}/TestResults/html" />
    </junitreport>
  </target>

  <target name="tests-with-clover" description="Builds and runs all tests with local Clover reports generated">
    <subant target="tests-with-clover" buildpathref="javatest.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
  </target>

  <target name="local-version">
    <tstamp>
      <format property="now" pattern="yyyyMMddHHmmss" />
    </tstamp>
    <property name="version" value="${module.version.target}-local-${now}" />
    <!-- TODO: should propogate the 'now' part into the build-number -->
  </target>
  <target name="version">
    <tstamp>
      <format property="now" pattern="yyyyMMddHHmmss" />
    </tstamp>
    <property name="version" value="${module.version.target}" />
  </target>
  <target name="publish" depends="dist,version">
    <!-- TODO -->
  </target>
  <target name="publish-local" depends="dist,local-version">
    <ivy:publish  artifactspattern="${dist.dir}/[artifact].[ext]"
        resolver="local"
        pubrevision="${version}"
        pubdate="${now}"
        status="integration"
        forcedeliver="true" />
  </target>

  <target name="tarball" depends="dist">
    <!-- TODO -->
  </target>
  <target name="src-tarball" />

  <target name="zipfile" depends="dist">
    <!-- TODO -->
  </target>
  <target name="src-zipfile" />
  <target name="dist-src-nodep" />
  <target name="dist-nodep" />

  <target name="clean" depends="clean-lib,clean-dist,clean-tests" description="Cleans the project">
    <subant target="clean" buildpathref="build.path" />
    <antcall target="clean-build" />
  </target>

  <target name="clean-lib" description="Cleans the library path" unless="clean.lib.disabled">
    <delete includeemptydirs="true" failonerror="false" dir="${lib.dir}" />
  </target>
  <target name="clean-dist" description="Cleans the distribution folder">
    <delete includeemptydirs="true" failonerror="false" dir="${dist.dir}" />
  </target>
  <target name="clean-build" description="Cleans the build folder">
    <delete includeemptydirs="true" failonerror="false" dir="${build.dir}" />
  </target>
  <target name="clean-tests" description="Cleans the test output folders">
    <delete includeemptydirs="true" failonerror="false" dir="${basedir}/TestResults" />
  </target>

  <target name="clean-src" description="Cleans the auto-generated source code files">
    <subant target="clean-src" buildpathref="build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
  </target>

  <target name="fudge-proto" description="Autogenerates files from Fudge .proto definitions">
    <subant target="fudge-proto" buildpathref="java.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
    <subant target="proto-c" buildpathref="java.build.path">
      <property name="wkspace.dir" value="${wkspace.dir}" />
    </subant>
  </target>

  <target name="joda-bean">
    <!-- TODO -->
  </target>

  <target name="test-batch">
    <!-- TODO -->
  </target>

</project>
