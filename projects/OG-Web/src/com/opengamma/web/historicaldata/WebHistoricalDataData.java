/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.web.historicaldata;

import java.util.Map;

import javax.ws.rs.core.UriInfo;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.UniqueIdentifier;
import com.opengamma.master.historicaldata.HistoricalDataDocument;
import com.opengamma.master.historicaldata.HistoricalDataLoader;
import com.opengamma.master.historicaldata.HistoricalDataMaster;

/**
 * Data class for web-based historical data.
 */
@BeanDefinition
public class WebHistoricalDataData extends DirectBean {

  /**
   * The historical data master.
   */
  @PropertyDefinition
  private HistoricalDataMaster _historicalDataMaster;
  /**
   * The historical data loader.
   */
  @PropertyDefinition
  private HistoricalDataLoader _historicalDataLoader;
  /**
   * The JSR-311 URI information.
   */
  @PropertyDefinition
  private UriInfo _uriInfo;
  /**
   * The historical data id from the input URI.
   */
  @PropertyDefinition
  private String _uriHistoricalDataId;
  /**
   * The loaded historical data.
   */
  @PropertyDefinition
  private HistoricalDataDocument _historicalData;

  /**
   * Gets the best available id.
   * @param overrideId  the override id, null derives the result from the data
   * @return the id, may be null
   */
  public String getBestTimeSeriesUriId(final UniqueIdentifier overrideId) {
    if (overrideId != null) {
      return overrideId.toLatest().toString();
    }
    return getHistoricalData() != null ? getHistoricalData().getUniqueId().toLatest().toString() : getUriHistoricalDataId();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code WebHistoricalDataData}.
   * @return the meta-bean, not null
   */
  public static WebHistoricalDataData.Meta meta() {
    return WebHistoricalDataData.Meta.INSTANCE;
  }

  @Override
  public WebHistoricalDataData.Meta metaBean() {
    return WebHistoricalDataData.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case 1949049622:  // historicalDataMaster
        return getHistoricalDataMaster();
      case 1932798151:  // historicalDataLoader
        return getHistoricalDataLoader();
      case -173275078:  // uriInfo
        return getUriInfo();
      case -955960997:  // uriHistoricalDataId
        return getUriHistoricalDataId();
      case 815008660:  // historicalData
        return getHistoricalData();
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case 1949049622:  // historicalDataMaster
        setHistoricalDataMaster((HistoricalDataMaster) newValue);
        return;
      case 1932798151:  // historicalDataLoader
        setHistoricalDataLoader((HistoricalDataLoader) newValue);
        return;
      case -173275078:  // uriInfo
        setUriInfo((UriInfo) newValue);
        return;
      case -955960997:  // uriHistoricalDataId
        setUriHistoricalDataId((String) newValue);
        return;
      case 815008660:  // historicalData
        setHistoricalData((HistoricalDataDocument) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      WebHistoricalDataData other = (WebHistoricalDataData) obj;
      return JodaBeanUtils.equal(getHistoricalDataMaster(), other.getHistoricalDataMaster()) &&
          JodaBeanUtils.equal(getHistoricalDataLoader(), other.getHistoricalDataLoader()) &&
          JodaBeanUtils.equal(getUriInfo(), other.getUriInfo()) &&
          JodaBeanUtils.equal(getUriHistoricalDataId(), other.getUriHistoricalDataId()) &&
          JodaBeanUtils.equal(getHistoricalData(), other.getHistoricalData());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getHistoricalDataMaster());
    hash += hash * 31 + JodaBeanUtils.hashCode(getHistoricalDataLoader());
    hash += hash * 31 + JodaBeanUtils.hashCode(getUriInfo());
    hash += hash * 31 + JodaBeanUtils.hashCode(getUriHistoricalDataId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getHistoricalData());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the historical data master.
   * @return the value of the property
   */
  public HistoricalDataMaster getHistoricalDataMaster() {
    return _historicalDataMaster;
  }

  /**
   * Sets the historical data master.
   * @param historicalDataMaster  the new value of the property
   */
  public void setHistoricalDataMaster(HistoricalDataMaster historicalDataMaster) {
    this._historicalDataMaster = historicalDataMaster;
  }

  /**
   * Gets the the {@code historicalDataMaster} property.
   * @return the property, not null
   */
  public final Property<HistoricalDataMaster> historicalDataMaster() {
    return metaBean().historicalDataMaster().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the historical data loader.
   * @return the value of the property
   */
  public HistoricalDataLoader getHistoricalDataLoader() {
    return _historicalDataLoader;
  }

  /**
   * Sets the historical data loader.
   * @param historicalDataLoader  the new value of the property
   */
  public void setHistoricalDataLoader(HistoricalDataLoader historicalDataLoader) {
    this._historicalDataLoader = historicalDataLoader;
  }

  /**
   * Gets the the {@code historicalDataLoader} property.
   * @return the property, not null
   */
  public final Property<HistoricalDataLoader> historicalDataLoader() {
    return metaBean().historicalDataLoader().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the JSR-311 URI information.
   * @return the value of the property
   */
  public UriInfo getUriInfo() {
    return _uriInfo;
  }

  /**
   * Sets the JSR-311 URI information.
   * @param uriInfo  the new value of the property
   */
  public void setUriInfo(UriInfo uriInfo) {
    this._uriInfo = uriInfo;
  }

  /**
   * Gets the the {@code uriInfo} property.
   * @return the property, not null
   */
  public final Property<UriInfo> uriInfo() {
    return metaBean().uriInfo().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the historical data id from the input URI.
   * @return the value of the property
   */
  public String getUriHistoricalDataId() {
    return _uriHistoricalDataId;
  }

  /**
   * Sets the historical data id from the input URI.
   * @param uriHistoricalDataId  the new value of the property
   */
  public void setUriHistoricalDataId(String uriHistoricalDataId) {
    this._uriHistoricalDataId = uriHistoricalDataId;
  }

  /**
   * Gets the the {@code uriHistoricalDataId} property.
   * @return the property, not null
   */
  public final Property<String> uriHistoricalDataId() {
    return metaBean().uriHistoricalDataId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the loaded historical data.
   * @return the value of the property
   */
  public HistoricalDataDocument getHistoricalData() {
    return _historicalData;
  }

  /**
   * Sets the loaded historical data.
   * @param historicalData  the new value of the property
   */
  public void setHistoricalData(HistoricalDataDocument historicalData) {
    this._historicalData = historicalData;
  }

  /**
   * Gets the the {@code historicalData} property.
   * @return the property, not null
   */
  public final Property<HistoricalDataDocument> historicalData() {
    return metaBean().historicalData().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code WebHistoricalDataData}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code historicalDataMaster} property.
     */
    private final MetaProperty<HistoricalDataMaster> _historicalDataMaster = DirectMetaProperty.ofReadWrite(
        this, "historicalDataMaster", WebHistoricalDataData.class, HistoricalDataMaster.class);
    /**
     * The meta-property for the {@code historicalDataLoader} property.
     */
    private final MetaProperty<HistoricalDataLoader> _historicalDataLoader = DirectMetaProperty.ofReadWrite(
        this, "historicalDataLoader", WebHistoricalDataData.class, HistoricalDataLoader.class);
    /**
     * The meta-property for the {@code uriInfo} property.
     */
    private final MetaProperty<UriInfo> _uriInfo = DirectMetaProperty.ofReadWrite(
        this, "uriInfo", WebHistoricalDataData.class, UriInfo.class);
    /**
     * The meta-property for the {@code uriHistoricalDataId} property.
     */
    private final MetaProperty<String> _uriHistoricalDataId = DirectMetaProperty.ofReadWrite(
        this, "uriHistoricalDataId", WebHistoricalDataData.class, String.class);
    /**
     * The meta-property for the {@code historicalData} property.
     */
    private final MetaProperty<HistoricalDataDocument> _historicalData = DirectMetaProperty.ofReadWrite(
        this, "historicalData", WebHistoricalDataData.class, HistoricalDataDocument.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map = new DirectMetaPropertyMap(
        this, null,
        "historicalDataMaster",
        "historicalDataLoader",
        "uriInfo",
        "uriHistoricalDataId",
        "historicalData");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1949049622:  // historicalDataMaster
          return _historicalDataMaster;
        case 1932798151:  // historicalDataLoader
          return _historicalDataLoader;
        case -173275078:  // uriInfo
          return _uriInfo;
        case -955960997:  // uriHistoricalDataId
          return _uriHistoricalDataId;
        case 815008660:  // historicalData
          return _historicalData;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends WebHistoricalDataData> builder() {
      return new DirectBeanBuilder<WebHistoricalDataData>(new WebHistoricalDataData());
    }

    @Override
    public Class<? extends WebHistoricalDataData> beanType() {
      return WebHistoricalDataData.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code historicalDataMaster} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<HistoricalDataMaster> historicalDataMaster() {
      return _historicalDataMaster;
    }

    /**
     * The meta-property for the {@code historicalDataLoader} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<HistoricalDataLoader> historicalDataLoader() {
      return _historicalDataLoader;
    }

    /**
     * The meta-property for the {@code uriInfo} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UriInfo> uriInfo() {
      return _uriInfo;
    }

    /**
     * The meta-property for the {@code uriHistoricalDataId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> uriHistoricalDataId() {
      return _uriHistoricalDataId;
    }

    /**
     * The meta-property for the {@code historicalData} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<HistoricalDataDocument> historicalData() {
      return _historicalData;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
