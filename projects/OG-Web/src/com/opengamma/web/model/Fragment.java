/**
 * Copyright (C) 2009 - 2011 by OpenGamma Inc.
 *
 * Please see distribution for license.
 */
package com.opengamma.web.model;

import java.io.File;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicMetaBean;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.util.ArgumentChecker;

/**
 * Fragment represents a file in a bundle
 */
@BeanDefinition
public class Fragment extends DirectBean implements BundleNode {
  
  /**
   * The file representation
   */
  @PropertyDefinition
  private File _file;
  
  /**
   * Creates an instance.
   */
  public Fragment() {
  }
  
  /**
   * Creates an instance with a default file
   * 
   * @param file the file, not-null
   */
  public Fragment(File file) {
    ArgumentChecker.notNull(file, "file");
    _file = file;
  }
  
  @Override
  public List<Fragment> getAllFragment() {
    return Collections.singletonList(this);
  }
  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code Fragment}.
   * @return the meta-bean, not null
   */
  public static Fragment.Meta meta() {
    return Fragment.Meta.INSTANCE;
  }

  @Override
  public Fragment.Meta metaBean() {
    return Fragment.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case 3143036:  // file
        return getFile();
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case 3143036:  // file
        setFile((File) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the file representation
   * @return the value of the property
   */
  public File getFile() {
    return _file;
  }

  /**
   * Sets the file representation
   * @param file  the new value of the property
   */
  public void setFile(File file) {
    this._file = file;
  }

  /**
   * Gets the the {@code file} property.
   * @return the property, not null
   */
  public final Property<File> file() {
    return metaBean().file().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code Fragment}.
   */
  public static class Meta extends BasicMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code file} property.
     */
    private final MetaProperty<File> _file = DirectMetaProperty.ofReadWrite(this, "file", File.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings({"unchecked", "rawtypes" })
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap();
      temp.put("file", _file);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public Fragment createBean() {
      return new Fragment();
    }

    @Override
    public Class<? extends Fragment> beanType() {
      return Fragment.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code file} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<File> file() {
      return _file;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
