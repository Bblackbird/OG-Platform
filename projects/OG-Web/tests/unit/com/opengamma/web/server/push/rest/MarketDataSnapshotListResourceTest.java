package com.opengamma.web.server.push.rest;

import static com.opengamma.web.server.push.rest.MarketDataSnapshotListResource.BASIS_VIEW_NAME;
import static com.opengamma.web.server.push.rest.MarketDataSnapshotListResource.ID;
import static com.opengamma.web.server.push.rest.MarketDataSnapshotListResource.NAME;
import static com.opengamma.web.server.push.rest.MarketDataSnapshotListResource.SNAPSHOTS;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.testng.AssertJUnit.assertEquals;
import static org.testng.AssertJUnit.assertNotNull;

import java.util.Arrays;
import java.util.List;

import org.eclipse.jetty.server.Server;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.web.context.WebApplicationContext;
import org.testng.annotations.Test;

import com.opengamma.core.marketdatasnapshot.impl.ManageableMarketDataSnapshot;
import com.opengamma.id.UniqueId;
import com.opengamma.master.marketdatasnapshot.MarketDataSnapshotDocument;
import com.opengamma.master.marketdatasnapshot.MarketDataSnapshotMaster;
import com.opengamma.master.marketdatasnapshot.MarketDataSnapshotSearchRequest;
import com.opengamma.master.marketdatasnapshot.MarketDataSnapshotSearchResult;
import com.opengamma.master.marketdatasnapshot.impl.InMemorySnapshotMaster;
import com.opengamma.util.tuple.Pair;
import com.opengamma.web.server.push.WebPushTestUtils;

public class MarketDataSnapshotListResourceTest {

  private static MarketDataSnapshotDocument createSnapshot(String basisViewName, String name, UniqueId uid) {
    ManageableMarketDataSnapshot snapshot = new ManageableMarketDataSnapshot();
    snapshot.setBasisViewName(basisViewName);
    snapshot.setName(name);
    snapshot.setUniqueId(uid);
    return new MarketDataSnapshotDocument(snapshot);
  }

  private static MarketDataSnapshotListResource createResource(MarketDataSnapshotDocument... docs) {
    MarketDataSnapshotMaster snapshotMaster = mock(MarketDataSnapshotMaster.class);
    MarketDataSnapshotSearchRequest snapshotSearchRequest = new MarketDataSnapshotSearchRequest();
    snapshotSearchRequest.setIncludeData(false);
    List<MarketDataSnapshotDocument> documents = Arrays.asList(docs);
    MarketDataSnapshotSearchResult result = new MarketDataSnapshotSearchResult(documents);
    when(snapshotMaster.search(snapshotSearchRequest)).thenReturn(result);
    return new MarketDataSnapshotListResource(snapshotMaster);
  }

  @Test
  public void getJson() throws JSONException {
    MarketDataSnapshotListResource resource = createResource(
        createSnapshot("basisView1", "snap1", UniqueId.of("Tst", "1")),
        createSnapshot("basisView1", "snap2", UniqueId.of("Tst", "2")),
        createSnapshot("basisView2", "snap3", UniqueId.of("Tst", "3")));

    String json = resource.getMarketDataSnapshotList();
    JSONArray jsonArray = new JSONArray(json);
    assertEquals(2, jsonArray.length());

    JSONObject basis1Map = jsonArray.getJSONObject(0);
    assertEquals("basisView1", basis1Map.get(BASIS_VIEW_NAME));
    JSONArray basis1Snapshots = basis1Map.getJSONArray(SNAPSHOTS);
    assertNotNull(basis1Snapshots);
    assertEquals(2, basis1Snapshots.length());
    JSONObject snap1 = basis1Snapshots.getJSONObject(0);
    assertEquals("snap1", snap1.get(NAME));
    assertEquals(UniqueId.of("Tst", "1").toString(), snap1.get(ID));
    JSONObject snap2 = basis1Snapshots.getJSONObject(1);
    assertEquals("snap2", snap2.get(NAME));
    assertEquals(UniqueId.of("Tst", "2").toString(), snap2.get(ID));

    JSONObject basis2Map = jsonArray.getJSONObject(1);
    assertEquals("basisView2", basis2Map.get(BASIS_VIEW_NAME));
    JSONArray basis2Snapshots = basis2Map.getJSONArray(SNAPSHOTS);
    assertNotNull(basis2Snapshots);
    assertEquals(1, basis2Snapshots.length());
    JSONObject snap3 = basis2Snapshots.getJSONObject(0);
    assertEquals("snap3", snap3.get(NAME));
    assertEquals(UniqueId.of("Tst", "3").toString(), snap3.get(ID));
  }

  @Test
  public void snapshotWithBlankNameNotReturned() throws JSONException {
    MarketDataSnapshotListResource resource = createResource(
        createSnapshot("basisView", null, UniqueId.of("Tst", "1")),
        createSnapshot("basisView", "", UniqueId.of("Tst", "2")));

    JSONArray json = new JSONArray(resource.getMarketDataSnapshotList());
    assertEquals(0, json.length());
  }

  @Test
  public void snapshotWithNullIdNotReturned() throws JSONException {
    MarketDataSnapshotListResource resource = createResource(
        createSnapshot("basisView", "snap", null));

    JSONArray json = new JSONArray(resource.getMarketDataSnapshotList());
    assertEquals(0, json.length());
  }

  @Test
  public void snapshotWithAutoGeneratedNameNotReturned() throws JSONException {
    MarketDataSnapshotListResource resource = createResource(
        createSnapshot("basisView", "{12345678-1234-abcd-cdef-0123456789ab}", UniqueId.of("Tst", "1")),
        createSnapshot("basisView", "12345678-1234-abcd-cdef-0123456789ab", UniqueId.of("Tst", "2")));

    JSONArray json = new JSONArray(resource.getMarketDataSnapshotList());
    assertEquals(0, json.length());
  }

  @Test
  public void getJsonOverHttp() throws Exception {
    Pair<Server, WebApplicationContext> serverAndContext =
        WebPushTestUtils.createJettyServer("classpath:/com/opengamma/web/server/push/marketdatasnapshotlist-test.xml");
    Server server = serverAndContext.getFirst();
    WebApplicationContext context = serverAndContext.getSecond();
    InMemorySnapshotMaster snapshotMaster = context.getBean(InMemorySnapshotMaster.class);
    snapshotMaster.add(createSnapshot("basisView1", "snap1", null));
    JSONArray json = new JSONArray(WebPushTestUtils.readFromPath("/jax/marketdatasnapshots"));
    assertEquals(1, json.length());
    JSONObject basis1Map = json.getJSONObject(0);
    assertEquals("basisView1", basis1Map.get(BASIS_VIEW_NAME));
    JSONArray snapshots = basis1Map.getJSONArray(SNAPSHOTS);
    assertEquals(1, snapshots.length());
    JSONObject snap1 = snapshots.getJSONObject(0);
    assertEquals("snap1", snap1.get(NAME));
    assertEquals(UniqueId.of("MemSnap", "1").toString(), snap1.get(ID));
    server.stop();
  }
}
