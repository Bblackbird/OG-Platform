/**
 * Copyright (C) 2009 - 2010 by OpenGamma Inc.
 *
 * Please see distribution for license.
 */
package com.opengamma.master.config;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.time.Instant;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicMetaBean;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.id.UniqueIdentifier;
import com.opengamma.util.PublicAPI;

/**
 * A configuration document type
 *
 * @param <T> the type of configuration document
 */
@PublicAPI
@BeanDefinition
public class ConfigDocument<T> extends DirectBean {

  /**
   * The configuration document unique identifier.
   * This field is managed by the {@code ConfigMaster} but must be set for updates.
   */
  @PropertyDefinition
  private UniqueIdentifier _configId;
  /**
   * The start of an interval that the version of the configuration is accurate for.
   * This field is populated and managed by the {@code ConfigMaster}.
   */
  @PropertyDefinition
  private Instant _versionFromInstant;
  /**
   * The end of an interval that the version of the configuration is accurate for.
   * Null indicates this is the latest version.
   * This field is populated and managed by the {@code ConfigMaster}.
   */
  @PropertyDefinition
  private Instant _versionToInstant;
  /**
   * The name of this configuration element.
   */
  @PropertyDefinition
  private String _name;
  /**
   * The configuration element value itself.
   */
  @PropertyDefinition
  private T _value;

  /**
   * Creates an empty document.
   */
  public ConfigDocument() {
  }

//  /**
//   * Creates an document with values specified.
//   * @param id the mongodb generated object id, not-null
//   * @param oid the configuration document id, all versions will have same oid, not-null
//   * @param version the version number, > 0
//   * @param name the name of configuration document, not-null
//   * @param creationInstant the creation time, not-null
//   * @param lastReadInstant the last accessed time, not -null
//   * @param value the actual configuation type, not-null
//   */
//  public ConfigDocument(String id, String oid, int version, String name, Instant creationInstant, Instant lastReadInstant, T value) {
//    _id = id;
//    _oid = oid;
//    _version = version;
//    _name = name;
//    _creationInstant = creationInstant;
//    _lastReadInstant = lastReadInstant;
//    _value = value;
//  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ConfigDocument}.
   * @param <R>  the bean's generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R> ConfigDocument.Meta<R> meta() {
    return ConfigDocument.Meta.INSTANCE;
  }

  @SuppressWarnings("unchecked")
  @Override
  public ConfigDocument.Meta<T> metaBean() {
    return ConfigDocument.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case -580140035:  // configId
        return getConfigId();
      case 2006263519:  // versionFromInstant
        return getVersionFromInstant();
      case 1577022702:  // versionToInstant
        return getVersionToInstant();
      case 3373707:  // name
        return getName();
      case 111972721:  // value
        return getValue();
    }
    return super.propertyGet(propertyName);
  }

  @SuppressWarnings("unchecked")
  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case -580140035:  // configId
        setConfigId((UniqueIdentifier) newValue);
        return;
      case 2006263519:  // versionFromInstant
        setVersionFromInstant((Instant) newValue);
        return;
      case 1577022702:  // versionToInstant
        setVersionToInstant((Instant) newValue);
        return;
      case 3373707:  // name
        setName((String) newValue);
        return;
      case 111972721:  // value
        setValue((T) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the configuration document unique identifier.
   * This field is managed by the {@code ConfigMaster} but must be set for updates.
   * @return the value of the property
   */
  public UniqueIdentifier getConfigId() {
    return _configId;
  }

  /**
   * Sets the configuration document unique identifier.
   * This field is managed by the {@code ConfigMaster} but must be set for updates.
   * @param configId  the new value of the property
   */
  public void setConfigId(UniqueIdentifier configId) {
    this._configId = configId;
  }

  /**
   * Gets the the {@code configId} property.
   * This field is managed by the {@code ConfigMaster} but must be set for updates.
   * @return the property, not null
   */
  public final Property<UniqueIdentifier> configId() {
    return metaBean().configId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the start of an interval that the version of the configuration is accurate for.
   * This field is populated and managed by the {@code ConfigMaster}.
   * @return the value of the property
   */
  public Instant getVersionFromInstant() {
    return _versionFromInstant;
  }

  /**
   * Sets the start of an interval that the version of the configuration is accurate for.
   * This field is populated and managed by the {@code ConfigMaster}.
   * @param versionFromInstant  the new value of the property
   */
  public void setVersionFromInstant(Instant versionFromInstant) {
    this._versionFromInstant = versionFromInstant;
  }

  /**
   * Gets the the {@code versionFromInstant} property.
   * This field is populated and managed by the {@code ConfigMaster}.
   * @return the property, not null
   */
  public final Property<Instant> versionFromInstant() {
    return metaBean().versionFromInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the end of an interval that the version of the configuration is accurate for.
   * Null indicates this is the latest version.
   * This field is populated and managed by the {@code ConfigMaster}.
   * @return the value of the property
   */
  public Instant getVersionToInstant() {
    return _versionToInstant;
  }

  /**
   * Sets the end of an interval that the version of the configuration is accurate for.
   * Null indicates this is the latest version.
   * This field is populated and managed by the {@code ConfigMaster}.
   * @param versionToInstant  the new value of the property
   */
  public void setVersionToInstant(Instant versionToInstant) {
    this._versionToInstant = versionToInstant;
  }

  /**
   * Gets the the {@code versionToInstant} property.
   * Null indicates this is the latest version.
   * This field is populated and managed by the {@code ConfigMaster}.
   * @return the property, not null
   */
  public final Property<Instant> versionToInstant() {
    return metaBean().versionToInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name of this configuration element.
   * @return the value of the property
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets the name of this configuration element.
   * @param name  the new value of the property
   */
  public void setName(String name) {
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the configuration element value itself.
   * @return the value of the property
   */
  public T getValue() {
    return _value;
  }

  /**
   * Sets the configuration element value itself.
   * @param value  the new value of the property
   */
  public void setValue(T value) {
    this._value = value;
  }

  /**
   * Gets the the {@code value} property.
   * @return the property, not null
   */
  public final Property<T> value() {
    return metaBean().value().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ConfigDocument}.
   */
  public static class Meta<T> extends BasicMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code configId} property.
     */
    private final MetaProperty<UniqueIdentifier> _configId = DirectMetaProperty.ofReadWrite(this, "configId", UniqueIdentifier.class);
    /**
     * The meta-property for the {@code versionFromInstant} property.
     */
    private final MetaProperty<Instant> _versionFromInstant = DirectMetaProperty.ofReadWrite(this, "versionFromInstant", Instant.class);
    /**
     * The meta-property for the {@code versionToInstant} property.
     */
    private final MetaProperty<Instant> _versionToInstant = DirectMetaProperty.ofReadWrite(this, "versionToInstant", Instant.class);
    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(this, "name", String.class);
    /**
     * The meta-property for the {@code value} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<T> _value = (DirectMetaProperty) DirectMetaProperty.ofReadWrite(this, "value", Object.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings({"unchecked", "rawtypes" })
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap();
      temp.put("configId", _configId);
      temp.put("versionFromInstant", _versionFromInstant);
      temp.put("versionToInstant", _versionToInstant);
      temp.put("name", _name);
      temp.put("value", _value);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public ConfigDocument<T> createBean() {
      return new ConfigDocument<T>();
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends ConfigDocument<T>> beanType() {
      return (Class) ConfigDocument.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code configId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueIdentifier> configId() {
      return _configId;
    }

    /**
     * The meta-property for the {@code versionFromInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> versionFromInstant() {
      return _versionFromInstant;
    }

    /**
     * The meta-property for the {@code versionToInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> versionToInstant() {
      return _versionToInstant;
    }

    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code value} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<T> value() {
      return _value;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
