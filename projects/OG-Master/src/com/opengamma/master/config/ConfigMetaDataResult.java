/**
 * Copyright (C) 2011 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.master.config;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.master.AbstractMetaDataResult;
import com.opengamma.util.PublicSPI;

/**
 * Result from obtaining meta-data for the configuration master.
 * <p>
 * Meta-data is only returned if requested.
 */
@PublicSPI
@BeanDefinition
public class ConfigMetaDataResult extends AbstractMetaDataResult {

  /**
   * The list if valid configuration types.
   * This is only populated if requested.
   */
  @PropertyDefinition
  private final List<Class<?>> _configTypes = new ArrayList<Class<?>>();

  /**
   * Creates an instance.
   */
  public ConfigMetaDataResult() {
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ConfigMetaDataResult}.
   * @return the meta-bean, not null
   */
  public static ConfigMetaDataResult.Meta meta() {
    return ConfigMetaDataResult.Meta.INSTANCE;
  }

  @Override
  public ConfigMetaDataResult.Meta metaBean() {
    return ConfigMetaDataResult.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case 7511639:  // configTypes
        return getConfigTypes();
    }
    return super.propertyGet(propertyName);
  }

  @SuppressWarnings("unchecked")
  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case 7511639:  // configTypes
        setConfigTypes((List<Class<?>>) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the list if valid configuration types.
   * This is only populated if requested.
   * @return the value of the property
   */
  public List<Class<?>> getConfigTypes() {
    return _configTypes;
  }

  /**
   * Sets the list if valid configuration types.
   * This is only populated if requested.
   * @param configTypes  the new value of the property
   */
  public void setConfigTypes(List<Class<?>> configTypes) {
    this._configTypes.clear();
    this._configTypes.addAll(configTypes);
  }

  /**
   * Gets the the {@code configTypes} property.
   * This is only populated if requested.
   * @return the property, not null
   */
  public final Property<List<Class<?>>> configTypes() {
    return metaBean().configTypes().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ConfigMetaDataResult}.
   */
  public static class Meta extends AbstractMetaDataResult.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code configTypes} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<Class<?>>> _configTypes = DirectMetaProperty.ofReadWrite(this, "configTypes", (Class) List.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings({"unchecked", "rawtypes" })
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap(super.metaPropertyMap());
      temp.put("configTypes", _configTypes);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public ConfigMetaDataResult createBean() {
      return new ConfigMetaDataResult();
    }

    @Override
    public Class<? extends ConfigMetaDataResult> beanType() {
      return ConfigMetaDataResult.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code configTypes} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<List<Class<?>>> configTypes() {
      return _configTypes;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
