/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.master.historicaltimeseries;

import java.util.Map;

import javax.time.calendar.LocalDate;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.DerivedProperty;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.UniqueIdentifier;
import com.opengamma.master.AbstractDocument;
import com.opengamma.util.ArgumentChecker;
import com.opengamma.util.PublicSPI;

/**
 * A document used to pass into and out of the historical time-series master.
 * <p>
 * This class is mutable and not thread-safe.
 */
@PublicSPI
@BeanDefinition
public class HistoricalTimeSeriesDocument extends AbstractDocument {

  /**
   * The time-series with associated information.
   */
  @PropertyDefinition(validate = "notNull")
  private ManageableHistoricalTimeSeries _series;
  /**
   * The earliest date of time-series.
   * This field is only returned if requested from the master.
   */
  @PropertyDefinition
  private LocalDate _earliest;
  /**
   * The latest date of time-series.
   * This field is only returned if requested from the master.
   */
  @PropertyDefinition
  private LocalDate _latest; 

  /**
   * Creates an instance.
   */
  public HistoricalTimeSeriesDocument() {
    _series = new ManageableHistoricalTimeSeries();
  }

  /**
   * Creates an instance.
   * 
   * @param series  the series, not null
   */
  public HistoricalTimeSeriesDocument(ManageableHistoricalTimeSeries series) {
    ArgumentChecker.notNull(series, "series");
    setSeries(series);
  }

  //-------------------------------------------------------------------------
  /**
   * Gets the historical time-series unique identifier.
   * This gets the unique identifier from the {@code ManageableHistoricalTimeSeries}.
   * 
   * @return the value of the property
   */
  @DerivedProperty
  public UniqueIdentifier getUniqueId() {
    return getSeries().getUniqueId();
  }

  /**
   * Sets the historical time-series unique identifier.
   * This sets the unique identifier in the {@code ManageableHistoricalTimeSeries}.
   * 
   * @param uniqueId  the new value of the property
   */
  public void setUniqueId(UniqueIdentifier uniqueId) {
    getSeries().setUniqueId(uniqueId);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code HistoricalTimeSeriesDocument}.
   * @return the meta-bean, not null
   */
  public static HistoricalTimeSeriesDocument.Meta meta() {
    return HistoricalTimeSeriesDocument.Meta.INSTANCE;
  }

  @Override
  public HistoricalTimeSeriesDocument.Meta metaBean() {
    return HistoricalTimeSeriesDocument.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case -905838985:  // series
        return getSeries();
      case -809579181:  // earliest
        return getEarliest();
      case -1109880953:  // latest
        return getLatest();
      case -294460212:  // uniqueId
        return getUniqueId();
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case -905838985:  // series
        setSeries((ManageableHistoricalTimeSeries) newValue);
        return;
      case -809579181:  // earliest
        setEarliest((LocalDate) newValue);
        return;
      case -1109880953:  // latest
        setLatest((LocalDate) newValue);
        return;
      case -294460212:  // uniqueId
        throw new UnsupportedOperationException("Property cannot be written: uniqueId");
    }
    super.propertySet(propertyName, newValue);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_series, "series");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      HistoricalTimeSeriesDocument other = (HistoricalTimeSeriesDocument) obj;
      return JodaBeanUtils.equal(getSeries(), other.getSeries()) &&
          JodaBeanUtils.equal(getEarliest(), other.getEarliest()) &&
          JodaBeanUtils.equal(getLatest(), other.getLatest()) &&
          JodaBeanUtils.equal(getUniqueId(), other.getUniqueId()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getSeries());
    hash += hash * 31 + JodaBeanUtils.hashCode(getEarliest());
    hash += hash * 31 + JodaBeanUtils.hashCode(getLatest());
    hash += hash * 31 + JodaBeanUtils.hashCode(getUniqueId());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the time-series with associated information.
   * @return the value of the property, not null
   */
  public ManageableHistoricalTimeSeries getSeries() {
    return _series;
  }

  /**
   * Sets the time-series with associated information.
   * @param series  the new value of the property, not null
   */
  public void setSeries(ManageableHistoricalTimeSeries series) {
    JodaBeanUtils.notNull(series, "series");
    this._series = series;
  }

  /**
   * Gets the the {@code series} property.
   * @return the property, not null
   */
  public final Property<ManageableHistoricalTimeSeries> series() {
    return metaBean().series().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the earliest date of time-series.
   * This field is only returned if requested from the master.
   * @return the value of the property
   */
  public LocalDate getEarliest() {
    return _earliest;
  }

  /**
   * Sets the earliest date of time-series.
   * This field is only returned if requested from the master.
   * @param earliest  the new value of the property
   */
  public void setEarliest(LocalDate earliest) {
    this._earliest = earliest;
  }

  /**
   * Gets the the {@code earliest} property.
   * This field is only returned if requested from the master.
   * @return the property, not null
   */
  public final Property<LocalDate> earliest() {
    return metaBean().earliest().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the latest date of time-series.
   * This field is only returned if requested from the master.
   * @return the value of the property
   */
  public LocalDate getLatest() {
    return _latest;
  }

  /**
   * Sets the latest date of time-series.
   * This field is only returned if requested from the master.
   * @param latest  the new value of the property
   */
  public void setLatest(LocalDate latest) {
    this._latest = latest;
  }

  /**
   * Gets the the {@code latest} property.
   * This field is only returned if requested from the master.
   * @return the property, not null
   */
  public final Property<LocalDate> latest() {
    return metaBean().latest().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the the {@code uniqueId} property.
   * This gets the unique identifier from the {@code ManageableHistoricalTimeSeries}.
   * 
   * @return the property, not null
   */
  public final Property<UniqueIdentifier> uniqueId() {
    return metaBean().uniqueId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code HistoricalTimeSeriesDocument}.
   */
  public static class Meta extends AbstractDocument.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code series} property.
     */
    private final MetaProperty<ManageableHistoricalTimeSeries> _series = DirectMetaProperty.ofReadWrite(
        this, "series", HistoricalTimeSeriesDocument.class, ManageableHistoricalTimeSeries.class);
    /**
     * The meta-property for the {@code earliest} property.
     */
    private final MetaProperty<LocalDate> _earliest = DirectMetaProperty.ofReadWrite(
        this, "earliest", HistoricalTimeSeriesDocument.class, LocalDate.class);
    /**
     * The meta-property for the {@code latest} property.
     */
    private final MetaProperty<LocalDate> _latest = DirectMetaProperty.ofReadWrite(
        this, "latest", HistoricalTimeSeriesDocument.class, LocalDate.class);
    /**
     * The meta-property for the {@code uniqueId} property.
     */
    private final MetaProperty<UniqueIdentifier> _uniqueId = DirectMetaProperty.ofReadOnly(
        this, "uniqueId", HistoricalTimeSeriesDocument.class, UniqueIdentifier.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "series",
        "earliest",
        "latest",
        "uniqueId");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -905838985:  // series
          return _series;
        case -809579181:  // earliest
          return _earliest;
        case -1109880953:  // latest
          return _latest;
        case -294460212:  // uniqueId
          return _uniqueId;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends HistoricalTimeSeriesDocument> builder() {
      return new DirectBeanBuilder<HistoricalTimeSeriesDocument>(new HistoricalTimeSeriesDocument());
    }

    @Override
    public Class<? extends HistoricalTimeSeriesDocument> beanType() {
      return HistoricalTimeSeriesDocument.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code series} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ManageableHistoricalTimeSeries> series() {
      return _series;
    }

    /**
     * The meta-property for the {@code earliest} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> earliest() {
      return _earliest;
    }

    /**
     * The meta-property for the {@code latest} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> latest() {
      return _latest;
    }

    /**
     * The meta-property for the {@code uniqueId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueIdentifier> uniqueId() {
      return _uniqueId;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
