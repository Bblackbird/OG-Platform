/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.master.historicaltimeseries;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.UniqueIdentifier;
import com.opengamma.util.PublicSPI;
import com.opengamma.util.timeseries.localdate.ArrayLocalDateDoubleTimeSeries;
import com.opengamma.util.timeseries.localdate.LocalDateDoubleTimeSeries;

/**
 * Request containing options for updating part of a historical time-series.
 * <p>
 * The historical time-series document is large, consisting of every point 
 * in the time-series plus the surrounding information. This update request
 * provides a faster and more convenient mechanism to support updates.
 * <p>
 * Note that it is only possible to append to the time-series.
 * Other operations are treated as corrections.
 * <p>
 * This class is mutable and not thread-safe.
 */
@PublicSPI
@BeanDefinition
public class HistoricalTimeSeriesUpdateRequest extends DirectBean {

  /**
   * The unique identifier of the historical time-series.
   * This must not be null for a valid update.
   */
  @PropertyDefinition(validate = "notNull")
  private UniqueIdentifier _uniqueId;
  /**
   * The time-series to append, creating a new version.
   */
  @PropertyDefinition(validate = "notNull")
  private LocalDateDoubleTimeSeries _seriesToAppend = new ArrayLocalDateDoubleTimeSeries();

  /**
   * Creates an instance.
   */
  protected HistoricalTimeSeriesUpdateRequest() {
  }

  /**
   * Creates an instance using a single search identifier.
   * 
   * @param uniqueId  the unique identifier to search for, not null
   */
  public HistoricalTimeSeriesUpdateRequest(UniqueIdentifier uniqueId) {
    setUniqueId(uniqueId);
  }

  /**
   * Creates an instance using a single search identifier.
   * 
   * @param uniqueId  the unique identifier to search for, not null
   * @param seriesToAppend  the series to append, not null
   */
  public HistoricalTimeSeriesUpdateRequest(UniqueIdentifier uniqueId, LocalDateDoubleTimeSeries seriesToAppend) {
    setUniqueId(uniqueId);
    setSeriesToAppend(seriesToAppend);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code HistoricalTimeSeriesUpdateRequest}.
   * @return the meta-bean, not null
   */
  public static HistoricalTimeSeriesUpdateRequest.Meta meta() {
    return HistoricalTimeSeriesUpdateRequest.Meta.INSTANCE;
  }

  @Override
  public HistoricalTimeSeriesUpdateRequest.Meta metaBean() {
    return HistoricalTimeSeriesUpdateRequest.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case -294460212:  // uniqueId
        return getUniqueId();
      case -2047623924:  // seriesToAppend
        return getSeriesToAppend();
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case -294460212:  // uniqueId
        setUniqueId((UniqueIdentifier) newValue);
        return;
      case -2047623924:  // seriesToAppend
        setSeriesToAppend((LocalDateDoubleTimeSeries) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_uniqueId, "uniqueId");
    JodaBeanUtils.notNull(_seriesToAppend, "seriesToAppend");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      HistoricalTimeSeriesUpdateRequest other = (HistoricalTimeSeriesUpdateRequest) obj;
      return JodaBeanUtils.equal(getUniqueId(), other.getUniqueId()) &&
          JodaBeanUtils.equal(getSeriesToAppend(), other.getSeriesToAppend());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getUniqueId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getSeriesToAppend());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the unique identifier of the historical time-series.
   * This must not be null for a valid update.
   * @return the value of the property, not null
   */
  public UniqueIdentifier getUniqueId() {
    return _uniqueId;
  }

  /**
   * Sets the unique identifier of the historical time-series.
   * This must not be null for a valid update.
   * @param uniqueId  the new value of the property, not null
   */
  public void setUniqueId(UniqueIdentifier uniqueId) {
    JodaBeanUtils.notNull(uniqueId, "uniqueId");
    this._uniqueId = uniqueId;
  }

  /**
   * Gets the the {@code uniqueId} property.
   * This must not be null for a valid update.
   * @return the property, not null
   */
  public final Property<UniqueIdentifier> uniqueId() {
    return metaBean().uniqueId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the time-series to append, creating a new version.
   * @return the value of the property, not null
   */
  public LocalDateDoubleTimeSeries getSeriesToAppend() {
    return _seriesToAppend;
  }

  /**
   * Sets the time-series to append, creating a new version.
   * @param seriesToAppend  the new value of the property, not null
   */
  public void setSeriesToAppend(LocalDateDoubleTimeSeries seriesToAppend) {
    JodaBeanUtils.notNull(seriesToAppend, "seriesToAppend");
    this._seriesToAppend = seriesToAppend;
  }

  /**
   * Gets the the {@code seriesToAppend} property.
   * @return the property, not null
   */
  public final Property<LocalDateDoubleTimeSeries> seriesToAppend() {
    return metaBean().seriesToAppend().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code HistoricalTimeSeriesUpdateRequest}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code uniqueId} property.
     */
    private final MetaProperty<UniqueIdentifier> _uniqueId = DirectMetaProperty.ofReadWrite(
        this, "uniqueId", HistoricalTimeSeriesUpdateRequest.class, UniqueIdentifier.class);
    /**
     * The meta-property for the {@code seriesToAppend} property.
     */
    private final MetaProperty<LocalDateDoubleTimeSeries> _seriesToAppend = DirectMetaProperty.ofReadWrite(
        this, "seriesToAppend", HistoricalTimeSeriesUpdateRequest.class, LocalDateDoubleTimeSeries.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map = new DirectMetaPropertyMap(
        this, null,
        "uniqueId",
        "seriesToAppend");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -294460212:  // uniqueId
          return _uniqueId;
        case -2047623924:  // seriesToAppend
          return _seriesToAppend;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends HistoricalTimeSeriesUpdateRequest> builder() {
      return new DirectBeanBuilder<HistoricalTimeSeriesUpdateRequest>(new HistoricalTimeSeriesUpdateRequest());
    }

    @Override
    public Class<? extends HistoricalTimeSeriesUpdateRequest> beanType() {
      return HistoricalTimeSeriesUpdateRequest.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code uniqueId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueIdentifier> uniqueId() {
      return _uniqueId;
    }

    /**
     * The meta-property for the {@code seriesToAppend} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDateDoubleTimeSeries> seriesToAppend() {
      return _seriesToAppend;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
