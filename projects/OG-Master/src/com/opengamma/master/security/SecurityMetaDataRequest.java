/**
 * Copyright (C) 2011 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.master.security;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.master.AbstractMetaDataRequest;
import com.opengamma.util.PublicSPI;

/**
 * Request for meta-data about the security master.
 * <p>
 * This will return meta-data valid for the whole master.
 */
@PublicSPI
@BeanDefinition
public class SecurityMetaDataRequest extends AbstractMetaDataRequest {

  /**
   * Whether to fetch the security types meta-data, true by default.
   */
  @PropertyDefinition
  private boolean _securityTypes = true;

  /**
   * Creates an instance.
   */
  public SecurityMetaDataRequest() {
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SecurityMetaDataRequest}.
   * @return the meta-bean, not null
   */
  public static SecurityMetaDataRequest.Meta meta() {
    return SecurityMetaDataRequest.Meta.INSTANCE;
  }

  @Override
  public SecurityMetaDataRequest.Meta metaBean() {
    return SecurityMetaDataRequest.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case -714180327:  // securityTypes
        return isSecurityTypes();
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case -714180327:  // securityTypes
        setSecurityTypes((Boolean) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets whether to fetch the security types meta-data, true by default.
   * @return the value of the property
   */
  public boolean isSecurityTypes() {
    return _securityTypes;
  }

  /**
   * Sets whether to fetch the security types meta-data, true by default.
   * @param securityTypes  the new value of the property
   */
  public void setSecurityTypes(boolean securityTypes) {
    this._securityTypes = securityTypes;
  }

  /**
   * Gets the the {@code securityTypes} property.
   * @return the property, not null
   */
  public final Property<Boolean> securityTypes() {
    return metaBean().securityTypes().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SecurityMetaDataRequest}.
   */
  public static class Meta extends AbstractMetaDataRequest.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code securityTypes} property.
     */
    private final MetaProperty<Boolean> _securityTypes = DirectMetaProperty.ofReadWrite(this, "securityTypes", Boolean.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings({"unchecked", "rawtypes" })
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap(super.metaPropertyMap());
      temp.put("securityTypes", _securityTypes);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public SecurityMetaDataRequest createBean() {
      return new SecurityMetaDataRequest();
    }

    @Override
    public Class<? extends SecurityMetaDataRequest> beanType() {
      return SecurityMetaDataRequest.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code securityTypes} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Boolean> securityTypes() {
      return _securityTypes;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
