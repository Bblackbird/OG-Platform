/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.master;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.BasicMetaBean;
import org.joda.beans.impl.direct.DirectBean;

import com.opengamma.util.PublicSPI;

/**
 * Request for meta-data about a single master.
 * <p>
 * Some user interfaces require meta-data in order to operate, such as
 * a drop-down list of valid entries to select from. This abstract class
 * provides the basic ability to request such meta-data.
 */
@PublicSPI
@BeanDefinition
public abstract class AbstractMetaDataRequest extends DirectBean {

  /**
   * Creates an instance.
   */
  public AbstractMetaDataRequest() {
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code AbstractMetaDataRequest}.
   * @return the meta-bean, not null
   */
  public static AbstractMetaDataRequest.Meta meta() {
    return AbstractMetaDataRequest.Meta.INSTANCE;
  }

  @Override
  public AbstractMetaDataRequest.Meta metaBean() {
    return AbstractMetaDataRequest.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code AbstractMetaDataRequest}.
   */
  public static class Meta extends BasicMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings({"unchecked", "rawtypes" })
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap();
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public AbstractMetaDataRequest createBean() {
      throw new UnsupportedOperationException("AbstractMetaDataRequest is an abstract class");
    }

    @Override
    public Class<? extends AbstractMetaDataRequest> beanType() {
      return AbstractMetaDataRequest.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
