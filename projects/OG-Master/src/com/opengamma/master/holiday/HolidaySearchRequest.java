/**
 * Copyright (C) 2009 - 2010 by OpenGamma Inc.
 *
 * Please see distribution for license.
 */
package com.opengamma.master.holiday;

import java.io.Serializable;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.time.calendar.LocalDate;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.core.common.Currency;
import com.opengamma.core.holiday.HolidayType;
import com.opengamma.id.Identifier;
import com.opengamma.id.IdentifierBundle;
import com.opengamma.master.AbstractSearchRequest;
import com.opengamma.util.ArgumentChecker;

/**
 * Request for searching for holidays.
 * <p>
 * Documents will be returned that match the search criteria.
 * This class provides the ability to page the results and to search
 * as at a specific version and correction instant.
 * See {@link HolidayHistoryRequest} for more details on how history works.
 */
@BeanDefinition
public class HolidaySearchRequest extends AbstractSearchRequest implements Serializable {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The holiday name, wildcards allowed, null to not match on name.
   */
  @PropertyDefinition
  private String _name;
  /**
   * The holiday type, null to not match on type.
   */
  @PropertyDefinition
  private HolidayType _type;
  /**
   * The data provider key to match, null to not match on provider.
   * This field is useful when receiving updates from the same provider.
   */
  @PropertyDefinition
  private Identifier _providerKey;
  /**
   * A date to check to determine if it is a holiday, null to not match on type.
   */
  @PropertyDefinition
  private LocalDate _dateToCheck;
  /**
   * The currency to search for, null to not match on currency.
   */
  @PropertyDefinition
  private Currency _currency;
  /**
   * The region identifiers to match, null to not match on this field.
   * This will return holidays where the holiday region identifier matches one of the search identifiers.
   * Note that an empty bundle will not match any holidays, whereas a null bundle places
   * no restrictions on the result.
   */
  @PropertyDefinition
  private IdentifierBundle _regionIdentifiers;
  /**
   * The exchange identifiers to match, null to not match on this field.
   * This will return holidays where the holiday exchange identifier matches one of the search identifiers.
   * Note that an empty bundle will not match any holidays, whereas a null bundle places
   * no restrictions on the result.
   */
  @PropertyDefinition
  private IdentifierBundle _exchangeIdentifiers;

  /**
   * Creates an instance.
   */
  public HolidaySearchRequest() {
  }

  /**
   * Creates an instance.
   * 
   * @param type  the type of the holiday, not null
   */
  public HolidaySearchRequest(final HolidayType type) {
    ArgumentChecker.notNull(type, "type");
    setType(type);
  }

  /**
   * Creates an instance to search for the specified currency.
   * <p>
   * The type will be set to be CURRENCY.
   * 
   * @param currency  the currency to search for, not null
   */
  public HolidaySearchRequest(Currency currency) {
    ArgumentChecker.notNull(currency, "currency");
    setCurrency(currency);
    setType(HolidayType.CURRENCY);
  }

  /**
   * Creates an instance to search for the specified identifier.
   * <p>
   * The type will be used to determine if the identifiers are regions or exchanges.
   * 
   * @param type  the type of the holiday, not null
   * @param exchangeOrRegionIds  the region or exchange identifiers to search for, not null
   */
  public HolidaySearchRequest(final HolidayType type, final IdentifierBundle exchangeOrRegionIds) {
    ArgumentChecker.notNull(type, "type");
    ArgumentChecker.notNull(exchangeOrRegionIds, "exchangeOrRegionIds");
    setType(type);
    switch (type) {
      case BANK:
        setRegionIdentifiers(exchangeOrRegionIds);
        break;
      case SETTLEMENT:
      case TRADING:
        setExchangeIdentifiers(exchangeOrRegionIds);
        break;
      case CURRENCY:
      default:
        throw new IllegalArgumentException("Use currency constructor to request a currency holiday");
    }
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code HolidaySearchRequest}.
   * @return the meta-bean, not null
   */
  public static HolidaySearchRequest.Meta meta() {
    return HolidaySearchRequest.Meta.INSTANCE;
  }

  @Override
  public HolidaySearchRequest.Meta metaBean() {
    return HolidaySearchRequest.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case 3373707:  // name
        return getName();
      case 3575610:  // type
        return getType();
      case 2064682670:  // providerKey
        return getProviderKey();
      case 14222271:  // dateToCheck
        return getDateToCheck();
      case 575402001:  // currency
        return getCurrency();
      case 596396374:  // regionIdentifiers
        return getRegionIdentifiers();
      case -339616057:  // exchangeIdentifiers
        return getExchangeIdentifiers();
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case 3373707:  // name
        setName((String) newValue);
        return;
      case 3575610:  // type
        setType((HolidayType) newValue);
        return;
      case 2064682670:  // providerKey
        setProviderKey((Identifier) newValue);
        return;
      case 14222271:  // dateToCheck
        setDateToCheck((LocalDate) newValue);
        return;
      case 575402001:  // currency
        setCurrency((Currency) newValue);
        return;
      case 596396374:  // regionIdentifiers
        setRegionIdentifiers((IdentifierBundle) newValue);
        return;
      case -339616057:  // exchangeIdentifiers
        setExchangeIdentifiers((IdentifierBundle) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the holiday name, wildcards allowed, null to not match on name.
   * @return the value of the property
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets the holiday name, wildcards allowed, null to not match on name.
   * @param name  the new value of the property
   */
  public void setName(String name) {
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the holiday type, null to not match on type.
   * @return the value of the property
   */
  public HolidayType getType() {
    return _type;
  }

  /**
   * Sets the holiday type, null to not match on type.
   * @param type  the new value of the property
   */
  public void setType(HolidayType type) {
    this._type = type;
  }

  /**
   * Gets the the {@code type} property.
   * @return the property, not null
   */
  public final Property<HolidayType> type() {
    return metaBean().type().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the data provider key to match, null to not match on provider.
   * This field is useful when receiving updates from the same provider.
   * @return the value of the property
   */
  public Identifier getProviderKey() {
    return _providerKey;
  }

  /**
   * Sets the data provider key to match, null to not match on provider.
   * This field is useful when receiving updates from the same provider.
   * @param providerKey  the new value of the property
   */
  public void setProviderKey(Identifier providerKey) {
    this._providerKey = providerKey;
  }

  /**
   * Gets the the {@code providerKey} property.
   * This field is useful when receiving updates from the same provider.
   * @return the property, not null
   */
  public final Property<Identifier> providerKey() {
    return metaBean().providerKey().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets a date to check to determine if it is a holiday, null to not match on type.
   * @return the value of the property
   */
  public LocalDate getDateToCheck() {
    return _dateToCheck;
  }

  /**
   * Sets a date to check to determine if it is a holiday, null to not match on type.
   * @param dateToCheck  the new value of the property
   */
  public void setDateToCheck(LocalDate dateToCheck) {
    this._dateToCheck = dateToCheck;
  }

  /**
   * Gets the the {@code dateToCheck} property.
   * @return the property, not null
   */
  public final Property<LocalDate> dateToCheck() {
    return metaBean().dateToCheck().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currency to search for, null to not match on currency.
   * @return the value of the property
   */
  public Currency getCurrency() {
    return _currency;
  }

  /**
   * Sets the currency to search for, null to not match on currency.
   * @param currency  the new value of the property
   */
  public void setCurrency(Currency currency) {
    this._currency = currency;
  }

  /**
   * Gets the the {@code currency} property.
   * @return the property, not null
   */
  public final Property<Currency> currency() {
    return metaBean().currency().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the region identifiers to match, null to not match on this field.
   * This will return holidays where the holiday region identifier matches one of the search identifiers.
   * Note that an empty bundle will not match any holidays, whereas a null bundle places
   * no restrictions on the result.
   * @return the value of the property
   */
  public IdentifierBundle getRegionIdentifiers() {
    return _regionIdentifiers;
  }

  /**
   * Sets the region identifiers to match, null to not match on this field.
   * This will return holidays where the holiday region identifier matches one of the search identifiers.
   * Note that an empty bundle will not match any holidays, whereas a null bundle places
   * no restrictions on the result.
   * @param regionIdentifiers  the new value of the property
   */
  public void setRegionIdentifiers(IdentifierBundle regionIdentifiers) {
    this._regionIdentifiers = regionIdentifiers;
  }

  /**
   * Gets the the {@code regionIdentifiers} property.
   * This will return holidays where the holiday region identifier matches one of the search identifiers.
   * Note that an empty bundle will not match any holidays, whereas a null bundle places
   * no restrictions on the result.
   * @return the property, not null
   */
  public final Property<IdentifierBundle> regionIdentifiers() {
    return metaBean().regionIdentifiers().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the exchange identifiers to match, null to not match on this field.
   * This will return holidays where the holiday exchange identifier matches one of the search identifiers.
   * Note that an empty bundle will not match any holidays, whereas a null bundle places
   * no restrictions on the result.
   * @return the value of the property
   */
  public IdentifierBundle getExchangeIdentifiers() {
    return _exchangeIdentifiers;
  }

  /**
   * Sets the exchange identifiers to match, null to not match on this field.
   * This will return holidays where the holiday exchange identifier matches one of the search identifiers.
   * Note that an empty bundle will not match any holidays, whereas a null bundle places
   * no restrictions on the result.
   * @param exchangeIdentifiers  the new value of the property
   */
  public void setExchangeIdentifiers(IdentifierBundle exchangeIdentifiers) {
    this._exchangeIdentifiers = exchangeIdentifiers;
  }

  /**
   * Gets the the {@code exchangeIdentifiers} property.
   * This will return holidays where the holiday exchange identifier matches one of the search identifiers.
   * Note that an empty bundle will not match any holidays, whereas a null bundle places
   * no restrictions on the result.
   * @return the property, not null
   */
  public final Property<IdentifierBundle> exchangeIdentifiers() {
    return metaBean().exchangeIdentifiers().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code HolidaySearchRequest}.
   */
  public static class Meta extends AbstractSearchRequest.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(this, "name", String.class);
    /**
     * The meta-property for the {@code type} property.
     */
    private final MetaProperty<HolidayType> _type = DirectMetaProperty.ofReadWrite(this, "type", HolidayType.class);
    /**
     * The meta-property for the {@code providerKey} property.
     */
    private final MetaProperty<Identifier> _providerKey = DirectMetaProperty.ofReadWrite(this, "providerKey", Identifier.class);
    /**
     * The meta-property for the {@code dateToCheck} property.
     */
    private final MetaProperty<LocalDate> _dateToCheck = DirectMetaProperty.ofReadWrite(this, "dateToCheck", LocalDate.class);
    /**
     * The meta-property for the {@code currency} property.
     */
    private final MetaProperty<Currency> _currency = DirectMetaProperty.ofReadWrite(this, "currency", Currency.class);
    /**
     * The meta-property for the {@code regionIdentifiers} property.
     */
    private final MetaProperty<IdentifierBundle> _regionIdentifiers = DirectMetaProperty.ofReadWrite(this, "regionIdentifiers", IdentifierBundle.class);
    /**
     * The meta-property for the {@code exchangeIdentifiers} property.
     */
    private final MetaProperty<IdentifierBundle> _exchangeIdentifiers = DirectMetaProperty.ofReadWrite(this, "exchangeIdentifiers", IdentifierBundle.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings({"unchecked", "rawtypes" })
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap(super.metaPropertyMap());
      temp.put("name", _name);
      temp.put("type", _type);
      temp.put("providerKey", _providerKey);
      temp.put("dateToCheck", _dateToCheck);
      temp.put("currency", _currency);
      temp.put("regionIdentifiers", _regionIdentifiers);
      temp.put("exchangeIdentifiers", _exchangeIdentifiers);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public HolidaySearchRequest createBean() {
      return new HolidaySearchRequest();
    }

    @Override
    public Class<? extends HolidaySearchRequest> beanType() {
      return HolidaySearchRequest.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code type} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<HolidayType> type() {
      return _type;
    }

    /**
     * The meta-property for the {@code providerKey} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Identifier> providerKey() {
      return _providerKey;
    }

    /**
     * The meta-property for the {@code dateToCheck} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> dateToCheck() {
      return _dateToCheck;
    }

    /**
     * The meta-property for the {@code currency} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Currency> currency() {
      return _currency;
    }

    /**
     * The meta-property for the {@code regionIdentifiers} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<IdentifierBundle> regionIdentifiers() {
      return _regionIdentifiers;
    }

    /**
     * The meta-property for the {@code exchangeIdentifiers} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<IdentifierBundle> exchangeIdentifiers() {
      return _exchangeIdentifiers;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
