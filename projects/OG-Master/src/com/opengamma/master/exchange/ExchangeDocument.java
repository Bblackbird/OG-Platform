/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.master.exchange;

import java.io.Serializable;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.UniqueId;
import com.opengamma.master.AbstractDocument;
import com.opengamma.util.ArgumentChecker;
import com.opengamma.util.PublicSPI;

/**
 * A document used to pass into and out of the exchange master.
 */
@PublicSPI
@BeanDefinition
public class ExchangeDocument extends AbstractDocument implements Serializable {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The exchange object held by the document.
   */
  @PropertyDefinition
  private ManageableExchange _object;
  /**
   * The exchange unique identifier.
   * This field is managed by the master but must be set for updates.
   */
  @PropertyDefinition
  private UniqueId _uniqueId;

  /**
   * Creates an instance.
   */
  public ExchangeDocument() {
  }

  /**
   * Creates an instance from an exchange.
   * @param exchange  the exchange, not null
   */
  public ExchangeDocument(final ManageableExchange exchange) {
    ArgumentChecker.notNull(exchange, "exchange");
    setUniqueId(exchange.getUniqueId());
    setObject(exchange);
  }

  //-------------------------------------------------------------------------
  @Override
  public ManageableExchange getValue() {
    return getObject();
  }

  /**
   * Gets the name of the exchange.
   * <p>
   * This is derived from the exchange itself.
   * 
   * @return the name, null if no name
   */
  public String getName() {
    return (getObject() != null ? getObject().getName() : null);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ExchangeDocument}.
   * @return the meta-bean, not null
   */
  public static ExchangeDocument.Meta meta() {
    return ExchangeDocument.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(ExchangeDocument.Meta.INSTANCE);
  }

  @Override
  public ExchangeDocument.Meta metaBean() {
    return ExchangeDocument.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -1023368385:  // object
        return getObject();
      case -294460212:  // uniqueId
        return getUniqueId();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -1023368385:  // object
        setObject((ManageableExchange) newValue);
        return;
      case -294460212:  // uniqueId
        setUniqueId((UniqueId) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ExchangeDocument other = (ExchangeDocument) obj;
      return JodaBeanUtils.equal(getObject(), other.getObject()) &&
          JodaBeanUtils.equal(getUniqueId(), other.getUniqueId()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getObject());
    hash += hash * 31 + JodaBeanUtils.hashCode(getUniqueId());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the exchange object held by the document.
   * @return the value of the property
   */
  public ManageableExchange getObject() {
    return _object;
  }

  /**
   * Sets the exchange object held by the document.
   * @param object  the new value of the property
   */
  public void setObject(ManageableExchange object) {
    this._object = object;
  }

  /**
   * Gets the the {@code object} property.
   * @return the property, not null
   */
  public final Property<ManageableExchange> object() {
    return metaBean().object().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the exchange unique identifier.
   * This field is managed by the master but must be set for updates.
   * @return the value of the property
   */
  public UniqueId getUniqueId() {
    return _uniqueId;
  }

  /**
   * Sets the exchange unique identifier.
   * This field is managed by the master but must be set for updates.
   * @param uniqueId  the new value of the property
   */
  public void setUniqueId(UniqueId uniqueId) {
    this._uniqueId = uniqueId;
  }

  /**
   * Gets the the {@code uniqueId} property.
   * This field is managed by the master but must be set for updates.
   * @return the property, not null
   */
  public final Property<UniqueId> uniqueId() {
    return metaBean().uniqueId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ExchangeDocument}.
   */
  public static class Meta extends AbstractDocument.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code object} property.
     */
    private final MetaProperty<ManageableExchange> _object = DirectMetaProperty.ofReadWrite(
        this, "object", ExchangeDocument.class, ManageableExchange.class);
    /**
     * The meta-property for the {@code uniqueId} property.
     */
    private final MetaProperty<UniqueId> _uniqueId = DirectMetaProperty.ofReadWrite(
        this, "uniqueId", ExchangeDocument.class, UniqueId.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "object",
        "uniqueId");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1023368385:  // object
          return _object;
        case -294460212:  // uniqueId
          return _uniqueId;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ExchangeDocument> builder() {
      return new DirectBeanBuilder<ExchangeDocument>(new ExchangeDocument());
    }

    @Override
    public Class<? extends ExchangeDocument> beanType() {
      return ExchangeDocument.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code object} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ManageableExchange> object() {
      return _object;
    }

    /**
     * The meta-property for the {@code uniqueId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueId> uniqueId() {
      return _uniqueId;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
