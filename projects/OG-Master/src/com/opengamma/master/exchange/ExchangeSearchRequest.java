/**
 * Copyright (C) 2009 - 2010 by OpenGamma Inc.
 *
 * Please see distribution for license.
 */
package com.opengamma.master.exchange;

import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.id.Identifier;
import com.opengamma.id.IdentifierBundle;
import com.opengamma.master.AbstractSearchRequest;
import com.opengamma.util.ArgumentChecker;

/**
 * Request for searching for exchanges.
 * <p>
 * Documents will be returned that match the search criteria.
 * This class provides the ability to page the results and to search
 * as at a specific version and correction instant.
 * See {@link ExchangeHistoryRequest} for more details on how history works.
 */
@BeanDefinition
public class ExchangeSearchRequest extends AbstractSearchRequest {

  /**
   * The exchange name, wildcards allowed, null to not match on name.
   */
  @PropertyDefinition
  private String _name;
  /**
   * The exchange identifier bundles to match, empty to not match on this field, not null.
   * An exchange matches if one of the bundles matches.
   * Note that an empty set places no restrictions on the result.
   */
  @PropertyDefinition(set = "setClearAddAll")
  private final Set<IdentifierBundle> _identifiers = new HashSet<IdentifierBundle>();

  /**
   * Creates an instance.
   */
  public ExchangeSearchRequest() {
  }

  /**
   * Creates an instance using a single search identifier.
   * 
   * @param identifier  the identifier to look up, not null
   */
  public ExchangeSearchRequest(Identifier identifier) {
    addIdentifierBundle(IdentifierBundle.of(identifier));
  }

  /**
   * Creates an instance using a bundle of identifiers.
   * 
   * @param bundle  the bundle of identifiers to look up, not null
   */
  public ExchangeSearchRequest(IdentifierBundle bundle) {
    ArgumentChecker.notNull(bundle, "identifiers");
    addIdentifierBundle(bundle);
  }

  //-------------------------------------------------------------------------
  /**
   * Adds a bundle representing this identifier to the collection to search for.
   * 
   * @param identifier  the identifier to add as a bundle, not null
   */
  public void addIdentifierBundle(Identifier identifier) {
    addIdentifierBundle(IdentifierBundle.of(identifier));
  }

  /**
   * Adds a bundle to the collection to search for.
   * 
   * @param bundle  the bundle to add, not null
   */
  public void addIdentifierBundle(IdentifierBundle bundle) {
    ArgumentChecker.notNull(bundle, "bundle");
    getIdentifiers().add(bundle);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ExchangeSearchRequest}.
   * @return the meta-bean, not null
   */
  public static ExchangeSearchRequest.Meta meta() {
    return ExchangeSearchRequest.Meta.INSTANCE;
  }

  @Override
  public ExchangeSearchRequest.Meta metaBean() {
    return ExchangeSearchRequest.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case 3373707:  // name
        return getName();
      case 1368189162:  // identifiers
        return getIdentifiers();
    }
    return super.propertyGet(propertyName);
  }

  @SuppressWarnings("unchecked")
  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case 3373707:  // name
        setName((String) newValue);
        return;
      case 1368189162:  // identifiers
        setIdentifiers((Set<IdentifierBundle>) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the exchange name, wildcards allowed, null to not match on name.
   * @return the value of the property
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets the exchange name, wildcards allowed, null to not match on name.
   * @param name  the new value of the property
   */
  public void setName(String name) {
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the exchange identifier bundles to match, empty to not match on this field, not null.
   * An exchange matches if one of the bundles matches.
   * Note that an empty set places no restrictions on the result.
   * @return the value of the property
   */
  public Set<IdentifierBundle> getIdentifiers() {
    return _identifiers;
  }

  /**
   * Sets the exchange identifier bundles to match, empty to not match on this field, not null.
   * An exchange matches if one of the bundles matches.
   * Note that an empty set places no restrictions on the result.
   * @param identifiers  the new value of the property
   */
  public void setIdentifiers(Set<IdentifierBundle> identifiers) {
    this._identifiers.clear();
    this._identifiers.addAll(identifiers);
  }

  /**
   * Gets the the {@code identifiers} property.
   * An exchange matches if one of the bundles matches.
   * Note that an empty set places no restrictions on the result.
   * @return the property, not null
   */
  public final Property<Set<IdentifierBundle>> identifiers() {
    return metaBean().identifiers().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ExchangeSearchRequest}.
   */
  public static class Meta extends AbstractSearchRequest.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(this, "name", String.class);
    /**
     * The meta-property for the {@code identifiers} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Set<IdentifierBundle>> _identifiers = DirectMetaProperty.ofReadWrite(this, "identifiers", (Class) Set.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings({"unchecked", "rawtypes" })
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap(super.metaPropertyMap());
      temp.put("name", _name);
      temp.put("identifiers", _identifiers);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public ExchangeSearchRequest createBean() {
      return new ExchangeSearchRequest();
    }

    @Override
    public Class<? extends ExchangeSearchRequest> beanType() {
      return ExchangeSearchRequest.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code identifiers} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Set<IdentifierBundle>> identifiers() {
      return _identifiers;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
