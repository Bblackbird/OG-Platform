/**
 * Copyright (C) 2009 - 2010 by OpenGamma Inc.
 *
 * Please see distribution for license.
 */
package com.opengamma.master.position;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.time.Instant;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicMetaBean;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.id.UniqueIdentifier;

/**
 * Request for getting a trade with full detail.
 */
@BeanDefinition
public class FullTradeGetRequest extends DirectBean {

  /**
   * The trade object identifier.
   * Any identifier version specified will be overridden by the instants.
   */
  @PropertyDefinition
  private UniqueIdentifier _tradeId;
  /**
   * The instant to search for a version at, null treated as the latest version.
   */
  @PropertyDefinition
  private Instant _versionAsOfInstant;
  /**
   * The instant to search for corrections for, null treated as the latest correction.
   */
  @PropertyDefinition
  private Instant _correctedToInstant;

  /**
   * Creates an instance.
   */
  public FullTradeGetRequest() {
  }

  /**
   * Creates an instance.
   * @param uid  the position object identifier, may be null
   */
  public FullTradeGetRequest(UniqueIdentifier uid) {
    setTradeId(uid);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FullTradeGetRequest}.
   * @return the meta-bean, not null
   */
  public static FullTradeGetRequest.Meta meta() {
    return FullTradeGetRequest.Meta.INSTANCE;
  }

  @Override
  public FullTradeGetRequest.Meta metaBean() {
    return FullTradeGetRequest.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case -1067372129:  // tradeId
        return getTradeId();
      case 598802432:  // versionAsOfInstant
        return getVersionAsOfInstant();
      case -28367267:  // correctedToInstant
        return getCorrectedToInstant();
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case -1067372129:  // tradeId
        setTradeId((UniqueIdentifier) newValue);
        return;
      case 598802432:  // versionAsOfInstant
        setVersionAsOfInstant((Instant) newValue);
        return;
      case -28367267:  // correctedToInstant
        setCorrectedToInstant((Instant) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the trade object identifier.
   * Any identifier version specified will be overridden by the instants.
   * @return the value of the property
   */
  public UniqueIdentifier getTradeId() {
    return _tradeId;
  }

  /**
   * Sets the trade object identifier.
   * Any identifier version specified will be overridden by the instants.
   * @param tradeId  the new value of the property
   */
  public void setTradeId(UniqueIdentifier tradeId) {
    this._tradeId = tradeId;
  }

  /**
   * Gets the the {@code tradeId} property.
   * Any identifier version specified will be overridden by the instants.
   * @return the property, not null
   */
  public final Property<UniqueIdentifier> tradeId() {
    return metaBean().tradeId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the instant to search for a version at, null treated as the latest version.
   * @return the value of the property
   */
  public Instant getVersionAsOfInstant() {
    return _versionAsOfInstant;
  }

  /**
   * Sets the instant to search for a version at, null treated as the latest version.
   * @param versionAsOfInstant  the new value of the property
   */
  public void setVersionAsOfInstant(Instant versionAsOfInstant) {
    this._versionAsOfInstant = versionAsOfInstant;
  }

  /**
   * Gets the the {@code versionAsOfInstant} property.
   * @return the property, not null
   */
  public final Property<Instant> versionAsOfInstant() {
    return metaBean().versionAsOfInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the instant to search for corrections for, null treated as the latest correction.
   * @return the value of the property
   */
  public Instant getCorrectedToInstant() {
    return _correctedToInstant;
  }

  /**
   * Sets the instant to search for corrections for, null treated as the latest correction.
   * @param correctedToInstant  the new value of the property
   */
  public void setCorrectedToInstant(Instant correctedToInstant) {
    this._correctedToInstant = correctedToInstant;
  }

  /**
   * Gets the the {@code correctedToInstant} property.
   * @return the property, not null
   */
  public final Property<Instant> correctedToInstant() {
    return metaBean().correctedToInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FullTradeGetRequest}.
   */
  public static class Meta extends BasicMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code tradeId} property.
     */
    private final MetaProperty<UniqueIdentifier> _tradeId = DirectMetaProperty.ofReadWrite(this, "tradeId", UniqueIdentifier.class);
    /**
     * The meta-property for the {@code versionAsOfInstant} property.
     */
    private final MetaProperty<Instant> _versionAsOfInstant = DirectMetaProperty.ofReadWrite(this, "versionAsOfInstant", Instant.class);
    /**
     * The meta-property for the {@code correctedToInstant} property.
     */
    private final MetaProperty<Instant> _correctedToInstant = DirectMetaProperty.ofReadWrite(this, "correctedToInstant", Instant.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings({"unchecked", "rawtypes" })
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap();
      temp.put("tradeId", _tradeId);
      temp.put("versionAsOfInstant", _versionAsOfInstant);
      temp.put("correctedToInstant", _correctedToInstant);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public FullTradeGetRequest createBean() {
      return new FullTradeGetRequest();
    }

    @Override
    public Class<? extends FullTradeGetRequest> beanType() {
      return FullTradeGetRequest.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code tradeId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueIdentifier> tradeId() {
      return _tradeId;
    }

    /**
     * The meta-property for the {@code versionAsOfInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> versionAsOfInstant() {
      return _versionAsOfInstant;
    }

    /**
     * The meta-property for the {@code correctedToInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> correctedToInstant() {
      return _correctedToInstant;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
