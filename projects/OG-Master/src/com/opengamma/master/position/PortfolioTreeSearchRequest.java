/**
 * Copyright (C) 2009 - 2010 by OpenGamma Inc.
 *
 * Please see distribution for license.
 */
package com.opengamma.master.position;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.master.AbstractSearchRequest;

/**
 * Request for searching for portfolio trees.
 * <p>
 * Documents will be returned that match the search criteria.
 * This class provides the ability to page the results and to search
 * as at a specific version and correction instant.
 * See {@link PortfolioTreeHistoryRequest} for more details on how history works.
 */
@BeanDefinition
public class PortfolioTreeSearchRequest extends AbstractSearchRequest {

  /**
   * The portfolio name, wildcards allowed, null to not match on name.
   */
  @PropertyDefinition
  private String _name;
  /**
   * The depth of nodes to return.
   * A value of zero returns the root node, one returns the root node with immediate children, and so on.
   * By default this is zero to save space in the response.
   * A negative value, such as -1, returns the full tree.
   */
  @PropertyDefinition
  private int _depth;

  /**
   * Creates an instance.
   */
  public PortfolioTreeSearchRequest() {
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code PortfolioTreeSearchRequest}.
   * @return the meta-bean, not null
   */
  public static PortfolioTreeSearchRequest.Meta meta() {
    return PortfolioTreeSearchRequest.Meta.INSTANCE;
  }

  @Override
  public PortfolioTreeSearchRequest.Meta metaBean() {
    return PortfolioTreeSearchRequest.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case 3373707:  // name
        return getName();
      case 95472323:  // depth
        return getDepth();
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case 3373707:  // name
        setName((String) newValue);
        return;
      case 95472323:  // depth
        setDepth((Integer) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the portfolio name, wildcards allowed, null to not match on name.
   * @return the value of the property
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets the portfolio name, wildcards allowed, null to not match on name.
   * @param name  the new value of the property
   */
  public void setName(String name) {
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the depth of nodes to return.
   * A value of zero returns the root node, one returns the root node with immediate children, and so on.
   * By default this is zero to save space in the response.
   * A negative value, such as -1, returns the full tree.
   * @return the value of the property
   */
  public int getDepth() {
    return _depth;
  }

  /**
   * Sets the depth of nodes to return.
   * A value of zero returns the root node, one returns the root node with immediate children, and so on.
   * By default this is zero to save space in the response.
   * A negative value, such as -1, returns the full tree.
   * @param depth  the new value of the property
   */
  public void setDepth(int depth) {
    this._depth = depth;
  }

  /**
   * Gets the the {@code depth} property.
   * A value of zero returns the root node, one returns the root node with immediate children, and so on.
   * By default this is zero to save space in the response.
   * A negative value, such as -1, returns the full tree.
   * @return the property, not null
   */
  public final Property<Integer> depth() {
    return metaBean().depth().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code PortfolioTreeSearchRequest}.
   */
  public static class Meta extends AbstractSearchRequest.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(this, "name", String.class);
    /**
     * The meta-property for the {@code depth} property.
     */
    private final MetaProperty<Integer> _depth = DirectMetaProperty.ofReadWrite(this, "depth", Integer.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings({"unchecked", "rawtypes" })
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap(super.metaPropertyMap());
      temp.put("name", _name);
      temp.put("depth", _depth);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public PortfolioTreeSearchRequest createBean() {
      return new PortfolioTreeSearchRequest();
    }

    @Override
    public Class<? extends PortfolioTreeSearchRequest> beanType() {
      return PortfolioTreeSearchRequest.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code depth} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> depth() {
      return _depth;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
