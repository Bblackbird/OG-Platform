/**
 * Copyright (C) 2009 - 2010 by OpenGamma Inc.
 *
 * Please see distribution for license.
 */
package com.opengamma.master.position;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.time.Instant;
import javax.time.InstantProvider;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.id.UniqueIdentifier;
import com.opengamma.master.AbstractHistoryRequest;

/**
 * Request for the history of a portfolio tree.
 * <p>
 * A full position master implements historical storage of data.
 * History can be stored in two dimensions and this request provides searching.
 * <p>
 * The first historic dimension is the classic series of versions.
 * Each new version is stored in such a manor that previous versions can be accessed.
 * <p>
 * The second historic dimension is corrections.
 * A correction occurs when it is realized that the original data stored was incorrect.
 * A simple position master might simply replace the original version with the corrected value.
 * A full implementation will store the correction in such a manner that it is still possible
 * to obtain the value before the correction was made.
 * <p>
 * For example, a portfolio added on Monday and updated on Thursday has two versions.
 * If it is realized on Friday that the version stored on Monday was incorrect, then a
 * correction may be applied. There are now two versions, the first of which has one correction.
 * This may continue, with multiple corrections allowed for each version.
 * <p>
 * Versions are represented by instants in the search.
 */
@BeanDefinition
public class PortfolioTreeHistoryRequest extends AbstractHistoryRequest {

  /**
   * The depth of nodes to return.
   * A value of zero returns the root node, one returns the root node with immediate children, and so on.
   * By default this is zero to save space in the response.
   * A negative value, such as -1, returns the full tree.
   */
  @PropertyDefinition
  private int _depth;

  /**
   * Creates an instance.
   * The object identifier must be added before searching.
   */
  public PortfolioTreeHistoryRequest() {
  }

  /**
   * Creates an instance.
   * With no further customization this will retrieve all versions and corrections.
   * @param oid  the object identifier
   */
  public PortfolioTreeHistoryRequest(final UniqueIdentifier oid) {
    this(oid, null, null);
  }

  /**
   * Creates an instance.
   * @param oid  the object identifier
   * @param versionInstantProvider  the version instant to retrieve, null for latest version
   */
  public PortfolioTreeHistoryRequest(final UniqueIdentifier oid, InstantProvider versionInstantProvider) {
    this(oid, versionInstantProvider, null);
  }

  /**
   * Creates an instance.
   * @param oid  the object identifier
   * @param versionInstantProvider  the version instant to retrieve, null for latest version
   * @param correctedToInstantProvider  the instant that the data should be corrected to, null for latest correction
   */
  public PortfolioTreeHistoryRequest(final UniqueIdentifier oid, InstantProvider versionInstantProvider, InstantProvider correctedToInstantProvider) {
    setObjectId(oid);
    if (versionInstantProvider != null) {
      final Instant versionInstant = Instant.of(versionInstantProvider);
      setVersionsFromInstant(versionInstant);
      setVersionsToInstant(versionInstant);
    }
    if (correctedToInstantProvider != null) {
      final Instant correctedToInstant = Instant.of(correctedToInstantProvider);
      setCorrectionsFromInstant(correctedToInstant);
      setCorrectionsToInstant(correctedToInstant);
    }
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code PortfolioTreeHistoryRequest}.
   * @return the meta-bean, not null
   */
  public static PortfolioTreeHistoryRequest.Meta meta() {
    return PortfolioTreeHistoryRequest.Meta.INSTANCE;
  }

  @Override
  public PortfolioTreeHistoryRequest.Meta metaBean() {
    return PortfolioTreeHistoryRequest.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case 95472323:  // depth
        return getDepth();
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case 95472323:  // depth
        setDepth((Integer) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the depth of nodes to return.
   * A value of zero returns the root node, one returns the root node with immediate children, and so on.
   * By default this is zero to save space in the response.
   * A negative value, such as -1, returns the full tree.
   * @return the value of the property
   */
  public int getDepth() {
    return _depth;
  }

  /**
   * Sets the depth of nodes to return.
   * A value of zero returns the root node, one returns the root node with immediate children, and so on.
   * By default this is zero to save space in the response.
   * A negative value, such as -1, returns the full tree.
   * @param depth  the new value of the property
   */
  public void setDepth(int depth) {
    this._depth = depth;
  }

  /**
   * Gets the the {@code depth} property.
   * A value of zero returns the root node, one returns the root node with immediate children, and so on.
   * By default this is zero to save space in the response.
   * A negative value, such as -1, returns the full tree.
   * @return the property, not null
   */
  public final Property<Integer> depth() {
    return metaBean().depth().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code PortfolioTreeHistoryRequest}.
   */
  public static class Meta extends AbstractHistoryRequest.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code depth} property.
     */
    private final MetaProperty<Integer> _depth = DirectMetaProperty.ofReadWrite(this, "depth", Integer.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings({"unchecked", "rawtypes" })
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap(super.metaPropertyMap());
      temp.put("depth", _depth);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public PortfolioTreeHistoryRequest createBean() {
      return new PortfolioTreeHistoryRequest();
    }

    @Override
    public Class<? extends PortfolioTreeHistoryRequest> beanType() {
      return PortfolioTreeHistoryRequest.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code depth} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> depth() {
      return _depth;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
