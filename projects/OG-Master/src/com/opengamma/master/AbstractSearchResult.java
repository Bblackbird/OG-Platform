/**
 * Copyright (C) 2009 - Present by OpenGamma Inc.
 *
 * Please see distribution for license.
 */
package com.opengamma.master;

import java.util.Collection;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;

/**
 * Result from searching for documents.
 * <p>
 * The returned documents will match the search criteria.
 * See {@link AbstractSearchRequest} for more details.
 * 
 * @param <D>  the type of the document
 */
@BeanDefinition
public abstract class AbstractSearchResult<D extends AbstractDocument> extends AbstractDocumentsResult<D> {

  /**
   * Creates an instance.
   */
  public AbstractSearchResult() {
  }

  /**
   * Creates an instance from a collection of documents.
   * 
   * @param coll  the collection of documents to add, not null
   */
  public AbstractSearchResult(Collection<D> coll) {
    super(coll);
  }

  //-------------------------------------------------------------------------
  /**
   * Gets the first document, or null if no documents.
   * @return the first document, null if none
   */
  public D getFirstDocument() {
    return getDocuments().size() > 0 ? getDocuments().get(0) : null;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code AbstractSearchResult}.
   * @param <R>  the bean's generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R extends AbstractDocument> AbstractSearchResult.Meta<R> meta() {
    return AbstractSearchResult.Meta.INSTANCE;
  }

  @SuppressWarnings("unchecked")
  @Override
  public AbstractSearchResult.Meta<D> metaBean() {
    return AbstractSearchResult.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code AbstractSearchResult}.
   */
  public static class Meta<D extends AbstractDocument> extends AbstractDocumentsResult.Meta<D> {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings({"unchecked", "rawtypes" })
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap(super.metaPropertyMap());
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public AbstractSearchResult<D> createBean() {
      throw new UnsupportedOperationException("AbstractSearchResult is an abstract class");
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends AbstractSearchResult<D>> beanType() {
      return (Class) AbstractSearchResult.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
