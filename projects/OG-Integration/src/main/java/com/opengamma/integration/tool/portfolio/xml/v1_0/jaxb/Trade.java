/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.integration.tool.portfolio.xml.v1_0.jaxb;

import java.math.BigDecimal;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSeeAlso;

import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.threeten.bp.LocalDate;

import com.opengamma.util.money.Currency;
import java.util.Map;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@XmlRootElement
// Ensure we look at subclasses when unmarshalling
@XmlSeeAlso({ AbstractFxOptionTrade.class, SwapTrade.class, EquityVarianceSwapTrade.class,
                FxForwardTrade.class, SwaptionTrade.class, OtcEquityIndexOptionTrade.class })
@XmlAccessorType(XmlAccessType.FIELD)
@BeanDefinition
public abstract class Trade extends DirectBean {

  @XmlAttribute
  @XmlID
  @PropertyDefinition
  private String _id;

  @XmlElement(name = "externalSystemId", required = true)
  @PropertyDefinition
  private IdWrapper _externalSystemId;

  @XmlElement(name = "tradeDate")
  @PropertyDefinition
  private LocalDate _tradeDate;

  @XmlElement(name = "maturityDate")
  @PropertyDefinition
  private LocalDate _maturityDate;

  @XmlElement(name = "counterparty")
  @PropertyDefinition
  private IdWrapper _counterparty;

  @XmlElement(name = "premium")
  @PropertyDefinition
  private BigDecimal _premium;

  @XmlElement(name = "premiumCurrency")
  @PropertyDefinition
  private Currency _premiumCurrency;

  @XmlElement(name = "premiumSettlementDate")
  @PropertyDefinition
  private LocalDate _premiumSettlementDate;

  public BigDecimal getQuantity() {
    return BigDecimal.ONE;
  }

  public abstract boolean canBePositionAggregated();

  /*


      <!--optional-->
      <isCleared>false</isCleared>
      <!--optional-->
      <clearingBroker>dependency on isCleared? / Id format??</clearingBroker>
      <!--optional-->
      <clearingHouse>dependency on isCleared? / Id format??</clearingHouse>
      <!--optional-->
      <executingBroker>Id format??</executingBroker>
      <!--optional-->
      <primeBroker>Id format??</primeBroker>
      <!--optional-->
      <collateralAgreement>Only if not cleared</collateralAgreement>

      <!-- Additional trade attributes - generally data that won't affect analytics -->
      <tradeAttributes>
        <entry key="STRING">STRING</entry>
      </tradeAttributes>
   */

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code Trade}.
   * @return the meta-bean, not null
   */
  public static Trade.Meta meta() {
    return Trade.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(Trade.Meta.INSTANCE);
  }

  @Override
  public Trade.Meta metaBean() {
    return Trade.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 3355:  // id
        return getId();
      case -1924302699:  // externalSystemId
        return getExternalSystemId();
      case 752419634:  // tradeDate
        return getTradeDate();
      case -414641441:  // maturityDate
        return getMaturityDate();
      case -1651301782:  // counterparty
        return getCounterparty();
      case -318452137:  // premium
        return getPremium();
      case 1136581512:  // premiumCurrency
        return getPremiumCurrency();
      case -1581750610:  // premiumSettlementDate
        return getPremiumSettlementDate();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 3355:  // id
        setId((String) newValue);
        return;
      case -1924302699:  // externalSystemId
        setExternalSystemId((IdWrapper) newValue);
        return;
      case 752419634:  // tradeDate
        setTradeDate((LocalDate) newValue);
        return;
      case -414641441:  // maturityDate
        setMaturityDate((LocalDate) newValue);
        return;
      case -1651301782:  // counterparty
        setCounterparty((IdWrapper) newValue);
        return;
      case -318452137:  // premium
        setPremium((BigDecimal) newValue);
        return;
      case 1136581512:  // premiumCurrency
        setPremiumCurrency((Currency) newValue);
        return;
      case -1581750610:  // premiumSettlementDate
        setPremiumSettlementDate((LocalDate) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      Trade other = (Trade) obj;
      return JodaBeanUtils.equal(getId(), other.getId()) &&
          JodaBeanUtils.equal(getExternalSystemId(), other.getExternalSystemId()) &&
          JodaBeanUtils.equal(getTradeDate(), other.getTradeDate()) &&
          JodaBeanUtils.equal(getMaturityDate(), other.getMaturityDate()) &&
          JodaBeanUtils.equal(getCounterparty(), other.getCounterparty()) &&
          JodaBeanUtils.equal(getPremium(), other.getPremium()) &&
          JodaBeanUtils.equal(getPremiumCurrency(), other.getPremiumCurrency()) &&
          JodaBeanUtils.equal(getPremiumSettlementDate(), other.getPremiumSettlementDate());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getExternalSystemId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getTradeDate());
    hash += hash * 31 + JodaBeanUtils.hashCode(getMaturityDate());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCounterparty());
    hash += hash * 31 + JodaBeanUtils.hashCode(getPremium());
    hash += hash * 31 + JodaBeanUtils.hashCode(getPremiumCurrency());
    hash += hash * 31 + JodaBeanUtils.hashCode(getPremiumSettlementDate());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the id.
   * @return the value of the property
   */
  public String getId() {
    return _id;
  }

  /**
   * Sets the id.
   * @param id  the new value of the property
   */
  public void setId(String id) {
    this._id = id;
  }

  /**
   * Gets the the {@code id} property.
   * @return the property, not null
   */
  public final Property<String> id() {
    return metaBean().id().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the externalSystemId.
   * @return the value of the property
   */
  public IdWrapper getExternalSystemId() {
    return _externalSystemId;
  }

  /**
   * Sets the externalSystemId.
   * @param externalSystemId  the new value of the property
   */
  public void setExternalSystemId(IdWrapper externalSystemId) {
    this._externalSystemId = externalSystemId;
  }

  /**
   * Gets the the {@code externalSystemId} property.
   * @return the property, not null
   */
  public final Property<IdWrapper> externalSystemId() {
    return metaBean().externalSystemId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the tradeDate.
   * @return the value of the property
   */
  public LocalDate getTradeDate() {
    return _tradeDate;
  }

  /**
   * Sets the tradeDate.
   * @param tradeDate  the new value of the property
   */
  public void setTradeDate(LocalDate tradeDate) {
    this._tradeDate = tradeDate;
  }

  /**
   * Gets the the {@code tradeDate} property.
   * @return the property, not null
   */
  public final Property<LocalDate> tradeDate() {
    return metaBean().tradeDate().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the maturityDate.
   * @return the value of the property
   */
  public LocalDate getMaturityDate() {
    return _maturityDate;
  }

  /**
   * Sets the maturityDate.
   * @param maturityDate  the new value of the property
   */
  public void setMaturityDate(LocalDate maturityDate) {
    this._maturityDate = maturityDate;
  }

  /**
   * Gets the the {@code maturityDate} property.
   * @return the property, not null
   */
  public final Property<LocalDate> maturityDate() {
    return metaBean().maturityDate().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the counterparty.
   * @return the value of the property
   */
  public IdWrapper getCounterparty() {
    return _counterparty;
  }

  /**
   * Sets the counterparty.
   * @param counterparty  the new value of the property
   */
  public void setCounterparty(IdWrapper counterparty) {
    this._counterparty = counterparty;
  }

  /**
   * Gets the the {@code counterparty} property.
   * @return the property, not null
   */
  public final Property<IdWrapper> counterparty() {
    return metaBean().counterparty().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the premium.
   * @return the value of the property
   */
  public BigDecimal getPremium() {
    return _premium;
  }

  /**
   * Sets the premium.
   * @param premium  the new value of the property
   */
  public void setPremium(BigDecimal premium) {
    this._premium = premium;
  }

  /**
   * Gets the the {@code premium} property.
   * @return the property, not null
   */
  public final Property<BigDecimal> premium() {
    return metaBean().premium().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the premiumCurrency.
   * @return the value of the property
   */
  public Currency getPremiumCurrency() {
    return _premiumCurrency;
  }

  /**
   * Sets the premiumCurrency.
   * @param premiumCurrency  the new value of the property
   */
  public void setPremiumCurrency(Currency premiumCurrency) {
    this._premiumCurrency = premiumCurrency;
  }

  /**
   * Gets the the {@code premiumCurrency} property.
   * @return the property, not null
   */
  public final Property<Currency> premiumCurrency() {
    return metaBean().premiumCurrency().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the premiumSettlementDate.
   * @return the value of the property
   */
  public LocalDate getPremiumSettlementDate() {
    return _premiumSettlementDate;
  }

  /**
   * Sets the premiumSettlementDate.
   * @param premiumSettlementDate  the new value of the property
   */
  public void setPremiumSettlementDate(LocalDate premiumSettlementDate) {
    this._premiumSettlementDate = premiumSettlementDate;
  }

  /**
   * Gets the the {@code premiumSettlementDate} property.
   * @return the property, not null
   */
  public final Property<LocalDate> premiumSettlementDate() {
    return metaBean().premiumSettlementDate().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code Trade}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code id} property.
     */
    private final MetaProperty<String> _id = DirectMetaProperty.ofReadWrite(
        this, "id", Trade.class, String.class);
    /**
     * The meta-property for the {@code externalSystemId} property.
     */
    private final MetaProperty<IdWrapper> _externalSystemId = DirectMetaProperty.ofReadWrite(
        this, "externalSystemId", Trade.class, IdWrapper.class);
    /**
     * The meta-property for the {@code tradeDate} property.
     */
    private final MetaProperty<LocalDate> _tradeDate = DirectMetaProperty.ofReadWrite(
        this, "tradeDate", Trade.class, LocalDate.class);
    /**
     * The meta-property for the {@code maturityDate} property.
     */
    private final MetaProperty<LocalDate> _maturityDate = DirectMetaProperty.ofReadWrite(
        this, "maturityDate", Trade.class, LocalDate.class);
    /**
     * The meta-property for the {@code counterparty} property.
     */
    private final MetaProperty<IdWrapper> _counterparty = DirectMetaProperty.ofReadWrite(
        this, "counterparty", Trade.class, IdWrapper.class);
    /**
     * The meta-property for the {@code premium} property.
     */
    private final MetaProperty<BigDecimal> _premium = DirectMetaProperty.ofReadWrite(
        this, "premium", Trade.class, BigDecimal.class);
    /**
     * The meta-property for the {@code premiumCurrency} property.
     */
    private final MetaProperty<Currency> _premiumCurrency = DirectMetaProperty.ofReadWrite(
        this, "premiumCurrency", Trade.class, Currency.class);
    /**
     * The meta-property for the {@code premiumSettlementDate} property.
     */
    private final MetaProperty<LocalDate> _premiumSettlementDate = DirectMetaProperty.ofReadWrite(
        this, "premiumSettlementDate", Trade.class, LocalDate.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "id",
        "externalSystemId",
        "tradeDate",
        "maturityDate",
        "counterparty",
        "premium",
        "premiumCurrency",
        "premiumSettlementDate");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return _id;
        case -1924302699:  // externalSystemId
          return _externalSystemId;
        case 752419634:  // tradeDate
          return _tradeDate;
        case -414641441:  // maturityDate
          return _maturityDate;
        case -1651301782:  // counterparty
          return _counterparty;
        case -318452137:  // premium
          return _premium;
        case 1136581512:  // premiumCurrency
          return _premiumCurrency;
        case -1581750610:  // premiumSettlementDate
          return _premiumSettlementDate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends Trade> builder() {
      throw new UnsupportedOperationException("Trade is an abstract class");
    }

    @Override
    public Class<? extends Trade> beanType() {
      return Trade.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code id} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> id() {
      return _id;
    }

    /**
     * The meta-property for the {@code externalSystemId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<IdWrapper> externalSystemId() {
      return _externalSystemId;
    }

    /**
     * The meta-property for the {@code tradeDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> tradeDate() {
      return _tradeDate;
    }

    /**
     * The meta-property for the {@code maturityDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> maturityDate() {
      return _maturityDate;
    }

    /**
     * The meta-property for the {@code counterparty} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<IdWrapper> counterparty() {
      return _counterparty;
    }

    /**
     * The meta-property for the {@code premium} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<BigDecimal> premium() {
      return _premium;
    }

    /**
     * The meta-property for the {@code premiumCurrency} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Currency> premiumCurrency() {
      return _premiumCurrency;
    }

    /**
     * The meta-property for the {@code premiumSettlementDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> premiumSettlementDate() {
      return _premiumSettlementDate;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
