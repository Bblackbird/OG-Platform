/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.integration.marketdata.manipulator.dsl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.collect.ImmutableList;
import com.opengamma.analytics.ShiftType;
import com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;
import com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils;
import com.opengamma.analytics.math.curve.FunctionalDoublesCurve;
import com.opengamma.util.ArgumentChecker;

/**
 * A manipulator which applies a list of point shifts to a {@link YieldCurve}.
 * <p>
 * The shifts are applied using {@link YieldCurveUtils#withPointShifts(YieldCurve, List, List, ShiftType)}
 */
@BeanDefinition(hierarchy = "immutable")
public final class YieldCurvePointShiftManipulator extends YieldCurveManipulator {

  private static final Logger s_logger = LoggerFactory.getLogger(YieldCurvePointShiftManipulator.class);

  /**
   * Shift type
   */
  @PropertyDefinition(validate = "notNull")
  private final ScenarioShiftType _shiftType;

  /**
   * The list of point shifts to apply
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableList<YieldCurvePointShift> _pointShifts;

  /* package */ YieldCurvePointShiftManipulator(ScenarioShiftType shiftType,
                                                List<YieldCurvePointShift> pointShifts,
                                                YieldCurveSelector selector) {
    super(selector);
    _shiftType = ArgumentChecker.notNull(shiftType, "shiftType");
    _pointShifts = ImmutableList.copyOf(ArgumentChecker.notNull(pointShifts, "pointShifts"));
  }

  /**
   * Returns a new curve derived from the input curve with a shift applied.
   *
   * @param curve  a curve
   * @return  a shifted curve derived from the input curve
   */
  @Override
  protected YieldCurve shiftCurve(YieldCurve curve) {
    if (curve.getCurve() instanceof FunctionalDoublesCurve) {
      s_logger.warn("Unable to shift FunctionalDoublesCurve");
      return curve;
    }
    List<Double> points = new ArrayList<>();
    List<Double> shifts = new ArrayList<>();
    ShiftType shiftType = _shiftType.toAnalyticsType();

    Double[] xData = curve.getCurve().getXData();

    for (YieldCurvePointShift shift : _pointShifts) {
      int index = shift.getPointIndex();

      if (index < xData.length) {
        points.add(xData[index]);

        if (shiftType == ShiftType.RELATIVE) {
          // add shifts to 1. i.e. 10.pc actually means 'value * 1.1' and -10.pc means 'value * 0.9'
          shifts.add(shift.getShift() + 1);
        } else {
          shifts.add(shift.getShift());
        }
      }
    }
    s_logger.info("Applying {} {} point shifts of {} to curve '{}' with {} points",
                  shifts.size(), _shiftType.name(), shifts, curve.getName(), xData.length);
    return YieldCurveUtils.withPointShifts(curve, points, shifts, shiftType);
  }
  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code YieldCurvePointShiftManipulator}.
   * @return the meta-bean, not null
   */
  public static YieldCurvePointShiftManipulator.Meta meta() {
    return YieldCurvePointShiftManipulator.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(YieldCurvePointShiftManipulator.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static YieldCurvePointShiftManipulator.Builder builder() {
    return new YieldCurvePointShiftManipulator.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  private YieldCurvePointShiftManipulator(YieldCurvePointShiftManipulator.Builder builder) {
    super(builder);
    JodaBeanUtils.notNull(builder._shiftType, "shiftType");
    JodaBeanUtils.notNull(builder._pointShifts, "pointShifts");
    this._shiftType = builder._shiftType;
    this._pointShifts = ImmutableList.copyOf(builder._pointShifts);
  }

  @Override
  public YieldCurvePointShiftManipulator.Meta metaBean() {
    return YieldCurvePointShiftManipulator.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets shift type
   * @return the value of the property, not null
   */
  public ScenarioShiftType getShiftType() {
    return _shiftType;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the list of point shifts to apply
   * @return the value of the property, not null
   */
  public ImmutableList<YieldCurvePointShift> getPointShifts() {
    return _pointShifts;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public YieldCurvePointShiftManipulator clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      YieldCurvePointShiftManipulator other = (YieldCurvePointShiftManipulator) obj;
      return JodaBeanUtils.equal(getShiftType(), other.getShiftType()) &&
          JodaBeanUtils.equal(getPointShifts(), other.getPointShifts()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getShiftType());
    hash += hash * 31 + JodaBeanUtils.hashCode(getPointShifts());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("YieldCurvePointShiftManipulator{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("shiftType").append('=').append(JodaBeanUtils.toString(getShiftType())).append(',').append(' ');
    buf.append("pointShifts").append('=').append(JodaBeanUtils.toString(getPointShifts())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code YieldCurvePointShiftManipulator}.
   */
  public static final class Meta extends YieldCurveManipulator.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code shiftType} property.
     */
    private final MetaProperty<ScenarioShiftType> _shiftType = DirectMetaProperty.ofImmutable(
        this, "shiftType", YieldCurvePointShiftManipulator.class, ScenarioShiftType.class);
    /**
     * The meta-property for the {@code pointShifts} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<YieldCurvePointShift>> _pointShifts = DirectMetaProperty.ofImmutable(
        this, "pointShifts", YieldCurvePointShiftManipulator.class, (Class) ImmutableList.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "shiftType",
        "pointShifts");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 893345500:  // shiftType
          return _shiftType;
        case 244906465:  // pointShifts
          return _pointShifts;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public YieldCurvePointShiftManipulator.Builder builder() {
      return new YieldCurvePointShiftManipulator.Builder();
    }

    @Override
    public Class<? extends YieldCurvePointShiftManipulator> beanType() {
      return YieldCurvePointShiftManipulator.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code shiftType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ScenarioShiftType> shiftType() {
      return _shiftType;
    }

    /**
     * The meta-property for the {@code pointShifts} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<YieldCurvePointShift>> pointShifts() {
      return _pointShifts;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 893345500:  // shiftType
          return ((YieldCurvePointShiftManipulator) bean).getShiftType();
        case 244906465:  // pointShifts
          return ((YieldCurvePointShiftManipulator) bean).getPointShifts();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code YieldCurvePointShiftManipulator}.
   */
  public static final class Builder extends YieldCurveManipulator.Builder {

    private ScenarioShiftType _shiftType;
    private List<YieldCurvePointShift> _pointShifts = new ArrayList<YieldCurvePointShift>();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(YieldCurvePointShiftManipulator beanToCopy) {
      this._shiftType = beanToCopy.getShiftType();
      this._pointShifts = new ArrayList<YieldCurvePointShift>(beanToCopy.getPointShifts());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 893345500:  // shiftType
          return _shiftType;
        case 244906465:  // pointShifts
          return _pointShifts;
        default:
          return super.get(propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 893345500:  // shiftType
          this._shiftType = (ScenarioShiftType) newValue;
          break;
        case 244906465:  // pointShifts
          this._pointShifts = (List<YieldCurvePointShift>) newValue;
          break;
        default:
          super.set(propertyName, newValue);
          break;
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public YieldCurvePointShiftManipulator build() {
      return new YieldCurvePointShiftManipulator(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code shiftType} property in the builder.
     * @param shiftType  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder shiftType(ScenarioShiftType shiftType) {
      JodaBeanUtils.notNull(shiftType, "shiftType");
      this._shiftType = shiftType;
      return this;
    }

    /**
     * Sets the {@code pointShifts} property in the builder.
     * @param pointShifts  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder pointShifts(List<YieldCurvePointShift> pointShifts) {
      JodaBeanUtils.notNull(pointShifts, "pointShifts");
      this._pointShifts = pointShifts;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("YieldCurvePointShiftManipulator.Builder{");
      buf.append("shiftType").append('=').append(JodaBeanUtils.toString(_shiftType)).append(',').append(' ');
      buf.append("pointShifts").append('=').append(JodaBeanUtils.toString(_pointShifts));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
