/**
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.integration.timeseries.snapshot;

import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.springframework.scheduling.quartz.JobDetailBean;

import com.opengamma.component.ComponentInfo;
import com.opengamma.component.ComponentRepository;
import com.opengamma.component.factory.AbstractComponentFactory;

/**
 * Component factory to setup a Redis Hts snapshotter job detail for quartz scheduler
 */
@BeanDefinition
public class RedisHtsSnapshotJobDetailComponentFactory extends AbstractComponentFactory {
  
  /**
   * The classifier that the factory should publish under.
   */
  @PropertyDefinition(validate = "notNull")
  private String _classifier;
  
  @PropertyDefinition(validate = "notNull")
  private String _name;
  
  @PropertyDefinition(validate = "notNull")
  private String _baseDir;
  
  @PropertyDefinition
  private String _group;
  
  @PropertyDefinition
  private Scheduler _scheduler;

  @Override
  public void init(ComponentRepository repo, LinkedHashMap<String, String> configuration) throws Exception {
    
    ComponentInfo info = new ComponentInfo(JobDetail.class, getClassifier());
    
    JobDetailBean jobDetailBean = new JobDetailBean();
    jobDetailBean.setBeanName(getName());
    jobDetailBean.setJobClass(QuartzRedisHtsSnapshotJob.class);
    if (getGroup() != null) {
      jobDetailBean.setGroup(getGroup());
    }    
    jobDetailBean.getJobDataMap().put("baseDir", getBaseDir());
    jobDetailBean.afterPropertiesSet();
        
    Scheduler scheduler = getScheduler();
    scheduler.addJob(jobDetailBean, true);
    
    repo.registerComponent(info, jobDetailBean);
    
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code RedisHtsSnapshotJobDetailComponentFactory}.
   * @return the meta-bean, not null
   */
  public static RedisHtsSnapshotJobDetailComponentFactory.Meta meta() {
    return RedisHtsSnapshotJobDetailComponentFactory.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(RedisHtsSnapshotJobDetailComponentFactory.Meta.INSTANCE);
  }

  @Override
  public RedisHtsSnapshotJobDetailComponentFactory.Meta metaBean() {
    return RedisHtsSnapshotJobDetailComponentFactory.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -281470431:  // classifier
        return getClassifier();
      case 3373707:  // name
        return getName();
      case -332642308:  // baseDir
        return getBaseDir();
      case 98629247:  // group
        return getGroup();
      case -160710469:  // scheduler
        return getScheduler();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -281470431:  // classifier
        setClassifier((String) newValue);
        return;
      case 3373707:  // name
        setName((String) newValue);
        return;
      case -332642308:  // baseDir
        setBaseDir((String) newValue);
        return;
      case 98629247:  // group
        setGroup((String) newValue);
        return;
      case -160710469:  // scheduler
        setScheduler((Scheduler) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_classifier, "classifier");
    JodaBeanUtils.notNull(_name, "name");
    JodaBeanUtils.notNull(_baseDir, "baseDir");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      RedisHtsSnapshotJobDetailComponentFactory other = (RedisHtsSnapshotJobDetailComponentFactory) obj;
      return JodaBeanUtils.equal(getClassifier(), other.getClassifier()) &&
          JodaBeanUtils.equal(getName(), other.getName()) &&
          JodaBeanUtils.equal(getBaseDir(), other.getBaseDir()) &&
          JodaBeanUtils.equal(getGroup(), other.getGroup()) &&
          JodaBeanUtils.equal(getScheduler(), other.getScheduler()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getClassifier());
    hash += hash * 31 + JodaBeanUtils.hashCode(getName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getBaseDir());
    hash += hash * 31 + JodaBeanUtils.hashCode(getGroup());
    hash += hash * 31 + JodaBeanUtils.hashCode(getScheduler());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the classifier that the factory should publish under.
   * @return the value of the property, not null
   */
  public String getClassifier() {
    return _classifier;
  }

  /**
   * Sets the classifier that the factory should publish under.
   * @param classifier  the new value of the property, not null
   */
  public void setClassifier(String classifier) {
    JodaBeanUtils.notNull(classifier, "classifier");
    this._classifier = classifier;
  }

  /**
   * Gets the the {@code classifier} property.
   * @return the property, not null
   */
  public final Property<String> classifier() {
    return metaBean().classifier().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name.
   * @return the value of the property, not null
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets the name.
   * @param name  the new value of the property, not null
   */
  public void setName(String name) {
    JodaBeanUtils.notNull(name, "name");
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the baseDir.
   * @return the value of the property, not null
   */
  public String getBaseDir() {
    return _baseDir;
  }

  /**
   * Sets the baseDir.
   * @param baseDir  the new value of the property, not null
   */
  public void setBaseDir(String baseDir) {
    JodaBeanUtils.notNull(baseDir, "baseDir");
    this._baseDir = baseDir;
  }

  /**
   * Gets the the {@code baseDir} property.
   * @return the property, not null
   */
  public final Property<String> baseDir() {
    return metaBean().baseDir().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the group.
   * @return the value of the property
   */
  public String getGroup() {
    return _group;
  }

  /**
   * Sets the group.
   * @param group  the new value of the property
   */
  public void setGroup(String group) {
    this._group = group;
  }

  /**
   * Gets the the {@code group} property.
   * @return the property, not null
   */
  public final Property<String> group() {
    return metaBean().group().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the scheduler.
   * @return the value of the property
   */
  public Scheduler getScheduler() {
    return _scheduler;
  }

  /**
   * Sets the scheduler.
   * @param scheduler  the new value of the property
   */
  public void setScheduler(Scheduler scheduler) {
    this._scheduler = scheduler;
  }

  /**
   * Gets the the {@code scheduler} property.
   * @return the property, not null
   */
  public final Property<Scheduler> scheduler() {
    return metaBean().scheduler().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code RedisHtsSnapshotJobDetailComponentFactory}.
   */
  public static class Meta extends AbstractComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code classifier} property.
     */
    private final MetaProperty<String> _classifier = DirectMetaProperty.ofReadWrite(
        this, "classifier", RedisHtsSnapshotJobDetailComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(
        this, "name", RedisHtsSnapshotJobDetailComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code baseDir} property.
     */
    private final MetaProperty<String> _baseDir = DirectMetaProperty.ofReadWrite(
        this, "baseDir", RedisHtsSnapshotJobDetailComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code group} property.
     */
    private final MetaProperty<String> _group = DirectMetaProperty.ofReadWrite(
        this, "group", RedisHtsSnapshotJobDetailComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code scheduler} property.
     */
    private final MetaProperty<Scheduler> _scheduler = DirectMetaProperty.ofReadWrite(
        this, "scheduler", RedisHtsSnapshotJobDetailComponentFactory.class, Scheduler.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "classifier",
        "name",
        "baseDir",
        "group",
        "scheduler");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          return _classifier;
        case 3373707:  // name
          return _name;
        case -332642308:  // baseDir
          return _baseDir;
        case 98629247:  // group
          return _group;
        case -160710469:  // scheduler
          return _scheduler;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends RedisHtsSnapshotJobDetailComponentFactory> builder() {
      return new DirectBeanBuilder<RedisHtsSnapshotJobDetailComponentFactory>(new RedisHtsSnapshotJobDetailComponentFactory());
    }

    @Override
    public Class<? extends RedisHtsSnapshotJobDetailComponentFactory> beanType() {
      return RedisHtsSnapshotJobDetailComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code classifier} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> classifier() {
      return _classifier;
    }

    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code baseDir} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> baseDir() {
      return _baseDir;
    }

    /**
     * The meta-property for the {@code group} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> group() {
      return _group;
    }

    /**
     * The meta-property for the {@code scheduler} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Scheduler> scheduler() {
      return _scheduler;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
