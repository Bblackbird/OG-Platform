/**
 * Copyright (C) 2011 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.engine.view;

import com.opengamma.engine.depgraph.DependencyGraph;
import com.opengamma.id.UniqueId;
import com.opengamma.id.VersionCorrection;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import javax.time.Instant;
import java.util.Map;

/**
 * Class encapsulationg information available on cycle initialisation
 */
@BeanDefinition
public class CycleInfo extends DirectBean {

  @PropertyDefinition
  UniqueId _marketDataSnapshotUniqueId;

  @PropertyDefinition
  Map<String, DependencyGraph> _dependencyGraphsByConfigName;

  @PropertyDefinition
  ViewDefinition _viewDefinition;

  @PropertyDefinition
  VersionCorrection _versionCorrection;

  @PropertyDefinition
  Instant _valuationTime;

  public CycleInfo() {
  }

  public CycleInfo(UniqueId marketDataSnapshotUniqueId, Map<String, DependencyGraph> dependencyGraphsByConfigName, ViewDefinition viewDefinition, VersionCorrection versionCorrection, Instant valuationTime) {
    _marketDataSnapshotUniqueId = marketDataSnapshotUniqueId;
    _dependencyGraphsByConfigName = dependencyGraphsByConfigName;
    _viewDefinition = viewDefinition;
    _versionCorrection = versionCorrection;
    _valuationTime = valuationTime;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CycleInfo}.
   * @return the meta-bean, not null
   */
  public static CycleInfo.Meta meta() {
    return CycleInfo.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(CycleInfo.Meta.INSTANCE);
  }

  @Override
  public CycleInfo.Meta metaBean() {
    return CycleInfo.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -1507586858:  // marketDataSnapshotUniqueId
        return getMarketDataSnapshotUniqueId();
      case 1375906004:  // dependencyGraphsByConfigName
        return getDependencyGraphsByConfigName();
      case 1773732312:  // viewDefinition
        return getViewDefinition();
      case -2031293866:  // versionCorrection
        return getVersionCorrection();
      case 113591406:  // valuationTime
        return getValuationTime();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @SuppressWarnings("unchecked")
  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -1507586858:  // marketDataSnapshotUniqueId
        setMarketDataSnapshotUniqueId((UniqueId) newValue);
        return;
      case 1375906004:  // dependencyGraphsByConfigName
        setDependencyGraphsByConfigName((Map<String, DependencyGraph>) newValue);
        return;
      case 1773732312:  // viewDefinition
        setViewDefinition((ViewDefinition) newValue);
        return;
      case -2031293866:  // versionCorrection
        setVersionCorrection((VersionCorrection) newValue);
        return;
      case 113591406:  // valuationTime
        setValuationTime((Instant) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CycleInfo other = (CycleInfo) obj;
      return JodaBeanUtils.equal(getMarketDataSnapshotUniqueId(), other.getMarketDataSnapshotUniqueId()) &&
          JodaBeanUtils.equal(getDependencyGraphsByConfigName(), other.getDependencyGraphsByConfigName()) &&
          JodaBeanUtils.equal(getViewDefinition(), other.getViewDefinition()) &&
          JodaBeanUtils.equal(getVersionCorrection(), other.getVersionCorrection()) &&
          JodaBeanUtils.equal(getValuationTime(), other.getValuationTime());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getMarketDataSnapshotUniqueId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getDependencyGraphsByConfigName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getViewDefinition());
    hash += hash * 31 + JodaBeanUtils.hashCode(getVersionCorrection());
    hash += hash * 31 + JodaBeanUtils.hashCode(getValuationTime());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the marketDataSnapshotUniqueId.
   * @return the value of the property
   */
  public UniqueId getMarketDataSnapshotUniqueId() {
    return _marketDataSnapshotUniqueId;
  }

  /**
   * Sets the marketDataSnapshotUniqueId.
   * @param marketDataSnapshotUniqueId  the new value of the property
   */
  public void setMarketDataSnapshotUniqueId(UniqueId marketDataSnapshotUniqueId) {
    this._marketDataSnapshotUniqueId = marketDataSnapshotUniqueId;
  }

  /**
   * Gets the the {@code marketDataSnapshotUniqueId} property.
   * @return the property, not null
   */
  public final Property<UniqueId> marketDataSnapshotUniqueId() {
    return metaBean().marketDataSnapshotUniqueId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the dependencyGraphsByConfigName.
   * @return the value of the property
   */
  public Map<String, DependencyGraph> getDependencyGraphsByConfigName() {
    return _dependencyGraphsByConfigName;
  }

  /**
   * Sets the dependencyGraphsByConfigName.
   * @param dependencyGraphsByConfigName  the new value of the property
   */
  public void setDependencyGraphsByConfigName(Map<String, DependencyGraph> dependencyGraphsByConfigName) {
    this._dependencyGraphsByConfigName = dependencyGraphsByConfigName;
  }

  /**
   * Gets the the {@code dependencyGraphsByConfigName} property.
   * @return the property, not null
   */
  public final Property<Map<String, DependencyGraph>> dependencyGraphsByConfigName() {
    return metaBean().dependencyGraphsByConfigName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the viewDefinition.
   * @return the value of the property
   */
  public ViewDefinition getViewDefinition() {
    return _viewDefinition;
  }

  /**
   * Sets the viewDefinition.
   * @param viewDefinition  the new value of the property
   */
  public void setViewDefinition(ViewDefinition viewDefinition) {
    this._viewDefinition = viewDefinition;
  }

  /**
   * Gets the the {@code viewDefinition} property.
   * @return the property, not null
   */
  public final Property<ViewDefinition> viewDefinition() {
    return metaBean().viewDefinition().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the versionCorrection.
   * @return the value of the property
   */
  public VersionCorrection getVersionCorrection() {
    return _versionCorrection;
  }

  /**
   * Sets the versionCorrection.
   * @param versionCorrection  the new value of the property
   */
  public void setVersionCorrection(VersionCorrection versionCorrection) {
    this._versionCorrection = versionCorrection;
  }

  /**
   * Gets the the {@code versionCorrection} property.
   * @return the property, not null
   */
  public final Property<VersionCorrection> versionCorrection() {
    return metaBean().versionCorrection().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the valuationTime.
   * @return the value of the property
   */
  public Instant getValuationTime() {
    return _valuationTime;
  }

  /**
   * Sets the valuationTime.
   * @param valuationTime  the new value of the property
   */
  public void setValuationTime(Instant valuationTime) {
    this._valuationTime = valuationTime;
  }

  /**
   * Gets the the {@code valuationTime} property.
   * @return the property, not null
   */
  public final Property<Instant> valuationTime() {
    return metaBean().valuationTime().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CycleInfo}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code marketDataSnapshotUniqueId} property.
     */
    private final MetaProperty<UniqueId> _marketDataSnapshotUniqueId = DirectMetaProperty.ofReadWrite(
        this, "marketDataSnapshotUniqueId", CycleInfo.class, UniqueId.class);
    /**
     * The meta-property for the {@code dependencyGraphsByConfigName} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Map<String, DependencyGraph>> _dependencyGraphsByConfigName = DirectMetaProperty.ofReadWrite(
        this, "dependencyGraphsByConfigName", CycleInfo.class, (Class) Map.class);
    /**
     * The meta-property for the {@code viewDefinition} property.
     */
    private final MetaProperty<ViewDefinition> _viewDefinition = DirectMetaProperty.ofReadWrite(
        this, "viewDefinition", CycleInfo.class, ViewDefinition.class);
    /**
     * The meta-property for the {@code versionCorrection} property.
     */
    private final MetaProperty<VersionCorrection> _versionCorrection = DirectMetaProperty.ofReadWrite(
        this, "versionCorrection", CycleInfo.class, VersionCorrection.class);
    /**
     * The meta-property for the {@code valuationTime} property.
     */
    private final MetaProperty<Instant> _valuationTime = DirectMetaProperty.ofReadWrite(
        this, "valuationTime", CycleInfo.class, Instant.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map = new DirectMetaPropertyMap(
        this, null,
        "marketDataSnapshotUniqueId",
        "dependencyGraphsByConfigName",
        "viewDefinition",
        "versionCorrection",
        "valuationTime");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1507586858:  // marketDataSnapshotUniqueId
          return _marketDataSnapshotUniqueId;
        case 1375906004:  // dependencyGraphsByConfigName
          return _dependencyGraphsByConfigName;
        case 1773732312:  // viewDefinition
          return _viewDefinition;
        case -2031293866:  // versionCorrection
          return _versionCorrection;
        case 113591406:  // valuationTime
          return _valuationTime;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends CycleInfo> builder() {
      return new DirectBeanBuilder<CycleInfo>(new CycleInfo());
    }

    @Override
    public Class<? extends CycleInfo> beanType() {
      return CycleInfo.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code marketDataSnapshotUniqueId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueId> marketDataSnapshotUniqueId() {
      return _marketDataSnapshotUniqueId;
    }

    /**
     * The meta-property for the {@code dependencyGraphsByConfigName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Map<String, DependencyGraph>> dependencyGraphsByConfigName() {
      return _dependencyGraphsByConfigName;
    }

    /**
     * The meta-property for the {@code viewDefinition} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ViewDefinition> viewDefinition() {
      return _viewDefinition;
    }

    /**
     * The meta-property for the {@code versionCorrection} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<VersionCorrection> versionCorrection() {
      return _versionCorrection;
    }

    /**
     * The meta-property for the {@code valuationTime} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> valuationTime() {
      return _valuationTime;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
