/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.engine.view.calc;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicMetaBean;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.engine.value.ValueSpecification;
import com.opengamma.util.PublicSPI;

/**
 * Represents a computation cache query
 */
@PublicSPI
@BeanDefinition
public class ComputationCacheQuery extends DirectBean {

  /**
   * The calculation configuration for which the computation caches will be queried
   */
  @PropertyDefinition
  private String _calculationConfigurationName;
  
  /**
   * The value specifications defining the desired cache values.
   */
  @PropertyDefinition
  private List<ValueSpecification> _valueSpecifications;
  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ComputationCacheQuery}.
   * @return the meta-bean, not null
   */
  public static ComputationCacheQuery.Meta meta() {
    return ComputationCacheQuery.Meta.INSTANCE;
  }

  @Override
  public ComputationCacheQuery.Meta metaBean() {
    return ComputationCacheQuery.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case -2008701736:  // calculationConfigurationName
        return getCalculationConfigurationName();
      case 240739233:  // valueSpecifications
        return getValueSpecifications();
    }
    return super.propertyGet(propertyName);
  }

  @SuppressWarnings("unchecked")
  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case -2008701736:  // calculationConfigurationName
        setCalculationConfigurationName((String) newValue);
        return;
      case 240739233:  // valueSpecifications
        setValueSpecifications((List<ValueSpecification>) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the calculation configuration for which the computation caches will be queried
   * @return the value of the property
   */
  public String getCalculationConfigurationName() {
    return _calculationConfigurationName;
  }

  /**
   * Sets the calculation configuration for which the computation caches will be queried
   * @param calculationConfigurationName  the new value of the property
   */
  public void setCalculationConfigurationName(String calculationConfigurationName) {
    this._calculationConfigurationName = calculationConfigurationName;
  }

  /**
   * Gets the the {@code calculationConfigurationName} property.
   * @return the property, not null
   */
  public final Property<String> calculationConfigurationName() {
    return metaBean().calculationConfigurationName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the value specifications defining the desired cache values.
   * @return the value of the property
   */
  public List<ValueSpecification> getValueSpecifications() {
    return _valueSpecifications;
  }

  /**
   * Sets the value specifications defining the desired cache values.
   * @param valueSpecifications  the new value of the property
   */
  public void setValueSpecifications(List<ValueSpecification> valueSpecifications) {
    this._valueSpecifications = valueSpecifications;
  }

  /**
   * Gets the the {@code valueSpecifications} property.
   * @return the property, not null
   */
  public final Property<List<ValueSpecification>> valueSpecifications() {
    return metaBean().valueSpecifications().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ComputationCacheQuery}.
   */
  public static class Meta extends BasicMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code calculationConfigurationName} property.
     */
    private final MetaProperty<String> _calculationConfigurationName = DirectMetaProperty.ofReadWrite(this, "calculationConfigurationName", String.class);
    /**
     * The meta-property for the {@code valueSpecifications} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<ValueSpecification>> _valueSpecifications = DirectMetaProperty.ofReadWrite(this, "valueSpecifications", (Class) List.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings({"unchecked", "rawtypes" })
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap();
      temp.put("calculationConfigurationName", _calculationConfigurationName);
      temp.put("valueSpecifications", _valueSpecifications);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public ComputationCacheQuery createBean() {
      return new ComputationCacheQuery();
    }

    @Override
    public Class<? extends ComputationCacheQuery> beanType() {
      return ComputationCacheQuery.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code calculationConfigurationName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> calculationConfigurationName() {
      return _calculationConfigurationName;
    }

    /**
     * The meta-property for the {@code valueSpecifications} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<List<ValueSpecification>> valueSpecifications() {
      return _valueSpecifications;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
