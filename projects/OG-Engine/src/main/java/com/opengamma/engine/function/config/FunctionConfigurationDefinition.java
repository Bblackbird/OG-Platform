/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.engine.function.config;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.core.config.Config;
import com.opengamma.util.ArgumentChecker;

/**
 * Container for function configuration definitions. 
 */
@BeanDefinition
@Config
public class FunctionConfigurationDefinition extends DirectBean {
  /**
   * Function bundle name.
   */
  @PropertyDefinition(validate = "notNull")
  private String _name;
  /**
   * List of functions.
   */
  @PropertyDefinition(set = "setClearAddAll")
  private List<FunctionConfiguration> _functions = new LinkedList<FunctionConfiguration>();
  
  /**
   * Creates an instance
   * 
   * @param name the name of the function configuration definition, not null
   * @param functions the list of function configurations, not null. 
   */
  public FunctionConfigurationDefinition(final String name, final List<FunctionConfiguration> functions) {
    ArgumentChecker.notNull(functions, "list of functions");
    setName(name);
    setFunctions(functions);
  }

  /**
   * Constructor for builder.
   */
  FunctionConfigurationDefinition() {
  }
  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FunctionConfigurationDefinition}.
   * @return the meta-bean, not null
   */
  public static FunctionConfigurationDefinition.Meta meta() {
    return FunctionConfigurationDefinition.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(FunctionConfigurationDefinition.Meta.INSTANCE);
  }

  @Override
  public FunctionConfigurationDefinition.Meta metaBean() {
    return FunctionConfigurationDefinition.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 3373707:  // name
        return getName();
      case -140572773:  // functions
        return getFunctions();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @SuppressWarnings("unchecked")
  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 3373707:  // name
        setName((String) newValue);
        return;
      case -140572773:  // functions
        setFunctions((List<FunctionConfiguration>) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_name, "name");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FunctionConfigurationDefinition other = (FunctionConfigurationDefinition) obj;
      return JodaBeanUtils.equal(getName(), other.getName()) &&
          JodaBeanUtils.equal(getFunctions(), other.getFunctions());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getFunctions());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets function bundle name.
   * @return the value of the property, not null
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets function bundle name.
   * @param name  the new value of the property, not null
   */
  public void setName(String name) {
    JodaBeanUtils.notNull(name, "name");
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets list of functions.
   * @return the value of the property
   */
  public List<FunctionConfiguration> getFunctions() {
    return _functions;
  }

  /**
   * Sets list of functions.
   * @param functions  the new value of the property
   */
  public void setFunctions(List<FunctionConfiguration> functions) {
    this._functions.clear();
    this._functions.addAll(functions);
  }

  /**
   * Gets the the {@code functions} property.
   * @return the property, not null
   */
  public final Property<List<FunctionConfiguration>> functions() {
    return metaBean().functions().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FunctionConfigurationDefinition}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(
        this, "name", FunctionConfigurationDefinition.class, String.class);
    /**
     * The meta-property for the {@code functions} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<FunctionConfiguration>> _functions = DirectMetaProperty.ofReadWrite(
        this, "functions", FunctionConfigurationDefinition.class, (Class) List.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "name",
        "functions");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return _name;
        case -140572773:  // functions
          return _functions;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends FunctionConfigurationDefinition> builder() {
      return new DirectBeanBuilder<FunctionConfigurationDefinition>(new FunctionConfigurationDefinition());
    }

    @Override
    public Class<? extends FunctionConfigurationDefinition> beanType() {
      return FunctionConfigurationDefinition.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code functions} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<List<FunctionConfiguration>> functions() {
      return _functions;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
