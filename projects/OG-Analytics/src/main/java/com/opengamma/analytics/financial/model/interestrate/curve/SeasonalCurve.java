/**
 * Copyright (C) 2011 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.analytics.financial.model.interestrate.curve;

import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.analytics.math.curve.FunctionalDoublesCurve;

/**
 * Class describing a monthly seasonal adjustment curve. The curve is piecewise constant on intervals defined by a set of times. 
 * Those times should be calculated using first of month dates and  the act/act day counter (the one used for derivatives file).
 */
public final class SeasonalCurve extends FunctionalDoublesCurve {

  /**
   * Construct a seasonal curve from a reference time and the monthly factors.
   * @param steps the
   * @param monthlyFactors The monthly seasonal factors from one month to the next. The size of the array is 11 (the 12th factor is deduced from the 11 other
   * @param isAdditive 
   * as the cumulative yearly adjustment is 1). The factors represent the multiplicative factor from one month to the next. The reference time represent the initial month
   * for which there is no adjustment.
   */
  public SeasonalCurve(double[] steps, double[] monthlyFactors, boolean isAdditive) {
    super(new SeasonalFunction(steps, monthlyFactors, isAdditive));
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SeasonalCurve}.
   * @return the meta-bean, not null
   */
  public static SeasonalCurve.Meta meta() {
    return SeasonalCurve.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(SeasonalCurve.Meta.INSTANCE);
  }

  @Override
  public SeasonalCurve.Meta metaBean() {
    return SeasonalCurve.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  @Override
  public SeasonalCurve clone() {
    BeanBuilder<? extends SeasonalCurve> builder = metaBean().builder();
    for (MetaProperty<?> mp : metaBean().metaPropertyIterable()) {
      if (mp.style().isBuildable()) {
        Object value = mp.get(this);
        if (value instanceof Bean) {
          value = ((Bean) value).clone();
        }
        builder.set(mp.name(), value);
      }
    }
    return builder.build();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      return true;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(32);
    buf.append("SeasonalCurve{");
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SeasonalCurve}.
   */
  public static final class Meta extends FunctionalDoublesCurve.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null);

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    public BeanBuilder<? extends SeasonalCurve> builder() {
      throw new UnsupportedOperationException();
    }

    @Override
    public Class<? extends SeasonalCurve> beanType() {
      return SeasonalCurve.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
