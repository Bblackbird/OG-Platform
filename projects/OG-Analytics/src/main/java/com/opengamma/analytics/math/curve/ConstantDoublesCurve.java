/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.analytics.math.curve;

import java.util.Arrays;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.Validate;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.analytics.math.interpolation.Interpolator1D;

/**
 * Defines a constant curve (i.e. a curve with <i>y = constant</i>)
 */
public class ConstantDoublesCurve extends DoublesCurve implements Bean {

  /**
   * @param y Level of the curve
   * @return A constant curve with automatically-generated name
   */
  public static ConstantDoublesCurve from(final double y) {
    return new ConstantDoublesCurve(y);
  }

  /**
   * 
   * @param y Level of the curve
   * @param name Name of the curve
   * @return A constant curve
   */
  public static ConstantDoublesCurve from(final double y, final String name) {
    return new ConstantDoublesCurve(y, name);
  }

  @PropertyDefinition(get = "private")
  private final double _y;

  /**
   * 
   * @param y The level of the curve
   */
  public ConstantDoublesCurve(final double y) {
    super();
    _y = y;
  }

  /**
   * 
   * @param y The level of the curve
   * @param name The name of the curve
   */
  public ConstantDoublesCurve(final double y, final String name) {
    super(name);
    _y = y;
  }

  /**
   * @return Not supported
   * @throws UnsupportedOperationException
   */
  @Override
  public Double[] getXData() {
    throw new UnsupportedOperationException("Cannot get x data for constant curve");
  }

  /**
   * @return An array containing one element (the level)
   */
  @Override
  public Double[] getYData() {
    return new Double[] {_y };
  }

  /**
   * @param x The value
   * @return The level
   */
  @Override
  public Double getYValue(final Double x) {
    return _y;
  }

  @Override
  public Double[] getYValueParameterSensitivity(final Double x) {
    return new Double[] {1.0d };
  }

  /**
   * 
   * @param x An array of <i>x</i> values, not null
   * @param interpolator An interpolator, not null
   * @return An interpolated curve with constant value 
   */
  public InterpolatedDoublesCurve toInterpolatedDoublesCurve(final double[] x, final Interpolator1D interpolator) {
    Validate.notNull(x, "x");
    Validate.notNull(interpolator, "interpolator");
    final double[] y = new double[x.length];
    Arrays.fill(y, _y);
    return InterpolatedDoublesCurve.from(x, y, interpolator);
  }

  /**
   * @return The size of the curve is one
   */
  @Override
  public int size() {
    return 1;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = super.hashCode();
    long temp;
    temp = Double.doubleToLongBits(_y);
    result = prime * result + (int) (temp ^ (temp >>> 32));
    return result;
  }

  @Override
  public boolean equals(final Object obj) {
    if (this == obj) {
      return true;
    }
    if (!super.equals(obj)) {
      return false;
    }
    if (getClass() != obj.getClass()) {
      return false;
    }
    final ConstantDoublesCurve other = (ConstantDoublesCurve) obj;
    return Double.doubleToLongBits(_y) == Double.doubleToLongBits(other._y);
  }

  @Override
  public String toString() {
    return "ConstantDoublesCurve[name=" + getName() + ", y=" + _y + "]";
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public double getDyDx(final double x) {
    return 0;
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ConstantDoublesCurve}.
   * @return the meta-bean, not null
   */
  public static ConstantDoublesCurve.Meta meta() {
    return ConstantDoublesCurve.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ConstantDoublesCurve.Meta.INSTANCE);
  }

  @Override
  public ConstantDoublesCurve.Meta metaBean() {
    return ConstantDoublesCurve.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the y.
   * @return the value of the property
   */
  private double getY() {
    return _y;
  }

  /**
   * Gets the the {@code y} property.
   * @return the property, not null
   */
  public final Property<Double> y() {
    return metaBean().y().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public ConstantDoublesCurve clone() {
    BeanBuilder<? extends ConstantDoublesCurve> builder = metaBean().builder();
    for (MetaProperty<?> mp : metaBean().metaPropertyIterable()) {
      if (mp.style().isBuildable()) {
        Object value = mp.get(this);
        if (value instanceof Bean) {
          value = ((Bean) value).clone();
        }
        builder.set(mp.name(), value);
      }
    }
    return builder.build();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ConstantDoublesCurve}.
   */
  public static class Meta extends DoublesCurve.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code y} property.
     */
    private final MetaProperty<Double> _y = DirectMetaProperty.ofReadOnly(
        this, "y", ConstantDoublesCurve.class, Double.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "y");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 121:  // y
          return _y;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ConstantDoublesCurve> builder() {
      throw new UnsupportedOperationException();
    }

    @Override
    public Class<? extends ConstantDoublesCurve> beanType() {
      return ConstantDoublesCurve.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code y} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Double> y() {
      return _y;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 121:  // y
          return ((ConstantDoublesCurve) bean).getY();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 121:  // y
          if (quiet) {
            return;
          }
          throw new UnsupportedOperationException("Property cannot be written: y");
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
