/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.analytics.math.curve;

import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * Parent class for a family of curves that have real <i>x</i> and <i>y</i> values.
 */
public abstract class DoublesCurve extends Curve<Double, Double> {

  /**
   * Constructor
   */
  public DoublesCurve() {
    super();
  }

  /**
   * Constructor with a name.
   * @param name The curve name.
   */
  public DoublesCurve(final String name) {
    super(name);
  }

  /**
   * Computes the sensitivity of the Y value with respect to the curve parameters.
   * @param x The value at which the parameter sensitivity is computed.
   * @return The sensitivity.
   */
  public abstract Double[] getYValueParameterSensitivity(Double x);

  /**
   * Compute the first derivative of the curve, $\frac{dy}{dx}$ 
   * @param x The value at which the derivative is taken 
   * @return The first derivative 
   */
  public abstract double getDyDx(final double x);

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code DoublesCurve}.
   * @return the meta-bean, not null
   */
  public static DoublesCurve.Meta meta() {
    return DoublesCurve.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(DoublesCurve.Meta.INSTANCE);
  }

  @Override
  public DoublesCurve.Meta metaBean() {
    return DoublesCurve.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  @Override
  public DoublesCurve clone() {
    BeanBuilder<? extends DoublesCurve> builder = metaBean().builder();
    for (MetaProperty<?> mp : metaBean().metaPropertyIterable()) {
      if (mp.style().isBuildable()) {
        Object value = mp.get(this);
        if (value instanceof Bean) {
          value = ((Bean) value).clone();
        }
        builder.set(mp.name(), value);
      }
    }
    return builder.build();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == null) {
      return false;
    }
    if (obj == this) {
      return true;
    }
    if (!super.equals(obj)) {
      return false;
    }
    if (getClass() != obj.getClass()) {
      return false;
    }
    return true;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(32);
    buf.append("DoublesCurve{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code DoublesCurve}.
   */
  public static class Meta extends Curve.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap());

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    public BeanBuilder<? extends DoublesCurve> builder() {
      throw new UnsupportedOperationException("DoublesCurve is an abstract class");
    }

    @Override
    public Class<? extends DoublesCurve> beanType() {
      return DoublesCurve.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
