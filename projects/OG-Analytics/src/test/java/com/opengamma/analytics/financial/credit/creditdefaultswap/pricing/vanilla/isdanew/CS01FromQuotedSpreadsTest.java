package com.opengamma.analytics.financial.credit.creditdefaultswap.pricing.vanilla.isdanew;

import static com.opengamma.financial.convention.businessday.BusinessDayDateUtils.addWorkDays;
import static org.testng.AssertJUnit.assertEquals;

import org.testng.annotations.Test;
import org.threeten.bp.LocalDate;

import com.opengamma.analytics.financial.model.BumpType;

public class CS01FromQuotedSpreadsTest extends ISDABaseTest {

  protected static final double NOTIONAL = 1e6;
  private static final LocalDate TRADE_DATE = LocalDate.of(2013, 6, 4); //today
  private static final LocalDate EFFECTIVE_DATE = TRADE_DATE.plusDays(1); // AKA stepin date
  private static final LocalDate CASH_SETTLE_DATE = addWorkDays(TRADE_DATE, 3, DEFAULT_CALENDAR); // AKA valuation date
  private static final LocalDate STARTDATE = LocalDate.of(2013, 2, 2);
  private static final LocalDate[] MATURITIES = new LocalDate[] {LocalDate.of(2013, 6, 20), LocalDate.of(2013, 9, 20), LocalDate.of(2013, 12, 20), LocalDate.of(2014, 3, 20),
    LocalDate.of(2014, 6, 20), LocalDate.of(2014, 9, 20), LocalDate.of(2014, 12, 20), LocalDate.of(2015, 3, 20), LocalDate.of(2015, 6, 20), LocalDate.of(2015, 9, 20), LocalDate.of(2015, 12, 20),
    LocalDate.of(2016, 3, 20), LocalDate.of(2016, 6, 20), LocalDate.of(2016, 9, 20), LocalDate.of(2016, 12, 20), LocalDate.of(2017, 3, 20), LocalDate.of(2017, 6, 20), LocalDate.of(2017, 9, 20),
    LocalDate.of(2017, 12, 20), LocalDate.of(2018, 3, 20), LocalDate.of(2018, 6, 20), LocalDate.of(2018, 9, 20), LocalDate.of(2018, 12, 20), LocalDate.of(2019, 3, 20), LocalDate.of(2019, 6, 20),
    LocalDate.of(2019, 9, 20), LocalDate.of(2019, 12, 20), LocalDate.of(2020, 3, 20), LocalDate.of(2020, 6, 20), LocalDate.of(2020, 9, 20), LocalDate.of(2020, 12, 20), LocalDate.of(2021, 3, 20),
    LocalDate.of(2021, 6, 20), LocalDate.of(2021, 9, 20), LocalDate.of(2021, 12, 20), LocalDate.of(2022, 3, 20), LocalDate.of(2022, 6, 20), LocalDate.of(2022, 9, 20), LocalDate.of(2022, 12, 20),
    LocalDate.of(2023, 3, 20), LocalDate.of(2023, 6, 20) };

  private static final double[] QUOTED_SPREADS = new double[] {8.97, 9.77, 10.7, 11.96, 13.17, 15.59, 17.8, 19.66, 21.35, 23.91, 26.54, 28.56, 30.63, 32.41, 34.08, 35.33, 36.74, 38.9, 40.88, 42.71,
    44.49, 46.92, 49.2, 51.36, 53.5, 55.58, 57.59, 59.49, 61.4, 62.76, 64.11, 65.35, 66.55, 67.58, 68.81, 69.81, 70.79, 71.65, 72.58, 73.58, 74.2 };

  private static final LocalDate[] BUCKET_DATES = new LocalDate[] {LocalDate.of(2013, 12, 20), LocalDate.of(2014, 6, 20), LocalDate.of(2015, 6, 20), LocalDate.of(2016, 6, 20),
    LocalDate.of(2017, 6, 20), LocalDate.of(2018, 6, 20), LocalDate.of(2019, 6, 20), LocalDate.of(2020, 6, 20), LocalDate.of(2021, 6, 20), LocalDate.of(2022, 6, 20), LocalDate.of(2023, 6, 20),
    LocalDate.of(2028, 6, 20), LocalDate.of(2033, 6, 20), LocalDate.of(2043, 6, 20) };

  private static final double[] QUOTED_SPREADS_AT_BUCKET_DATES = new double[] {10.7, 13.17, 21.35, 30.63, 36.74, 44.49, 53.5, 61.4, 66.55, 70.79, 74.2, 74.2, 74.2, 74.2 };

  private static final double COUPON = 100;

  //yield curve
  private static final LocalDate SPOT_DATE = LocalDate.of(2013, 6, 6);
  private static final String[] YIELD_CURVE_POINTS = new String[] {"1M", "2M", "3M", "6M", "1Y", "2Y", "3Y", "4Y", "5Y", "6Y", "7Y", "8Y", "9Y", "10Y", "12Y", "15Y", "20Y", "25Y", "30Y" };
  private static final String[] YIELD_CURVE_INSTRUMENTS = new String[] {"M", "M", "M", "M", "M", "S", "S", "S", "S", "S", "S", "S", "S", "S", "S", "S", "S", "S", "S" };
  private static final double[] YIELD_CURVE_RATES = new double[] {0.00194, 0.002292, 0.002733, 0.004153, 0.006902, 0.004575, 0.006585, 0.00929, 0.012175, 0.0149, 0.01745, 0.019595, 0.02144, 0.023045,
    0.02567, 0.02825, 0.03041, 0.031425, 0.03202 };
  private static final ISDACompliantYieldCurve YIELD_CURVE = makeYieldCurve(TRADE_DATE, SPOT_DATE, YIELD_CURVE_POINTS, YIELD_CURVE_INSTRUMENTS, YIELD_CURVE_RATES);

  // These numbers come from The ISDA excel plugin
  private static final double[] PARELLEL_CS01 = new double[] {4.44388460893843, 30.033640328983, 55.3853989749605, 80.4665679983788, 106.113611507615, 131.76855171026, 157.157114109902,
    182.279368810202, 207.956446565041, 233.488342547238, 258.618042600828, 283.695469500717, 308.916298196751, 334.008749654446, 358.675305840658, 382.994684077393, 407.64905916453,
    431.852151546102, 455.57043360692, 478.808476009465, 502.318585908348, 525.220273167086, 547.569648624322, 569.368808982763, 591.319501611551, 612.909785294567, 633.906026965003,
    654.590133161596, 675.110290122106, 695.67623150317, 715.659552150048, 735.161267994736, 754.81254765758, 774.280598999456, 792.972762570697, 811.353868713068, 829.858325115361, 848.167780637912,
    865.852406503755, 882.910014941368, 900.572909625516 };

  //These come from OG code (i.e. a regression), since this methodology cannot be reproduced with the ISDA Excel plug-in 
  private static final double[][] BUCKETED_CS01 = new double[][] {
    {4.4427035398135475, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {30.027850578103788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {55.38688284704823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {28.004936100649996, 52.464948236592, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-6.708175681602313E-7, 106.11510018607161, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-9.979340270804826E-6, 79.41636911049099, 52.335667545059735, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-1.3171391061161941E-5, 52.975745577020504, 104.15671817015983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-1.0468657191120556E-5, 26.794472668126986, 155.46101027133147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-6.70911243227934E-7, -7.979727989493313E-11, 207.95793999126357, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-5.391430357715166E-6, -1.1431744439960312E-5, 155.48183292223362, 77.98016121331533, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-7.010860642031602E-6, -1.5353510129934023E-5, 103.7098015707165, 154.89567837307163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-5.666401375892249E-6, -1.2097680496259144E-5, 52.07063235135658, 231.59564022127293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-6.709008348870782E-7, -8.673617379884035E-11, 0.0, 308.91779140196365, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-4.133370729020314E-6, -8.385174499192516E-6, -2.4882724353192387E-5, 230.4961297419951, 103.53636431676208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-5.383155726734756E-6, -1.1411763894964011E-5, -3.3834487295214544E-5, 153.2972408699075, 205.42495720614684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-4.5204534560028264E-6, -9.322556615565247E-6, -2.7631376353642878E-5, 77.30752137041775, 305.68521721838215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-6.708834876523184E-7, -8.673617379884035E-11, -3.469446951953614E-11, -3.469446951953614E-12, 407.6505507097476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-1.5151872811980382E-6, -2.044770602838142E-6, -6.057217227795064E-6, -1.2332787568958281E-5, 303.63313202524597, 128.25265519475144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-1.909014613055149E-6, -2.998472997672863E-6, -8.882481555838595E-6, -1.8014985336822775E-5, 201.59079309099712, 254.01775321963817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-1.8755171027340367E-6, -2.917312225125812E-6, -8.642062759856017E-6, -1.7500115939705907E-5, 101.48917535188899, 377.3402759048999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-6.708869570992704E-7, -9.71445146547012E-11, -6.938893903907228E-12, -3.469446951953614E-12, 3.469446951953614E-12, 502.32007071844896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-7.252219658138159E-7, -1.3166551182663966E-7, -3.897646094763729E-7, -7.87973852833801E-7, -1.443331565376127E-6, 373.4998642080968, 151.76057783829188, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-8.611653057322144E-7, -4.6087786365056616E-7, -1.3651059449504288E-6, -2.7597681084845505E-6, -4.6606885018007915E-6, 247.55494081003457, 300.05713298124346, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-1.075330796629359E-6, -9.794907940285924E-7, -2.9013701163815853E-6, -5.8654990586770595E-6, -9.756244423453353E-6, 124.4202833052127, 444.9705302286729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-6.709285904626938E-7, -1.1102230246251565E-10, 0.0, -4.163336342344337E-11, 0.0, -1.3877787807814457E-11, 591.3209741243153, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-1.1914358388764867E-6, -1.260609672204538E-6, -3.7341865710693867E-6, -7.549086356029022E-6, -1.2497017309875957E-5, -1.8668677714828164E-5, 439.6165312641684, 173.36289884505723, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0 },
    {-1.5415793641615494E-6, -2.1086604684583676E-6, -6.246461681236326E-6, -1.2627940360054879E-5, -2.0904770969831787E-5, -3.1030893132832915E-5, 291.6051612433939, 342.39903957816733, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0 },
    {-1.6226395227469936E-6, -2.3049340214242875E-6, -6.828024257110599E-6, -1.38036318486634E-5, -2.285117234324119E-5, -3.384305335973892E-5, 145.59904491919656, 509.04053920056833, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0 },
    {-6.708869570992704E-7, -6.938893903907228E-11, 0.0, -1.3877787807814457E-11, -6.938893903907228E-12, -6.938893903907228E-12, 6.938893903907228E-12, 675.1117481065687, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0 },
    {-9.350853424905381E-7, -6.399394902878441E-7, -1.8955600977754727E-6, -3.832094364053518E-6, -6.343800484920337E-6, -9.377262855103652E-6, -1.2839056207081256E-5, 501.44934212924255,
      194.3801527233696, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-9.887368701555488E-7, -7.69793950805564E-7, -2.280294009171513E-6, -4.609881920636383E-6, -7.631346943259842E-6, -1.1280511247324654E-5, -1.5444936996011904E-5, 332.0142602326742,
      383.8860007366121, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-8.417919139525054E-7, -4.1389808247416227E-7, -1.225901324897194E-6, -2.4782953467195057E-6, -4.102662654048572E-6, -6.0644475552429356E-6, -8.303226162187372E-6, 166.69889004965881,
      568.6464971969909, 0.0, 0.0, 0.0, 0.0, 0.0 },
    {-6.709008348870782E-7, -9.020562075079397E-11, 0.0, 0.0, 2.0816681711721685E-11, 2.7755575615628914E-11, -6.938893903907228E-12, -6.938893903907228E-12, 754.8139929510616, 0.0, 0.0, 0.0, 0.0,
      0.0 },
    {-1.0170406183895864E-6, -8.383432836822635E-7, -2.483270533648607E-6, -5.020171778280513E-6, -8.310623023088937E-6, -1.2284555317432222E-5, -1.681960820620887E-5, -2.1599964872276445E-5,
      560.4556776566266, 213.95988559492343, 0.0, 0.0, 0.0, 0.0 },
    {-1.089253687247549E-6, -1.0132172878485335E-6, -3.0014116192411677E-6, -6.067674140908252E-6, -1.004461097631193E-5, -1.4847699458808705E-5, -2.0328967675897758E-5, -2.610668625724344E-5,
      370.95667169672464, 422.38644891876004, 0.0, 0.0, 0.0, 0.0 },
    {-9.015357904651466E-7, -5.586087148401475E-7, -1.6546000680683903E-6, -3.344928500847999E-6, -5.537299785363103E-6, -8.185077615685543E-6, -1.1206646721717561E-5, -1.4391605962504883E-5,
      186.1888698786243, 625.4319165470492, 0.0, 0.0, 0.0, 0.0 },
    {-6.708938959931743E-7, -9.71445146547012E-11, -2.0816681711721685E-11, -4.163336342344337E-11, 0.0, -2.0816681711721685E-11, -3.469446951953614E-11, 6.938893903907228E-12, -4.85722573273506E-11,
      829.8597575217558, 0.0, 0.0, 0.0, 0.0 },
    {-8.592362932269282E-7, -4.5619757971238073E-7, -1.3513079544225093E-6, -2.731842529968276E-6, -4.522326957356881E-6, -6.684736097994914E-6, -9.152421875935346E-6, -1.1753514828072298E-5,
      -1.4752032928555536E-5, 616.05478730508, 232.37261598402918, 0.0, 0.0, 0.0 },
    {-9.951900414861825E-7, -7.855105454979139E-7, -2.3269303150996734E-6, -4.704125977639251E-6, -7.78740960605262E-6, -1.1511139264008818E-5, -1.5760504012973797E-5, -2.0239740439187415E-5,
      -2.504244034362557E-5, 407.67684427224503, 458.616277112453, 0.0, 0.0, 0.0 },
    {-1.083189093975534E-6, -9.986178550747127E-7, -2.9581892491137296E-6, -5.980257955506829E-6, -9.899941977309368E-6, -1.4633946832098843E-5, -2.0036236558773624E-5, -2.5730848007832208E-5,
      -3.166338025106796E-5, 204.57981091089036, 678.9040381522253, 0.0, 0.0, 0.0 },
    {-6.708661404175587E-7, -4.163336342344337E-11, -2.7755575615628914E-11, -1.3877787807814457E-11, 2.7755575615628914E-11, -2.7755575615628914E-11, 1.3877787807814457E-11, 8.326672684688674E-11,
      0.0, 1.3877787807814457E-11, 900.574329413331, 0.0, 0.0, 0.0 } };

  @Test
  public void parellelCS01Test() {
    final double coupon = COUPON * ONE_BP;
    final double scale = NOTIONAL * ONE_BP;

    final int n = MATURITIES.length;
    for (int i = 0; i < n; i++) {
      final CDSAnalytic cds = new CDSAnalytic(TRADE_DATE, EFFECTIVE_DATE, CASH_SETTLE_DATE, STARTDATE, MATURITIES[i], PAY_ACC_ON_DEFAULT, TENOR, STUB, PROCTECTION_START, RECOVERY_RATE);
      final double cs01 = scale * CS01_CAL.parallelCS01FromQuotedSpread(cds, coupon, YIELD_CURVE, QUOTED_SPREADS[i] * ONE_BP, ONE_BP, BumpType.ADDITIVE);
      assertEquals(MATURITIES[i].toString(), PARELLEL_CS01[i], cs01, 1e-14 * NOTIONAL);
    }
  }

  @Test
  public void bucketedCS01FlatTest() {
    final double scale = NOTIONAL * ONE_BP;

    final int m = BUCKET_DATES.length;
    final CDSAnalytic[] curveCDSs = new CDSAnalytic[m];
    final double[] quotedSpreads = new double[m];
    for (int i = 0; i < m; i++) {
      curveCDSs[i] = new CDSAnalytic(TRADE_DATE, EFFECTIVE_DATE, CASH_SETTLE_DATE, TRADE_DATE, BUCKET_DATES[i], PAY_ACC_ON_DEFAULT, TENOR, STUB, PROCTECTION_START, RECOVERY_RATE);
      quotedSpreads[i] = QUOTED_SPREADS_AT_BUCKET_DATES[i] * ONE_BP;
    }

    final int n = MATURITIES.length;
    for (int i = 0; i < n; i++) {
      final CDSAnalytic cds = new CDSAnalytic(TRADE_DATE, EFFECTIVE_DATE, CASH_SETTLE_DATE, STARTDATE, MATURITIES[i], PAY_ACC_ON_DEFAULT, TENOR, STUB, PROCTECTION_START, RECOVERY_RATE);
      final double[] bucketedCS01 = CS01_CAL.bucketedCS01FromQuotedSpreads(cds, COUPON * ONE_BP, YIELD_CURVE, curveCDSs, quotedSpreads, ONE_BP, BumpType.ADDITIVE);

      for (int j = 0; j < m; j++) {
        bucketedCS01[j] *= scale;
        //this is a regression test, so expect exact match 
        assertEquals(MATURITIES[i].toString() + "\t" + BUCKET_DATES[j], BUCKETED_CS01[i][j], bucketedCS01[j], 0.0);
      }
    }
  }

  @Test(enabled = false)
  public void bucketedCS01Print() {
    System.out.println("CS01FromQuotedSpreadsTest.bucketedCS01Print disabled test before push");

    final double scale = NOTIONAL * ONE_BP;

    final int m = BUCKET_DATES.length;
    final CDSAnalytic[] curveCDSs = new CDSAnalytic[m];
    final double[] quotedSpreads = new double[m];
    for (int i = 0; i < m; i++) {
      curveCDSs[i] = new CDSAnalytic(TRADE_DATE, EFFECTIVE_DATE, CASH_SETTLE_DATE, TRADE_DATE, BUCKET_DATES[i], PAY_ACC_ON_DEFAULT, TENOR, STUB, PROCTECTION_START, RECOVERY_RATE);
      quotedSpreads[i] = QUOTED_SPREADS_AT_BUCKET_DATES[i] * ONE_BP;
    }

    final int n = MATURITIES.length;
    final CDSAnalytic[] tradedCDSs = new CDSAnalytic[n];
    for (int i = 0; i < n; i++) {
      tradedCDSs[i] = new CDSAnalytic(TRADE_DATE, EFFECTIVE_DATE, CASH_SETTLE_DATE, STARTDATE, MATURITIES[i], PAY_ACC_ON_DEFAULT, TENOR, STUB, PROCTECTION_START, RECOVERY_RATE);
    }
    final double[][] res = CS01_CAL.bucketedCS01FromQuotedSpreads(tradedCDSs, COUPON * ONE_BP, YIELD_CURVE, curveCDSs, quotedSpreads, ONE_BP, BumpType.ADDITIVE);

    System.out.print("{");
    for (int i = 0; i < n; i++) {
      System.out.print("{");
      for (int j = 0; j < m - 1; j++) {
        System.out.print(scale * res[i][j] + ", ");
      }
      System.out.print(scale * res[i][m - 1] + "}");
      if (i < n - 1) {
        System.out.print(",\n");
      } else {
        System.out.print("}\n");
      }
    }

  }

}
