/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.analytics.math.interpolation;

import static org.testng.AssertJUnit.assertEquals;

import org.testng.annotations.Test;

import com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;
import com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;
import com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

/**
 * 
 */
public class ProductPiecewisePolynomialInterpolator1DTest {

  /**
   * Regression to the legacy Product Interpolator via yield curve
   */
  @Test
  //      (enabled = false)
  public void regressionYieldCurveTest() {
    double[] time1 = new double[] {0.002739726027397, 0.019178082191781, 0.038356164383562, 0.084931506849315,
        0.172602739726027, 0.252054794520548, 0.336986301369863, 0.413698630136986, 0.501369863013699,
        0.580821917808219, 0.671232876712329, 0.747945205479452, 0.832876712328767, 0.920547945205479, 1,
        1.25205479452055, 1.5013698630137, 1.75068493150685, 2.0027397260274, 3.0027397260274, 4.00821917808219,
        5.00547945205479, 6.00547945205479, 7.00547945205479, 8.00547945205479, 9.00547945205479, 10.0109589041096,
        12.0082191780822, 15.0164383561644, 20.013698630137, 25.0164383561644, 30.0219178082192, 35.0246575342466,
        40.027397260274, 45.0301369863014, 50.0356164383562 };
    double[] rate1 = new double[] {0.00430997455348493, 0.00431882113819674, 0.00431314320653989, 0.00431970749752497,
        0.00444129725993973, 0.00447764229051919, 0.00454934099818509, 0.00480522065276289, 0.00503962777637656,
        0.00520911179002989, 0.00543690213062051, 0.00563610380093184, 0.00583579456204562, 0.00612718766319607,
        0.00636519907010272, 0.00717310918750252, 0.00795749811802235, 0.00870119236161661, 0.00946155387022128,
        0.0123334511255753, 0.0143921749914485, 0.0159592596727554, 0.0172361877785297, 0.0183436791467994,
        0.0192793358953591, 0.0201222559973813, 0.0208986383710833, 0.0222510994961065, 0.023877100242259,
        0.0256026136259111, 0.026288001664418, 0.0266311744778153, 0.0264014166694374, 0.0263527169318637,
        0.0262906111905873, 0.0263674066536486 };
    double[] time2 = new double[] {0.084931506849315, 0.172602739726027, 0.252054794520548, 0.501369863013699,
        0.747945205479452, 1, 2.0027397260274, 3.0027397260274, 4.00821917808219, 5.00547945205479, 6.00547945205479,
        7.00547945205479, 8.00547945205479, 9.00547945205479, 10.0109589041096, 12.0082191780822, 15.0164383561644,
        20.013698630137, 25.0164383561644, 30.0219178082192, 35.0246575342466, 40.027397260274, 45.0301369863014,
        50.0356164383562 };
    double[] rate2 = new double[] {0.00505581436649715, 0.00503291190352002, 0.00514256786002282, 0.00569033898394734,
        0.00639149506676498, 0.00723232237139851, 0.0105298436453575, 0.0135410574559515, 0.0158030551363141,
        0.0174456995488895, 0.0187732338667046, 0.0199055537021988, 0.0208531180033394, 0.0216810024002466,
        0.0224286195281712, 0.0237374945104143, 0.0252160567356682, 0.0267142361493482, 0.0272605000077873,
        0.0275097501922553, 0.0272973928154239, 0.02732399981293, 0.0272679024586238, 0.0273500955580994 };
    double[] time3 = new double[] {0.252054794520548, 0.446575342465753, 0.695890410958904, 0.945205479452055,
        1.19452054794521, 1.44383561643836, 1.69315068493151, 1.96164383561644, 2.21095890410959, 3.0027397260274,
        4.00821917808219, 5.00547945205479, 6.00547945205479, 7.00547945205479, 8.00547945205479, 9.00547945205479,
        10.0109589041096, 12.0082191780822, 15.0164383561644, 20.013698630137, 25.0164383561644, 30.0219178082192,
        35.0246575342466, 40.027397260274, 45.0301369863014, 50.0356164383562 };
    double[] rate3 = new double[] {0.00562351263918076, 0.00605140841711946, 0.00674163439039939, 0.00751172986806733,
        0.00835257242596894, 0.00924368840059903, 0.0101182341187527, 0.0110392349927795, 0.0118815761688227,
        0.0141891783018791, 0.0164362685797301, 0.0180908568757903, 0.0194306164834304, 0.0205622948941999,
        0.021509365473766, 0.0223369044043144, 0.0230980379156519, 0.0243918201709714, 0.0258555923419827,
        0.0273230838882434, 0.0278368027650289, 0.0280342598539863, 0.0278259808180962, 0.0277923406323035,
        0.0277421859831982, 0.0278284728253182 };
    double[] time4 = new double[] {0.501369863013699, 1, 1.5013698630137, 2.0027397260274, 3.0027397260274,
        4.00821917808219, 5.00547945205479, 6.00547945205479, 7.00547945205479, 8.00547945205479, 9.00547945205479,
        10.0109589041096, 12.0082191780822, 15.0164383561644, 20.013698630137, 25.0164383561644, 30.0219178082192,
        35.0246575342466, 40.027397260274, 45.0301369863014, 50.0356164383562 };
    double[] rate4 = new double[] {0.00710174175249047, 0.00860451137005419, 0.0103551375418353, 0.0121086290753976,
        0.015178756626544, 0.0175003704137641, 0.0192427630940745, 0.0206581597595687, 0.0218403443388774,
        0.0228520936339576, 0.0237315739821965, 0.0245039864998691, 0.025779797672448, 0.0271525952264722,
        0.0284196247149596, 0.0287909199539885, 0.0288932996886611, 0.0286980928245931, 0.0285278998759854,
        0.0284929581122082, 0.0284672034337625 };

    CombinedInterpolatorExtrapolator base = CombinedInterpolatorExtrapolatorFactory.getInterpolator(
        Interpolator1DFactory.NATURAL_CUBIC_SPLINE, Interpolator1DFactory.LINEAR_EXTRAPOLATOR);
    Interpolator1D VM_INTERPOLATOR = new ProductInterpolator1D(base, false);
    YieldAndDiscountCurve GBP_SONIA_CURVE;
    YieldAndDiscountCurve GBP_LIBOR1M_CURVE;
    YieldAndDiscountCurve GBP_LIBOR3M_CURVE;
    YieldAndDiscountCurve GBP_LIBOR6M_CURVE;
    GBP_SONIA_CURVE = new YieldCurve("GBP Sonia", new InterpolatedDoublesCurve(time1,
        rate1, VM_INTERPOLATOR, true));
    GBP_LIBOR1M_CURVE = new YieldCurve("GBP Libor 1M", new InterpolatedDoublesCurve(time2,
        rate2, VM_INTERPOLATOR, true));
    GBP_LIBOR3M_CURVE = new YieldCurve("GBP Libor 3M", new InterpolatedDoublesCurve(time3,
        rate3, VM_INTERPOLATOR, true));
    GBP_LIBOR6M_CURVE = new YieldCurve("GBP Libor 6M", new InterpolatedDoublesCurve(time4,
        rate4, VM_INTERPOLATOR, true));

    Interpolator1D interp = new ProductPiecewisePolynomialInterpolator1D(new NaturalSplineInterpolator());
    CombinedInterpolatorExtrapolator combInterp = new CombinedInterpolatorExtrapolator(interp,
        new ReciprocalExtrapolator1D(interp));

    YieldAndDiscountCurve curve1 = new YieldCurve("curve1",
        new InterpolatedDoublesCurve(time1, rate1, combInterp, true));
    YieldAndDiscountCurve curve2 = new YieldCurve("curve2",
        new InterpolatedDoublesCurve(time2, rate2, combInterp, true));
    YieldAndDiscountCurve curve3 = new YieldCurve("curve3",
        new InterpolatedDoublesCurve(time3, rate3, combInterp, true));
    YieldAndDiscountCurve curve4 = new YieldCurve("curve4",
        new InterpolatedDoublesCurve(time4, rate4, combInterp, true));

    double[] expectedLeft1 = new double[] {0.00432241885364084, 0.003961534149119456, 0.004141976501380142,
        0.00420212395213371, 0.004232197677510493, 0.0042502419127365635, 0.0042622714028872745, 0.00427086389585207,
        0.004277308265575667, 0.004282320553138462, 0.004286330383188701, 0.004289611153229805, 0.004292345128264058,
        0.00429465849175458, 0.004296641374746455, 0.0042983598733394145, 0.004299863559608253, 0.004301190341610171,
        0.0043023697033896515, 0.004303424921823924, 0.004304374618414771, 0.0043052338677112495, 0.004306015003435322,
        0.004306728214313824, 0.0043073819909524485, 0.004307983465459984, 0.00430853867269771, 0.004309052753473382,
        0.004309530114193647, 0.00430997455348493 };
    double[] expectedLeft2 = new double[] {0.004930523545038513, 0.008563957367338998, 0.006747240456188747,
        0.006141668152472008, 0.005838882000613631, 0.005657210309498608, 0.005536095848755262, 0.005449585519652867,
        0.005384702772826073, 0.005334238414183011, 0.00529386692726856, 0.005260835710702192, 0.005233309696896886,
        0.005210018454446241, 0.00519005453234569, 0.005172752466525211, 0.005157613158932293, 0.005144254946350305,
        0.005132380979610762, 0.005121756904106959, 0.005112195236153537, 0.005103544203243298, 0.005095679627870353,
        0.005088498928616794, 0.0050819166209677, 0.005075860897930532, 0.005070270999742377, 0.005065095168086679,
        0.0050602890386921015, 0.00505581436649715 };
    double[] expectedLeft3 = new double[] {0.0063629856998657, -0.015081733059997554, -0.004359373680065933,
        -7.852538867553844E-4, 0.00100180600989989, 0.0020740419478930496, 0.002788865906555156, 0.003299454448456664,
        0.0036823958548827954, 0.003980239170992006, 0.004218513823879376, 0.004413465812605405, 0.0045759258032104285,
        0.004713391949106987, 0.004831220074161181, 0.004933337782541483, 0.005022690777374247, 0.005101531655167861,
        0.005171612435428853, 0.005234316291451845, 0.005290749761872537, 0.005341808616062689, 0.0053882257562355524,
        0.005430606623349906, 0.005469455751538065, 0.00550519694947117, 0.005538188824486344, 0.005568736856907801,
        0.005597102887013441, 0.00562351263918076 };
    double[] expectedLeft4 = new double[] {0.009323892257929966, -0.05511847239981542, -0.02289729007094271,
        -0.01215689596131849, -0.006786698906506367, -0.0035645806736191036, -0.0014165018516942615,
        1.1784016396634015E-4, 0.0012685966757117946, 0.002163629518180481, 0.0028796557921554303,
        0.003465495470862203, 0.003953695203117851, 0.004366787284257245, 0.0047208662109481546, 0.0050277346140802735,
        0.00529624446682088, 0.005533164925121415, 0.005743760888055224, 0.005932188854890736, 0.006101774025042697,
        0.006255208226608758, 0.006394693864396085, 0.006522050316288864, 0.006638793730523908, 0.006746197671620151,
        0.006845339771093605, 0.006937138011346804, 0.00702237923443906, 0.00710174175249047 };

    int n = 30;
    double tol = 1.e-5;
    double interval;
    interval = time1[0] / (n - 1);
    assertCurveInterpolation("curve1, left extrapolation", expectedLeft1, curve1, 0.0, interval, n, tol);
    interval = time2[0] / (n - 1);
    assertCurveInterpolation("curve2, left extrapolation", expectedLeft2, curve2, 0.0, interval, n, tol);
    interval = time3[0] / (n - 1);
    assertCurveInterpolation("curve3, left extrapolation", expectedLeft3, curve3, 0.0, interval, n, tol);
    interval = time4[0] / (n - 1);
    assertCurveInterpolation("curve4, left extrapolation", expectedLeft4, curve4, 0.0, interval, n, tol);

    double[] expectedInterp1 = new double[] {0.00430997455348493, 0.008633736145209193, 0.013342661423362075,
        0.01619690305470609, 0.018239472342514093, 0.019813481623031277, 0.021148488603245606, 0.022295129127299116,
        0.0232760410722643, 0.024111570540299283, 0.024806838503060705, 0.025351737313310033, 0.025739317788841698,
        0.02599988135829853, 0.026197286469297604, 0.026378953913944004, 0.026536993204815812, 0.026624638165813695,
        0.026607951231641776, 0.02651814561956947, 0.026422578076638413, 0.02637196808365516, 0.02636017718578407,
        0.0263552990365331, 0.026334395081679077, 0.02630635647174156, 0.026290810081083863, 0.026301055806632525,
        0.026330445866155728, 0.0263674066536486 };
    double[] expectedInterp2 = new double[] {0.00505581436649715, 0.009895784888332884, 0.014819869256340384,
        0.017795352780938436, 0.019873631605821673, 0.021436035701199795, 0.022716195364051613, 0.023815268413068243,
        0.02470916929393918, 0.025445091083672374, 0.026048701645762295, 0.02651364340131122, 0.026834958717271002,
        0.027042423157990946, 0.027194383766823444, 0.02733365912995944, 0.027452704721998362, 0.027510783204702596,
        0.027479153572030988, 0.027390814729589083, 0.02731089329719233, 0.02728723165463167, 0.02730517776811378,
        0.027323455271577174, 0.02731275214507357, 0.027285611618745393, 0.02726820729595548, 0.027278589154227453,
        0.027310138832208883, 0.0273500955580994 };
    double[] expectedInterp3 = new double[] {0.00562351263918076, 0.011063492702706344, 0.015788399300860928,
        0.018650952326454865, 0.0206779530639229, 0.02220176178807306, 0.023477373313433858, 0.02453962212881623,
        0.025408711275890988, 0.026125737329425684, 0.026707539275361934, 0.027150860002250272, 0.027454073660366327,
        0.027647988781915416, 0.027785295519440416, 0.027903896659411603, 0.02799828895796063, 0.028037866458427044,
        0.02800197601659675, 0.02791912646971664, 0.02784027635535035, 0.027802514907529146, 0.02779637762405553,
        0.02779408657189797, 0.027776321495836885, 0.027752790087081092, 0.027741994847386625, 0.027756257243025217,
        0.027788819016457814, 0.0278284728253182 };
    double[] expectedInterp4 = new double[] {0.00710174175249047, 0.012799015779984229, 0.017318198072358112,
        0.020151722545359834, 0.0221888202830137, 0.023761250303376752, 0.025014118326630412, 0.026022702192962308,
        0.026819183698792878, 0.027452383888520546, 0.027945855738154994, 0.028306137851051752, 0.02853915311217904,
        0.028677264144043577, 0.02876527218987293, 0.028834726622994678, 0.02888455275987619, 0.028898012337487098,
        0.02886409176538647, 0.028795751469241702, 0.028715013291823743, 0.028639130076908027, 0.028576714157654476,
        0.028532440721874056, 0.028508701455636148, 0.028498674419406414, 0.028493356885492215, 0.028486199768680682,
        0.02847700252606377, 0.0284672034337625 };

    interval = (time1[time1.length - 1] - time1[0]) / (n - 1);
    assertCurveInterpolation("curve1, interpolation", expectedInterp1, curve1, time1[0], interval, n, tol);
    interval = (time2[time2.length - 1] - time2[0]) / (n - 1);
    assertCurveInterpolation("curve2, interpolation", expectedInterp2, curve2, time2[0], interval, n, tol);
    interval = (time3[time3.length - 1] - time3[0]) / (n - 1);
    assertCurveInterpolation("curve3, interpolation", expectedInterp3, curve3, time3[0], interval, n, tol);
    interval = (time4[time4.length - 1] - time4[0]) / (n - 1);
    assertCurveInterpolation("curve4, interpolation", expectedInterp4, curve4, time4[0], interval, n, tol);

    double[] expectedRight1 = new double[] {0.0263674066536486, 0.026382572814350247, 0.026397319442305188,
        0.026411663707963506, 0.026425621857393427, 0.02643920927366107, 0.026452440533383473, 0.02646532945889201,
        0.02647788916639863, 0.026490132110517765, 0.026502070125461533, 0.026513714463194785, 0.026525075828808434,
        0.02653616441334495, 0.026546989924287463 };
    double[] expectedRight2 = new double[] {0.0273500955580994, 0.027366532781822845, 0.027382515312117106,
        0.027398061758473074, 0.027413189728528138, 0.027427915894590097, 0.027442256054929854, 0.027456225190316607,
        0.027469837516220872, 0.027483106531067714, 0.02749604506088451, 0.02750866530065369, 0.027520978852650743,
        0.027532996762020718, 0.02754472954982267 };
    double[] expectedRight3 = new double[] {0.0278284728253182, 0.027844762177093575, 0.027860600925936094,
        0.02787600751392262, 0.027890999390289366, 0.02790559307735732, 0.027919804231273562, 0.02793364769803786,
        0.027947137565236018, 0.02796028720985907, 0.027973109342549363, 0.027985616048581272, 0.02799781882585432,
        0.02800972862014963, 0.028021355857877083 };
    double[] expectedRight4 = new double[] {0.0284672034337625, 0.028463230722600225, 0.028459367906253023,
        0.028455610486994683, 0.028451954209236862, 0.028448395043450942, 0.028444929171354227, 0.028441552972245907,
        0.02843826301039016, 0.028435056023353823, 0.02843192891121545, 0.028428878726570815, 0.028425902665266973,
        0.028422998057803774, 0.02842016236134738 };

    n = 15;

    interval = (60.0 - time1[time1.length - 1]) / (n - 1);
    assertCurveInterpolation("curve1, right extrapolation", expectedRight1, curve1, time1[time1.length - 1], interval,
        n, tol);
    interval = (60.0 - time2[time2.length - 1]) / (n - 1);
    assertCurveInterpolation("curve2, right extrapolation", expectedRight2, curve2, time2[time2.length - 1], interval,
        n, tol);
    interval = (60.0 - time3[time3.length - 1]) / (n - 1);
    assertCurveInterpolation("curve3, right extrapolation", expectedRight3, curve3, time3[time3.length - 1], interval,
        n, tol);
    interval = (60.0 - time4[time4.length - 1]) / (n - 1);
    assertCurveInterpolation("curve4, right extrapolation", expectedRight4, curve4, time4[time4.length - 1], interval,
        n, tol);

    //    System.out.println("GBP_SONIA_CURVE");
    //    interval = (60.0 - time1[time1.length - 2]) / (n - 1);
    //    for (int i = 0; i < n; ++i) {
    //      double key = time1[time1.length - 1] + interval * i;
    //      //      System.out.print(GBP_SONIA_CURVE.getInterestRate(key) + ", ");
    //      System.out.println(key + "\t" + GBP_SONIA_CURVE.getInterestRate(key) + "\t" + curve1.getInterestRate(key));
    //    }
    //    System.out.println("\n");
    //
    //    System.out.println("GBP_LIBOR1M_CURVE");
    //    interval = (60.0 - time2[time2.length - 1]) / (n - 1);
    //    for (int i = 0; i < n; ++i) {
    //      double key = time2[time2.length - 1] + interval * i;
    //      System.out.print(GBP_LIBOR1M_CURVE.getInterestRate(key) + ", ");
    //    }
    //    System.out.println("\n");
    //
    //    System.out.println("GBP_LIBOR3M_CURVE");
    //    interval = (60.0 - time3[time3.length - 1]) / (n - 1);
    //    for (int i = 0; i < n; ++i) {
    //      double key = time3[time3.length - 1] + interval * i;
    //      System.out.print(GBP_LIBOR3M_CURVE.getInterestRate(key) + ", ");
    //    }
    //    System.out.println("\n");
    //
    //    System.out.println("GBP_LIBOR6M_CURVE");
    //    interval = (60.0 - time4[time4.length - 1]) / (n - 1);
    //    for (int i = 0; i < n; ++i) {
    //      double key = time4[time4.length - 1] + interval * i;
    //      System.out.print(GBP_LIBOR6M_CURVE.getInterestRate(key) + ", ");
    //    }
    //    System.out.println("\n");
  }

  private void assertCurveInterpolation(String message, double[] expected, YieldAndDiscountCurve curve, double rebate,
      double interval, int nKeys, double relativeTol) {
    for (int i = 0; i < nKeys; ++i) {
      double key = rebate + interval * i;
      double res = curve.getInterestRate(key);
      assertRelative(message + " " + i, expected[i], res, relativeTol);
    }
  }

  private void assertRelative(String message, double expected, double obtained, double relativeTol) {
    double ref = Math.max(Math.abs(expected), 1.0);
    assertEquals(message, expected, obtained, ref * relativeTol);
  }

  @Test
      (enabled = false)
  public void testt() {
    // these multi curves are used for VM
    double[] GBP_SONIA_KNOT_TIMES = new double[] {0.002739726027397, 0.019178082191781, 0.038356164383562,
        0.084931506849315, 0.172602739726027, 0.252054794520548,
        0.336986301369863, 0.413698630136986, 0.501369863013699, 0.580821917808219, 0.671232876712329,
        0.747945205479452, 0.832876712328767, 0.920547945205479, 1, 1.25205479452055, 1.5013698630137,
        1.75068493150685, 2.0027397260274, 3.0027397260274, 4.00821917808219, 5.00547945205479, 6.00547945205479,
        7.00547945205479, 8.00547945205479, 9.00547945205479, 10.0109589041096, 12.0082191780822,
        15.0164383561644, 20.013698630137, 25.0164383561644, 30.0219178082192, 35.0246575342466, 40.027397260274,
        45.0301369863014, 50.0356164383562 };
    double[] GBP_SONIA_ZERO_RATES = new double[] {0.00430997455348493, 0.00431882113819674, 0.00431314320653989,
        0.00431970749752497, 0.00444129725993973, 0.00447764229051919,
        0.00454934099818509, 0.00480522065276289, 0.00503962777637656, 0.00520911179002989, 0.00543690213062051,
        0.00563610380093184, 0.00583579456204562, 0.00612718766319607, 0.00636519907010272,
        0.00717310918750252, 0.00795749811802235, 0.00870119236161661, 0.00946155387022128, 0.0123334511255753,
        0.0143921749914485, 0.0159592596727554, 0.0172361877785297, 0.0183436791467994,
        0.0192793358953591, 0.0201222559973813, 0.0208986383710833, 0.0222510994961065, 0.023877100242259,
        0.0256026136259111, 0.026288001664418, 0.0266311744778153, 0.0264014166694374,
        0.0263527169318637, 0.0262906111905873, 0.0263674066536486 };
    double[] GBP_LIBOR1M_KNOT_TIMES = new double[] {0.084931506849315, 0.172602739726027, 0.252054794520548,
        0.501369863013699, 0.747945205479452, 1, 2.0027397260274,
        3.0027397260274, 4.00821917808219, 5.00547945205479, 6.00547945205479, 7.00547945205479, 8.00547945205479,
        9.00547945205479, 10.0109589041096, 12.0082191780822, 15.0164383561644, 20.013698630137,
        25.0164383561644, 30.0219178082192, 35.0246575342466, 40.027397260274, 45.0301369863014, 50.0356164383562 };
    double[] GBP_LIBOR1M_ZERO_RATES = new double[] {0.00505581436649715, 0.00503291190352002, 0.00514256786002282,
        0.00569033898394734, 0.00639149506676498, 0.00723232237139851,
        0.0105298436453575, 0.0135410574559515, 0.0158030551363141, 0.0174456995488895, 0.0187732338667046,
        0.0199055537021988, 0.0208531180033394, 0.0216810024002466, 0.0224286195281712,
        0.0237374945104143, 0.0252160567356682, 0.0267142361493482, 0.0272605000077873, 0.0275097501922553,
        0.0272973928154239, 0.02732399981293, 0.0272679024586238, 0.0273500955580994 };
    double[] GBP_LIBOR3M_KNOT_TIMES = new double[] {0.252054794520548, 0.446575342465753, 0.695890410958904,
        0.945205479452055, 1.19452054794521, 1.44383561643836,
        1.69315068493151, 1.96164383561644, 2.21095890410959, 3.0027397260274, 4.00821917808219, 5.00547945205479,
        6.00547945205479, 7.00547945205479, 8.00547945205479, 9.00547945205479,
        10.0109589041096, 12.0082191780822, 15.0164383561644, 20.013698630137, 25.0164383561644, 30.0219178082192,
        35.0246575342466, 40.027397260274, 45.0301369863014, 50.0356164383562 };
    double[] GBP_LIBOR3M_ZERO_RATES = new double[] {0.00562351263918076, 0.00605140841711946, 0.00674163439039939,
        0.00751172986806733, 0.00835257242596894, 0.00924368840059903,
        0.0101182341187527, 0.0110392349927795, 0.0118815761688227, 0.0141891783018791, 0.0164362685797301,
        0.0180908568757903, 0.0194306164834304, 0.0205622948941999, 0.021509365473766,
        0.0223369044043144, 0.0230980379156519, 0.0243918201709714, 0.0258555923419827, 0.0273230838882434,
        0.0278368027650289, 0.0280342598539863, 0.0278259808180962, 0.0277923406323035,
        0.0277421859831982, 0.0278284728253182 };
    double[] GBP_LIBOR6M_KNOT_TIMES = new double[] {0.501369863013699, 1, 1.5013698630137, 2.0027397260274,
        3.0027397260274, 4.00821917808219, 5.00547945205479, 6.00547945205479,
        7.00547945205479, 8.00547945205479, 9.00547945205479, 10.0109589041096, 12.0082191780822, 15.0164383561644,
        20.013698630137, 25.0164383561644, 30.0219178082192, 35.0246575342466, 40.027397260274,
        45.0301369863014, 50.0356164383562 };
    double[] GBP_LIBOR6M_ZERO_RATES = new double[] {0.00710174175249047, 0.00860451137005419, 0.0103551375418353,
        0.0121086290753976, 0.015178756626544, 0.0175003704137641,
        0.0192427630940745, 0.0206581597595687, 0.0218403443388774, 0.0228520936339576, 0.0237315739821965,
        0.0245039864998691, 0.025779797672448, 0.0271525952264722, 0.0284196247149596,
        0.0287909199539885, 0.0288932996886611, 0.0286980928245931, 0.0285278998759854, 0.0284929581122082,
        0.0284672034337625 };

    CombinedInterpolatorExtrapolator base = CombinedInterpolatorExtrapolatorFactory.getInterpolator(
        Interpolator1DFactory.NATURAL_CUBIC_SPLINE, Interpolator1DFactory.LINEAR_EXTRAPOLATOR);
    Interpolator1D VM_INTERPOLATOR = new ProductInterpolator1D(base, false);
    YieldAndDiscountCurve GBP_SONIA_CURVE;
    YieldAndDiscountCurve GBP_LIBOR1M_CURVE;
    YieldAndDiscountCurve GBP_LIBOR3M_CURVE;
    YieldAndDiscountCurve GBP_LIBOR6M_CURVE;
    GBP_SONIA_CURVE = new YieldCurve("GBP Sonia", new InterpolatedDoublesCurve(GBP_SONIA_KNOT_TIMES,
        GBP_SONIA_ZERO_RATES, VM_INTERPOLATOR, true));
    GBP_LIBOR1M_CURVE = new YieldCurve("GBP Libor 1M", new InterpolatedDoublesCurve(GBP_LIBOR1M_KNOT_TIMES,
        GBP_LIBOR1M_ZERO_RATES, VM_INTERPOLATOR, true));
    GBP_LIBOR3M_CURVE = new YieldCurve("GBP Libor 3M", new InterpolatedDoublesCurve(GBP_LIBOR3M_KNOT_TIMES,
        GBP_LIBOR3M_ZERO_RATES, VM_INTERPOLATOR, true));
    GBP_LIBOR6M_CURVE = new YieldCurve("GBP Libor 6M", new InterpolatedDoublesCurve(GBP_LIBOR6M_KNOT_TIMES,
        GBP_LIBOR6M_ZERO_RATES, VM_INTERPOLATOR, true));

    Interpolator1D interp = new ProductPiecewisePolynomialInterpolator1D(new NaturalSplineInterpolator());
    CombinedInterpolatorExtrapolator vmInterp = new CombinedInterpolatorExtrapolator(interp,
        new ReciprocalExtrapolator1D(interp));

    YieldAndDiscountCurve GBP_SONIA_CURVEa;
    YieldAndDiscountCurve GBP_LIBOR1M_CURVEa;
    YieldAndDiscountCurve GBP_LIBOR3M_CURVEa;
    YieldAndDiscountCurve GBP_LIBOR6M_CURVEa;
    GBP_SONIA_CURVEa = new YieldCurve("GBP Sonia", new InterpolatedDoublesCurve(GBP_SONIA_KNOT_TIMES,
        GBP_SONIA_ZERO_RATES, vmInterp, true));
    GBP_LIBOR1M_CURVEa = new YieldCurve("GBP Libor 1M", new InterpolatedDoublesCurve(GBP_LIBOR1M_KNOT_TIMES,
        GBP_LIBOR1M_ZERO_RATES, vmInterp, true));
    GBP_LIBOR3M_CURVEa = new YieldCurve("GBP Libor 3M", new InterpolatedDoublesCurve(GBP_LIBOR3M_KNOT_TIMES,
        GBP_LIBOR3M_ZERO_RATES, vmInterp, true));
    GBP_LIBOR6M_CURVEa = new YieldCurve("GBP Libor 6M", new InterpolatedDoublesCurve(GBP_LIBOR6M_KNOT_TIMES,
        GBP_LIBOR6M_ZERO_RATES, vmInterp, true));

    double[] expectedSonia = new double[] {0.004322418853643653, 0.003981479123267706, 0.0041519489884556905,
        0.004208772276851673, 0.004237183921049669, 0.004254230907568467, 0.004265595565247662, 0.004273713177875661,
        0.004279801387346661, 0.0042845366613796605, 0.004288324880606059, 0.004291424332700387, 0.004294007209445658,
        0.004296192720537812, 0.004298066015759657, 0.004299689538285257, 0.004301110120495157, 0.004302363575386245,
        0.004303477757511657, 0.004304474657308077, 0.004305371867124856, 0.004306183628387655, 0.004306921593172019,
        0.004307595387105569, 0.004308213031544656, 0.0043087812644286155, 0.004309305787090732, 0.004309791456222322,
        0.004310242434087154, 0.004310662300061566, 0.004311054149783553, 0.004311420679295037, 0.004311764247632702,
        0.004312086927889389, 0.004312390549264666, 0.00431267673190672, 0.004312946915947273, 0.004313202385828131,
        0.004313444290786702, 0.004313673662189886, 0.004313891428267895, 0.004314098426691899, 0.004314295415354858,
        0.004314483081648061, 0.00431466205047268, 0.004314832891183119, 0.0043149961236247, 0.004315152223400592,
        0.0043153016264803655, 0.004315444733244239, 0.004315581912042012, 0.0043157135023333066,
        0.0043158398174654635, 0.0043159611471369685, 0.004316077759587161, 0.004316189903547063, 0.004316297809981198,
        0.004316401693646048, 0.004316501754487309, 0.00431659817889503, 0.004316691140833264, 0.004316780802858579,
        0.004316867317040026, 0.004316950825791477, 0.004317031462625936, 0.004317109352840224, 0.0043171846141374145,
        0.004317257357193531, 0.004317327686174244, 0.004317395699206635, 0.004317461488810521, 0.004317525142293338,
        0.004317586742112104, 0.0043176463662056505, 0.004317704088299898, 0.004317759978188712, 0.004317814101992605,
        0.0043178665223972505, 0.004317917298873675, 0.004317966487881717, 0.0043180141430582165, 0.004318060315391288,
        0.004318105053381814, 0.004318148403193289, 0.004318190408790944, 0.00431823111207106, 0.004318270552981254,
        0.004318308769632468, 0.00431834579840333, 0.004318381674037475, 0.004318416429734373, 0.0043184500972341805,
        0.004318482706897045, 0.004318514287777301, 0.0043185448676929285, 0.004318574473290627, 0.0043186031301068115,
        0.004318630862624854, 0.004318657694328801, 0.004318683647753853, 0.004318708744533799, 0.004318733005445645,
        0.004318756450451614, 0.004318779098738695, 0.004318800968755919, 0.00431882207824949, 0.004318842444295953,
        0.004318862083333473, 0.00431888101119139, 0.004318899243118159, 0.004318916793807739, 0.0043189336774245805,
        0.004318949907627261, 0.004318965497590867, 0.0043189804600282, 0.004318994807209879, 0.004319008550983399,
        0.004319021702791211, 0.004319034273687888, 0.004319046274356418, 0.00431905771512369, 0.004319068605975209,
        0.004319078956569089, 0.004319088776249354, 0.004319098074058613, 0.004319106858750105, 0.0043191151387991945,
        0.004319122922414303, 0.004319130217547339, 0.004319137031903639, 0.004319143372951455, 0.004319149247930998,
        0.0043191546638630795, 0.004319159627557359, 0.0043191641456202245, 0.004319168224462315, 0.004319171870305726,
        0.004319175089190881, 0.004319177886983122, 0.004319180269379004, 0.004319182241912324, 0.00431918380995989,
        0.004319184978747048, 0.004319185753352988, 0.004319186138715805, 0.0043191861396373755, 0.00431918576078801,
        0.004319185006710947, 0.004319183881826623, 0.0043191823904368135, 0.004319180536728576, 0.004319178324778055,
        0.0043191757585541255, 0.004319172841921904, 0.0043191695786461105, 0.0043191659723943124,
        0.0043191620267400395, 0.004319157745165776, 0.004319153131065838, 0.0043191481877491505, 0.00431914291844192,
        0.004319137326290196, 0.004319131414362346, 0.004319125185651443, 0.004319118643077558, 0.004319111789489969,
        0.004319104627669299, 0.0043190971603295734, 0.00431908939012019, 0.004319081319627846, 0.0043190729513783695,
        0.004319064287838508, 0.004319055331417644, 0.004319046084469448, 0.004319036549293486, 0.004319026728136761,
        0.004319016623195209, 0.00431900623661514, 0.0043189955704946315, 0.004318984626884877, 0.004318973407791488,
        0.004318961915175753, 0.0043189501509558565, 0.004318938117008052, 0.004318925815167811, 0.004318913247230912,
        0.004318900414954518, 0.004318887320058208, 0.00431887396422497, 0.004318860349102174, 0.0043188464763025125,
        0.0043188323474049, 0.004318817963957948, 0.004318803327911508, 0.004318788442086915, 0.004318773309362984,
        0.004318757932559774, 0.0043187423144400855, 0.004318726457710907, 0.0043187103650248115 };
    double[] expected1M = new double[] {0.004930523545070701, 0.11134190612643824, 0.05813621483575452,
        0.040400984405526426, 0.03153336919041252, 0.026212800061344174, 0.022665753975298606, 0.020132149628123208,
        0.018231946367741586, 0.01675401049855594, 0.015571661803207426, 0.014604285597922277, 0.013798138760184653,
        0.01311601451286816, 0.012531336586596921, 0.012024615717161844, 0.011581234956406153, 0.011190016638092309,
        0.010842267021813306, 0.010531122628300542, 0.010251092674139053, 0.009997732239421516, 0.00976740457149646,
        0.009557105396434475, 0.009364331152627676, 0.009186978848325401, 0.009023269028969454, 0.008871685862899114,
        0.008730930065833817, 0.008599881565117849, 0.008477569631116282, 0.008363148789630941, 0.00825587925073842,
        0.008155110896021221, 0.0080602700915815, 0.007970848761681195, 0.007886395283442017, 0.007806506858080618,
        0.0077308230866856235, 0.007659020534336525, 0.007590808109604881, 0.0075259231202260005, 0.007464127892246101,
        0.007405206860916444, 0.0073489640582835875, 0.007295220935767747, 0.007243814470752585, 0.007194595514887015,
        0.007147427348849188, 0.007102184414078201, 0.007058751196698052, 0.007017021242744565, 0.006976896287020069,
        0.006938285480568197, 0.006901104703984911, 0.006865275955641017, 0.006830726805452255, 0.006797389906147316,
        0.006765202555094272, 0.006734106300687096, 0.0067040465880934905, 0.006674972439847208, 0.0066468361673508135,
        0.006619593109854305, 0.0065932013979045625, 0.006567621738630197, 0.006542817220545956, 0.006518753135837371,
        0.0064953968183260975, 0.006472717495525303, 0.006450686153375954, 0.006429275412413894, 0.0064084594142563575,
        0.0063882137174182, 0.0063685152015756676, 0.006349341979488935, 0.006330673315878163, 0.006312489552620925,
        0.006294772039703615, 0.006277503071417123, 0.006260665827337795, 0.006244244317680172, 0.006228223332648349,
        0.00621258839544862, 0.006197325718658406, 0.006182422163675023, 0.006167865202993572, 0.006153642885086413,
        0.006139743801677145, 0.006126157057220895, 0.006112872240419232, 0.006099879397613194, 0.006087169007911646,
        0.006074731959924115, 0.0060625595299788676, 0.006050643361716666, 0.006038975446959943, 0.00602754810776521,
        0.006016353979574451, 0.006005385995387544, 0.005994637370884372, 0.0059841015904307715, 0.005973772393907635,
        0.005963643764307277, 0.005953709916045388, 0.005943965283940863, 0.005934404512819447, 0.005925022447700301,
        0.005915814124527805, 0.005906774761413516, 0.0058978997503558546, 0.005889184649407341, 0.0058806251752614785,
        0.005872217196233242, 0.005863956725609005, 0.005855839915343456, 0.005847863050082484, 0.005840022541492645,
        0.005832314922878902, 0.005824736844073786, 0.005817285066582095, 0.005809956458966298, 0.005802747992458958,
        0.005795656736789136, 0.005788679856210757, 0.005781814605721638, 0.005775058327462505, 0.005768408447286192,
        0.005761862471487634, 0.005755417983685949, 0.005749072641850447, 0.005742824175462817, 0.005736670382808332,
        0.005730609128389252, 0.005724638340454035, 0.005718756008636383, 0.0057129601816984, 0.005707248965372651,
        0.005701620520298003, 0.0056960730600445625, 0.005690604849223321, 0.005685214201676144, 0.005679899478742303,
        0.005674659087597748, 0.005669491479663528, 0.00566439514908013, 0.0056593686312444505, 0.005654410501406534,
        0.005649519373323184, 0.005644693897965783, 0.005639932762279815, 0.005635234687993663, 0.0056305984304744336,
        0.005626022777628658, 0.005621506548845812, 0.005617048593982747, 0.005612647792387157, 0.00560830305195839,
        0.005604013308243912, 0.005599777523569864, 0.005595594686204245, 0.0055914638095512425, 0.005587383931375434,
        0.005583354113054552, 0.005579373438859526, 0.005575441015260807, 0.005571555970259662, 0.005567717452743558,
        0.005563924631864556, 0.0055601766964397375, 0.005556472854372861, 0.005552812332096242, 0.005549194374032137,
        0.005545618242072823, 0.005542083215078558, 0.005538588588392799, 0.005535133673373925, 0.0055317177969428305,
        0.005528340301145796, 0.00552500054273197, 0.005521697892744962, 0.005518431736127978, 0.005515201471341947,
        0.005512006509996203, 0.005508846276491174, 0.005505720207672688, 0.0055026277524974085, 0.005499568371709025,
        0.005496541537524782, 0.005493546733331904, 0.005490583453393688, 0.005487651202564772, 0.005484749496015321,
        0.0054818778589637955, 0.005479035826417955, 0.005476222942923868, 0.005473438762322576, 0.005470682847514188,
        0.005467954770229121, 0.005465254110806214 };
    double[] expected3M = new double[] {0.006362985700012222, -1.857514318313535, -0.9255756663067625,
        -0.6149294489711694, -0.45960634030337455, -0.3664124751026972, -0.3042832316355789, -0.25990520058763766,
        -0.22662167730168087, -0.2007344925237152, -0.18002474470134244, -0.16308040557394657, -0.1489601229677835,
        -0.1370121915317989, -0.12677110744381254, -0.11789550123422421, -0.11012934580083443, -0.10327685571254945,
        -0.09718575341185146, -0.09173581977438496, -0.08683087950066509, -0.08239307639587103, -0.07835870993696714,
        -0.07467515795275066, -0.07129856863388552, -0.06819210646052962, -0.06532460291589347, -0.06266950704123021,
        -0.06020406087190021, -0.05790864547286866, -0.05576625776710597, -0.053762088623005445, -0.05188318005041108,
        -0.05011814472464074, -0.04845693500626853, -0.04689065155751771, -0.045411383855919654, -0.04401207657062414,
        -0.0426864170371864, -0.04142874004392489, -0.040233946900326466, -0.03909743634909869, -0.03801504534792938,
        -0.03698299811425632, -0.03599786211847748, -0.03505650994473327, -0.03415608612636924, -0.03329397821516963,
        -0.03246779146693667, -0.03167532662679486, -0.030914560380258718, -0.03018362810417497, -0.029480808607940598,
        -0.02880451060213017, -0.028153260670609012, -0.027525692554779532, -0.02692053758594397, -0.02633661612478684,
        -0.025772829886428233, -0.025228155045980128, -0.024701636033546887, -0.02419237993955411,
        -0.023699551461496587, -0.02322236833194883, -0.022760097175199473, -0.022312049746350027,
        -0.02187757951231427, -0.021456078538995928, -0.02104697465312816, -0.020649728850908763, -0.02026383292875272,
        -0.019888807314263103, -0.01952419907795369, -0.019169580108392544, -0.018824545435305994,
        -0.018488711686835052, -0.01816171566858709, -0.017843213053410446, -0.017532877171956337,
        -0.017230397895095974, -0.016935480600157097, -0.01664784521373528, -0.016367225324543207,
        -0.016093367360391964, -0.01582602982395858, -0.0155649825825001, -0.01531000620712205, -0.015060891357614731,
        -0.014817438209232632, -0.014579455918117521, -0.014346762122360522, -0.014119182475960822,
        -0.013896550213178507, -0.013678705740993658, -0.013465496257578702, -0.013256775394867219,
        -0.013052402883462223, -0.012852244238271766, -0.012656170463391316, -0.012464057774872087,
        -0.012275787340123244, -0.012091245032795168, -0.011910321202081391, -0.011732910455459104,
        -0.011558911453964186, -0.01138822671916441, -0.01122076245105897, -0.011056428356189165,
        -0.010895137485298391, -0.01073680607992859, -0.010581353427383651, -0.010428701723533237,
        -0.010278775942965886, -0.010131503716036857, -0.009986815212387323, -0.009844643030540352,
        -0.009704922093208019, -0.00956758954796682, -0.009432584672983928, -0.009299848787496583,
        -0.009169325166767325, -0.009040958961256767, -0.008914697119770956, -0.008790488316358085,
        -0.008668282880742194, -0.008548032732096141, -0.008429691315968314, -0.008313213544188939,
        -0.008198555737593616, -0.008085675571410626, -0.00797453202316891, -0.007865085322991955,
        -0.007757296906151015, -0.007651129367758809, -0.007546546419491861, -0.007443512848236275,
        -0.007341994476557976, -0.007241958124904179, -0.007143371575448262, -0.007046203537495309,
        -0.006950423614370255, -0.006856002271715059, -0.00676291080712543, -0.006671121321061531,
        -0.00658060668897074, -0.006491340534563961, -0.006403297204190151, -0.006316451742256816,
        -0.006230779867646875, -0.0061462579510854045, -0.0060628629934114196, -0.00598057260471325,
        -0.005899364984287439, -0.005819218901383504, -0.005740113676699131, -0.005662029164591301,
        -0.005584945735972047, -0.00550884426185751, -0.005433706097541865, -0.005359513067368583,
        -0.005286247450072439, -0.0052138919646681865, -0.0051424297568615305, -0.00507184438596045,
        -0.005002119812265508, -0.004933240384918357, -0.004865190830189873, -0.004797956240188662,
        -0.004731522061973166, -0.004665874087050189, -0.004600998441243927, -0.004536881574920804,
        -0.004473510253554914, -0.0044108715486209996, -0.004348952828801268, -0.0042877417514937495,
        -0.004227226254610205, -0.004167394548651886, -0.00410823510905265, -0.004049736668778544,
        -0.00399188821117415, -0.003934678963046048, -0.0038780983879742994, -0.0038221361798432252,
        -0.0037667822565831412, -0.003712026754115057, -0.003657860020490717, -0.0036042726102206474,
        -0.0035512552787832384, -0.00349879897730813, -0.0034468948474275078, -0.003395534216289068,
        -0.0033447085917249985, -0.0032944096575709195, -0.003244629269129769, -0.003195359448775206,
        -0.0031465923816895443, -0.0030983204117316777, -0.0030505360374299298, -0.0030032319080960496 };
    double[] expected6M = new double[] {0.009323892258966062, -11.131869058015933, -5.561272582878483, -3.704407091166,
        -2.7759743453097583, -2.2189146977960132, -1.8475415994535151, -1.5822751006374465, -1.383325226525396,
        -1.2285864355493554, -1.1047954027685234, -1.003511830493297, -0.919108853597275, -0.8476909500698724,
        -0.7864756041892406, -0.7334223044260267, -0.6870006671332152, -0.646040398933675, -0.6096312716451944,
        -0.5770546840712917, -0.5477357552547788, -0.5212091053731718, -0.4970939691171655, -0.47507580123124676,
        -0.4548924806691545, -0.43632382575202966, -0.41918352890545285, -0.4033128836771411, -0.3885758559651372,
        -0.37485517499189225, -0.3620492060835303, -0.3500694287176435, -0.33883838743712447, -0.3282880153251215,
        -0.3183582533373544, -0.3089959063203167, -0.30015368969311434, -0.2917894307214365, -0.2838653959061627,
        -0.2763477218506466, -0.2692059314979063, -0.26241252116237274, -0.255942606557103, -0.24977361821254304,
        -0.24388503842909962, -0.23825817330269813, -0.23287595448614043, -0.2277227662575211, -0.2227842942050941,
        -0.21804739244052163, -0.21349996674653185, -0.20913087147191423, -0.20492981832324342, -0.20088729548206968,
        -0.1969944957090875, -0.1932432522914865, -0.18962598185308557, -0.18613563318445323, -0.1827656413664631,
        -0.17950988655925243, -0.17636265691228223, -0.17331861512258961, -0.17037276822933872, -0.16752044028507992,
        -0.16475724758907917, -0.16207907620680154, -0.15948206153307778, -0.15696256968543534, -0.1545171805391941,
        -0.1521426722377715, -0.14983600703067526, -0.14759431830828593, -0.1454148987170742, -0.143295189251649,
        -0.14123276923123515, -0.13922534707803255, -0.13727075182359838, -0.13536692527707156, -0.1335119147958403,
        -0.1317038666052731, -0.1299410196194701, -0.12822169971973635, -0.12654431445170336, -0.12490734810579178,
        -0.12330935714906835, -0.12174896597956206, -0.12022486297678849, -0.11873579682465345, -0.11728057308506687,
        -0.11585805100254955, -0.11446714052186611, -0.11310679950229653, -0.11177603111358715, -0.11047388139990377,
        -0.10919943699927749, -0.10795182300708546, -0.10673020097306407, -0.1055337670222184, -0.10436175009077783,
        -0.10321341026906314, -0.10208803724378285, -0.1009849488328646, -0.0999034896064741, -0.09884302958836304,
        -0.0978029630321387, -0.09678270726746152, -0.09578170161155182, -0.09479940634173388, -0.09383530172506073,
        -0.09288888710135407, -0.09195968001626023, -0.0910472154011681, -0.09015104479705977, -0.08927073561957287,
        -0.08840587046274351, -0.08755604643907647, -0.08672087455374856, -0.08589997911090486, -0.08509299715014323,
        -0.08429957791141121, -0.08351938232665806, -0.08275208253669422, -0.08199736143181176, -0.08125491221481357,
        -0.0805244379851863, -0.07980565134323307, -0.07909827401305689, -0.07840203648335597, -0.07771667766505659,
        -0.07704194456487029, -0.07637759197391769, -0.07572338217061331, -0.07507908463705588, -0.0744444757882136,
        -0.07381933871323465, -0.07320346292825539, -0.07259664414011403, -0.07199868402041272, -0.07140938998940272,
        -0.07082857500919863, -0.0702560573858546, -0.06969166057986295, -0.06913521302465998, -0.06858654795274652,
        -0.06804550322905399, -0.06751192119120564, -0.06698564849634145, -0.0664665359741965, -0.06595443848613458,
        -0.06544921478985874, -0.06495072740953323, -0.06445884251106634, -0.06397342978231613, -0.06349436231799402,
        -0.06302151650905272, -0.06255477193635582, -0.06209401126843708, -0.06163912016316704, -0.06118998717315354,
        -0.06074650365471248, -0.060308563680252045, -0.05987606395392149, -0.05944890373038515, -0.059026984736585436,
        -0.05861021109636866, -0.058198489257851475, -0.05779172792341281, -0.05738983798220096, -0.056992732445051195,
        -0.056600326381713764, -0.056212536860298, -0.05582928288884031, -0.055450485358911256, -0.055076066991177855,
        -0.05470595228284363, -0.05434006745689048, -0.053978340413050385, -0.05362070068044012, -0.05326707937179177,
        -0.052917409139217705, -0.05257162413145001, -0.052229659952497426, -0.05189145362166521, -0.05155694353488585,
        -0.05122606942731057, -0.05089877233711442, -0.05057499457046887, -0.050254679667637664, -0.04993777237015573,
        -0.049624218589049265, -0.04931396537405971, -0.04900696088383443, -0.04870315435704901, -0.04840249608442717,
        -0.04810493738162617, -0.04781043056295647, -0.04751892891590584, -0.04723038667643947, -0.046944759005048575,
        -0.04666200196352082 };
    double eps = 1.0e-18;

    int n = 200;
    double interval = 1.e-4;
    double tol = 0.0;
    System.out.println("GBP_SONIA_CURVE");
    for (int i = 0; i < n; ++i) {
      double key = interval * i;
      double res = GBP_SONIA_CURVEa.getInterestRate(key);
      //      System.out.print(res + ", ");
      assertEquals(res, expectedSonia[i], eps);
    }
    System.out.println("\n");

    System.out.println("GBP_LIBOR1M_CURVE");
    for (int i = 0; i < n; ++i) {
      double key = interval * i;
      double res = GBP_LIBOR1M_CURVEa.getInterestRate(key);
      //      System.out.print(res + ", ");
      assertEquals(res, expected1M[i], eps);
    }
    System.out.println("\n");

    System.out.println("GBP_LIBOR3M_CURVE");
    for (int i = 0; i < n; ++i) {
      double key = interval * i;
      double res = GBP_LIBOR3M_CURVEa.getInterestRate(key);
      //      System.out.print(res + ", ");
      assertEquals(res, expected3M[i], eps);
    }
    System.out.println("\n");

    System.out.println("GBP_LIBOR6M_CURVE");
    for (int i = 0; i < n; ++i) {
      double key = interval * i;
      double res = GBP_LIBOR6M_CURVEa.getInterestRate(key);
      //      System.out.print(res + ", ");
      assertEquals(res, expected6M[i], eps);
    }
    System.out.println("\n");
  }
}
