/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.financial.security.index;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.master.security.ManageableSecurity;

/**
 * An abstract base class for all index types.
 */
@BeanDefinition
public abstract class Index extends ManageableSecurity {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * The index name.
   */
  @PropertyDefinition(validate = "notNull")
  private String _name;

  /**
   * The index description.
   */
  @PropertyDefinition
  private String _description;

  /**
   * The weighting type (optional)
   */
  @PropertyDefinition
  private IndexWeightingType _indexWeightingType;

  /**
   * For the builder.
   */
  public Index() {
    super();
  }

  /**
   * Creates an index without a description or weighting type.
   * @param name The index name, not null
   */
  public Index(final String name) {
    super(name);
  }

  /**
   * Creates an index without a weighting type.
   * @param name The index name, not null
   * @param description The index description
   */
  public Index(final String name, final String description) {
    super(name);
    setDescription(description);
  }

  /**
   * Creates an index.
   * @param name The index name, not null
   * @param description The index description
   * @param indexWeightingType The index weighting type
   */
  public Index(final String name, final String description, final IndexWeightingType indexWeightingType) {
    super(name);
    setDescription(description);
    setIndexWeightingType(indexWeightingType);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code Index}.
   * @return the meta-bean, not null
   */
  public static Index.Meta meta() {
    return Index.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(Index.Meta.INSTANCE);
  }

  @Override
  public Index.Meta metaBean() {
    return Index.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the index name.
   * @return the value of the property, not null
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets the index name.
   * @param name  the new value of the property, not null
   */
  public void setName(String name) {
    JodaBeanUtils.notNull(name, "name");
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the index description.
   * @return the value of the property
   */
  public String getDescription() {
    return _description;
  }

  /**
   * Sets the index description.
   * @param description  the new value of the property
   */
  public void setDescription(String description) {
    this._description = description;
  }

  /**
   * Gets the the {@code description} property.
   * @return the property, not null
   */
  public final Property<String> description() {
    return metaBean().description().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the weighting type (optional)
   * @return the value of the property
   */
  public IndexWeightingType getIndexWeightingType() {
    return _indexWeightingType;
  }

  /**
   * Sets the weighting type (optional)
   * @param indexWeightingType  the new value of the property
   */
  public void setIndexWeightingType(IndexWeightingType indexWeightingType) {
    this._indexWeightingType = indexWeightingType;
  }

  /**
   * Gets the the {@code indexWeightingType} property.
   * @return the property, not null
   */
  public final Property<IndexWeightingType> indexWeightingType() {
    return metaBean().indexWeightingType().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      Index other = (Index) obj;
      return JodaBeanUtils.equal(getName(), other.getName()) &&
          JodaBeanUtils.equal(getDescription(), other.getDescription()) &&
          JodaBeanUtils.equal(getIndexWeightingType(), other.getIndexWeightingType()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getDescription());
    hash += hash * 31 + JodaBeanUtils.hashCode(getIndexWeightingType());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("Index{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("name").append('=').append(JodaBeanUtils.toString(getName())).append(',').append(' ');
    buf.append("description").append('=').append(JodaBeanUtils.toString(getDescription())).append(',').append(' ');
    buf.append("indexWeightingType").append('=').append(JodaBeanUtils.toString(getIndexWeightingType())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code Index}.
   */
  public static class Meta extends ManageableSecurity.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(
        this, "name", Index.class, String.class);
    /**
     * The meta-property for the {@code description} property.
     */
    private final MetaProperty<String> _description = DirectMetaProperty.ofReadWrite(
        this, "description", Index.class, String.class);
    /**
     * The meta-property for the {@code indexWeightingType} property.
     */
    private final MetaProperty<IndexWeightingType> _indexWeightingType = DirectMetaProperty.ofReadWrite(
        this, "indexWeightingType", Index.class, IndexWeightingType.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "name",
        "description",
        "indexWeightingType");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return _name;
        case -1724546052:  // description
          return _description;
        case -300364526:  // indexWeightingType
          return _indexWeightingType;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends Index> builder() {
      throw new UnsupportedOperationException("Index is an abstract class");
    }

    @Override
    public Class<? extends Index> beanType() {
      return Index.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code description} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> description() {
      return _description;
    }

    /**
     * The meta-property for the {@code indexWeightingType} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<IndexWeightingType> indexWeightingType() {
      return _indexWeightingType;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return ((Index) bean).getName();
        case -1724546052:  // description
          return ((Index) bean).getDescription();
        case -300364526:  // indexWeightingType
          return ((Index) bean).getIndexWeightingType();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          ((Index) bean).setName((String) newValue);
          return;
        case -1724546052:  // description
          ((Index) bean).setDescription((String) newValue);
          return;
        case -300364526:  // indexWeightingType
          ((Index) bean).setIndexWeightingType((IndexWeightingType) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((Index) bean)._name, "name");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
