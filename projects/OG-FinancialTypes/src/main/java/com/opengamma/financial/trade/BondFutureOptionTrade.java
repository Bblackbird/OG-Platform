/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.trade;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.PropertyDefinition;

import com.opengamma.core.position.Trade;
import com.opengamma.core.position.impl.TradeWrapper;
import com.opengamma.financial.security.option.BondFutureOptionSecurity;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * Trade wrapper for deliverable swap future trades.
 */
@BeanDefinition
public final class BondFutureOptionTrade extends TradeWrapper<BondFutureOptionSecurity> implements ImmutableBean {

  @PropertyDefinition(validate = "notNull")
  private final Trade _trade;
  /**
   * Base trade wrapper constructor that wraps a trade in an explicit instrument type.
   *
   * @param trade the trade containing the instrument, not null.
   */
  @ImmutableConstructor
  public BondFutureOptionTrade(Trade trade) {
    super(BondFutureOptionSecurity.class, trade);
    _trade = trade;

  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code BondFutureOptionTrade}.
   * @return the meta-bean, not null
   */
  public static BondFutureOptionTrade.Meta meta() {
    return BondFutureOptionTrade.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(BondFutureOptionTrade.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static BondFutureOptionTrade.Builder builder() {
    return new BondFutureOptionTrade.Builder();
  }

  @Override
  public BondFutureOptionTrade.Meta metaBean() {
    return BondFutureOptionTrade.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the trade.
   * @return the value of the property, not null
   */
  public Trade getTrade() {
    return _trade;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      BondFutureOptionTrade other = (BondFutureOptionTrade) obj;
      return JodaBeanUtils.equal(getTrade(), other.getTrade());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getTrade());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("BondFutureOptionTrade{");
    buf.append("trade").append('=').append(JodaBeanUtils.toString(getTrade()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code BondFutureOptionTrade}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code trade} property.
     */
    private final MetaProperty<Trade> _trade = DirectMetaProperty.ofImmutable(
        this, "trade", BondFutureOptionTrade.class, Trade.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "trade");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 110621028:  // trade
          return _trade;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BondFutureOptionTrade.Builder builder() {
      return new BondFutureOptionTrade.Builder();
    }

    @Override
    public Class<? extends BondFutureOptionTrade> beanType() {
      return BondFutureOptionTrade.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code trade} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Trade> trade() {
      return _trade;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 110621028:  // trade
          return ((BondFutureOptionTrade) bean).getTrade();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code BondFutureOptionTrade}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<BondFutureOptionTrade> {

    private Trade _trade;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(BondFutureOptionTrade beanToCopy) {
      this._trade = beanToCopy.getTrade();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 110621028:  // trade
          return _trade;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 110621028:  // trade
          this._trade = (Trade) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public BondFutureOptionTrade build() {
      return new BondFutureOptionTrade(
          _trade);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code trade} property in the builder.
     * @param trade  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder trade(Trade trade) {
      JodaBeanUtils.notNull(trade, "trade");
      this._trade = trade;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("BondFutureOptionTrade.Builder{");
      buf.append("trade").append('=').append(JodaBeanUtils.toString(_trade));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
