<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
      
  <!-- Property file configuration -->
  <bean id="demoViewProcessorProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="ignoreUnresolvablePlaceholders" value="true" />
    <property name="locations">
      <list>
        <value>classpath:com/opengamma/financial/demoViewProcessor-common.properties</value>
        <value>classpath:demoViewProcessor-${opengamma.platform.runmode}.properties</value>
        <value>classpath:demoMasters-${opengamma.platform.runmode}.properties</value>
      </list>
    </property>
  </bean>

  <!-- ================================================================== -->
  <!-- Expose component infrastructure -->
  <bean class="com.opengamma.financial.spring.ComponentRepositoryBeanPostProcessor" />

  <!-- ================================================================== -->
  <bean id="testUser" class="${testUser.factory}" />  

  <!-- Functions -->
  <bean id="demoFunctionCompilation" class="com.opengamma.engine.function.CompiledFunctionService">
    <constructor-arg>
      <bean class="com.opengamma.engine.function.config.RepositoryFactoryBean">
        <property name="repositoryConfigurationSource" ref="sharedRepositoryConfigurationSource" />
      </bean>
    </constructor-arg>
    <constructor-arg>
      <bean class="com.opengamma.engine.function.CachingFunctionRepositoryCompiler" />
    </constructor-arg>
    <constructor-arg ref="engineFunctionCompilationContext" />
  </bean>
  <bean id="demoFunctionResolver" class="com.opengamma.web.spring.DemoFunctionResolverFactoryBean">
    <property name="functionCompilationService" ref="demoFunctionCompilation" />
  </bean>  
  <bean id="demoAvailableOutputsProvider" class="com.opengamma.engine.view.helper.DefaultAvailableOutputsProvider">
    <constructor-arg ref="demoFunctionCompilation" />
    <constructor-arg ref="combinedPositionSource" />
    <constructor-arg ref="combinedSecuritySource" />
    <constructor-arg value="*" />
  </bean>
  
  <!-- Calculation nodes -->
  <!--
  <bean id="demoComputationCacheSource" class="com.opengamma.engine.view.cache.BerkeleyDBViewComputationCacheSourceFactoryBean">
    <property name="fudgeContext" ref="standardFudgeContext" />
  </bean>
  -->
  <bean id="demoComputationCacheSource" class="com.opengamma.engine.view.cache.InMemoryViewComputationCacheSource">
    <constructor-arg ref="standardFudgeContext" />
  </bean>
  <bean id="demoViewProcessorQueryReceiver" class="com.opengamma.engine.view.calcnode.ViewProcessorQueryReceiver" />
  <bean id="demoViewProcessorQuerySender" class="com.opengamma.engine.view.calcnode.ViewProcessorQuerySender">
    <constructor-arg>
      <bean class="com.opengamma.transport.ByteArrayFudgeRequestSender">
        <constructor-arg>
          <bean class="com.opengamma.transport.InMemoryByteArrayRequestConduit">
            <constructor-arg>
              <bean class="com.opengamma.transport.FudgeRequestDispatcher">
                <constructor-arg ref="demoViewProcessorQueryReceiver" />
              </bean>
            </constructor-arg>
          </bean>
        </constructor-arg> 
      </bean>
    </constructor-arg>
  </bean>
  <bean id="demoTargetResolver" class="com.opengamma.engine.DefaultCachingComputationTargetResolver">
    <constructor-arg>
      <bean class="com.opengamma.engine.DefaultComputationTargetResolver">
        <constructor-arg ref="combinedSecuritySource" />
        <constructor-arg ref="combinedPositionSource" />
      </bean>
    </constructor-arg>
    <constructor-arg ref="standardCacheManager" />
  </bean>
  <bean id="jobDispatchStatistics" class="com.opengamma.engine.view.calcnode.stats.TotallingNodeStatisticsGatherer" />
  <bean id="functionCosts" class="com.opengamma.engine.view.calcnode.stats.FunctionCosts">
    <constructor-arg ref="centralFunctionCostsMaster" />
  </bean>
  <bean id="demoComputationJobDispatcher" class="com.opengamma.engine.view.calcnode.JobDispatcher">
    <constructor-arg>
      <bean class="com.opengamma.engine.view.calcnode.LocalNodeJobInvoker">
        <constructor-arg>
				  <bean class="com.opengamma.engine.view.calcnode.LocalCalculationNodeSet">
				    <property name="viewComputationCache" ref="demoComputationCacheSource" />
				    <property name="functionCompilationService" ref="demoFunctionCompilation" />
				    <property name="functionExecutionContext" ref="engineFunctionExecutionContext" />
				    <property name="computationTargetResolver" ref="demoTargetResolver" />
				    <property name="viewProcessorQuery" ref="demoViewProcessorQuerySender" />
				    <property name="writeBehindExecutorService">
				      <null/> <!-- The demo cache is so fast, and CPU bound, that write behind just slows us down on many core systems -->
				    </property>
				    <property name="nodesPerCore" value="1" />
				    <property name="nodeIdentifier" value="local" />
				    <property name="statisticsGatherer" ref="functionCosts" />
				  </bean>
        </constructor-arg>
      </bean>
    </constructor-arg>
    <!-- Maximum execution time (5 minutes) useful to keep the demo going, but not if you're testing large/long running jobs --> 
    <property name="maxJobExecutionTime" value="300000" />
    <property name="statisticsGatherer" ref="jobDispatchStatistics" />
  </bean>
  
  <!-- External interfaces to connect the view processor to the calc nodes -->
  <bean id="calcNodeCacheServer" class="com.opengamma.transport.socket.ServerSocketFudgeConnectionReceiver" init-method="start" destroy-method="stop">
    <constructor-arg>
      <bean class="com.opengamma.engine.view.cache.ViewComputationCacheServer">
        <constructor-arg ref="demoComputationCacheSource" />
      </bean>
    </constructor-arg>
    <constructor-arg ref="standardFudgeContext" />
  </bean>
  <bean id="calcNodeQueryServer" class="com.opengamma.transport.socket.ServerSocketFudgeRequestDispatcher" init-method="start" destroy-method="stop">
    <constructor-arg ref="demoViewProcessorQueryReceiver" />
    <constructor-arg ref="standardFudgeContext" />
  </bean>
  <bean id="calcNodeJobServer" class="com.opengamma.transport.socket.ServerSocketFudgeConnectionReceiver" init-method="start" destroy-method="stop">
    <constructor-arg ref="standardFudgeContext" />
    <constructor-arg>
      <bean class="com.opengamma.engine.view.calcnode.RemoteNodeServer">
        <constructor-arg ref="demoComputationJobDispatcher" />
        <constructor-arg>
          <bean factory-bean="demoComputationCacheSource" factory-method="getIdentifierMap" />
        </constructor-arg>
        <constructor-arg ref="functionCosts" />
        <constructor-arg ref="engineFunctionCompilationContext" />
      </bean>
    </constructor-arg>
  </bean>
  <bean id="calcNodeSocketConfig" class="com.opengamma.engine.view.calcnode.ConfigurationResource">
    <property name="cacheServer" ref="calcNodeCacheServer" />
    <property name="queryServer" ref="calcNodeQueryServer" />
    <property name="jobServer" ref="calcNodeJobServer" />
  </bean>
  
  <!-- Demo View Processor -->
  <bean id="graphExecutionStatistics" class="com.opengamma.engine.view.calc.stats.TotallingGraphStatisticsGathererProvider" />
  <bean id="graphExecutor" class="com.opengamma.engine.view.calc.MultipleNodeExecutorFactory">
    <property name="minimumJobItems" value="5" />
    <property name="maximumJobItems" value="1000" />
    <property name="minimumJobCost" value="10000000" />
    <property name="maximumJobCost" value="10000000000" />
    <property name="functionCosts" ref="functionCosts" />
  </bean>
  <bean id="graphExecutorTuner" class="com.opengamma.engine.view.calc.MultipleNodeExecutorTuner">
    <constructor-arg ref="graphExecutor" />
    <property name="jobDispatcher" ref="demoComputationJobDispatcher" />
    <property name="jobDispatchStatistics" ref="jobDispatchStatistics" />
    <property name="graphExecutionStatistics" ref="graphExecutionStatistics" />
  </bean>
  <bean id="demoViewProcessor" class="com.opengamma.engine.view.ViewProcessorFactoryBean">
    <property name="id" value="0" />
    <property name="viewDefinitionRepository" ref="combinedViewDefinitionRepository" />
    <property name="liveMarketDataSourceRegistry" ref="standardLiveMarketDataSourceRegistry" />
    <property name="securitySource" ref="combinedSecuritySource" />
    <property name="positionSource" ref="combinedPositionSource" />
    <property name="computationTargetResolver" ref="demoTargetResolver" />
    <property name="functionCompilationService" ref="demoFunctionCompilation" />
    <property name="functionResolver" ref="demoFunctionResolver" />
    <property name="marketDataProviderResolver" ref="standardMarketDataProviderResolver" />
    <property name="computationCacheSource" ref="demoComputationCacheSource" />
    <property name="computationJobDispatcher" ref="demoComputationJobDispatcher" />
    <property name="viewProcessorQueryReceiver" ref="demoViewProcessorQueryReceiver" />
    <property name="dependencyGraphExecutorFactory" ref="graphExecutor" />
    <property name="graphExecutionStatistics" ref="graphExecutionStatistics" />
    <property name="viewPermissionProvider">
      <bean class="com.opengamma.engine.view.permission.DefaultViewPermissionProvider" />
    </property>
    <property name="overrideOperationCompiler" ref="engineOverrideOperationCompiler" />
  </bean>
  
  <bean id="viewProcessorManager" class="com.opengamma.financial.view.ViewProcessorManager" init-method="start">
    <property name="viewProcessor" ref="demoViewProcessor" />
    <property name="mastersAndSources">
      <map>
        <entry key-ref="centralConfigMaster" value-ref="sharedConfigSource" />
        <entry key-ref="userInterpolatedYieldCurveDefinitionMaster" value-ref="userInterpolatedYieldCurveDefinitionSource" />
      </map>
    </property>
    <property name="watchSetProviders">
      <set>
        <bean class="com.opengamma.financial.view.ConfigDbOverrideWatchSetProvider">
          <constructor-arg value="${opengamma.config.db.configmaster.scheme}" />
          <constructor-arg ref="centralConfigMaster" />
          <constructor-arg>
            <set>
              <value>UserCurves</value>
            </set>
          </constructor-arg>
        </bean>
      </set>
    </property>
  </bean>
  
  <!-- Code fragment needed for work on ENG-199 & ENG-200 only -->
  <!--
  <bean id="tuner" class="com.opengamma.integration.server.MultipleNodeExecutorTuner">
    <property name="executorFactory" ref="graphExecutor" />
    <property name="graphStatistics" ref="graphExecutionStatistics" />
    <property name="nodeStatistics" ref="jobDispatchStatistics" />
    <property name="minimumJobCostLowerLimit" value="1" />
    <property name="minimumJobCostUpperLimit" value="100000000" />
  </bean>
  -->
  
  <!-- JMX instrumentation -->
  <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="staticMethod" value="com.opengamma.engine.view.calc.jmx.MultipleNodeExecutor.registerMBeans" />
    <property name="arguments">
      <list>
        <ref bean="graphExecutor" />
        <ref bean="standardMBeanServer" />
      </list>
    </property>
  </bean>
  <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="staticMethod" value="com.opengamma.engine.management.ManagementService.registerMBeans" />
    <property name="arguments">
      <list>
        <ref bean="demoViewProcessor" />
        <ref bean="graphExecutionStatistics" />
        <ref bean="standardMBeanServer" />
      </list>
    </property>
  </bean>

  <!-- Anything that needs regular scheduling -->
  <bean id="scheduler" class="org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean">
    <property name="scheduledExecutorTasks">
      <list>
        <bean class="org.springframework.scheduling.concurrent.ScheduledExecutorTask">
          <property name="runnable" ref="graphExecutorTuner" />
          <property name="period" value="5000" />
          <property name="fixedRate" value="false" />
        </bean>
        <bean class="org.springframework.scheduling.concurrent.ScheduledExecutorTask">
          <property name="runnable">
            <bean factory-bean="functionCosts" factory-method="createPersistenceWriter" />
          </property>
          <property name="period" value="60000" />
          <property name="fixedRate" value="false" />
        </bean>
      </list>
    </property>
  </bean>
</beans>
