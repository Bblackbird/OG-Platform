/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.currency;

import java.util.HashSet;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.opengamma.core.historicaltimeseries.HistoricalTimeSeries;
import com.opengamma.core.value.MarketDataRequirementNames;
import com.opengamma.engine.function.FunctionCompilationContext;
import com.opengamma.engine.function.FunctionExecutionContext;
import com.opengamma.engine.function.FunctionInputs;
import com.opengamma.engine.marketdata.ExternalIdBundleResolver;
import com.opengamma.engine.value.ValueRequirement;
import com.opengamma.engine.value.ValueRequirementNames;
import com.opengamma.financial.OpenGammaCompilationContext;
import com.opengamma.financial.analytics.timeseries.DateConstraint;
import com.opengamma.financial.analytics.timeseries.HistoricalTimeSeriesFunctionUtils;
import com.opengamma.financial.currency.CurrencyMatrixValue.CurrencyMatrixCross;
import com.opengamma.financial.currency.CurrencyMatrixValue.CurrencyMatrixFixed;
import com.opengamma.financial.currency.CurrencyMatrixValue.CurrencyMatrixValueRequirement;
import com.opengamma.id.ExternalIdBundle;
import com.opengamma.master.historicaltimeseries.HistoricalTimeSeriesResolutionResult;
import com.opengamma.master.historicaltimeseries.HistoricalTimeSeriesResolver;
import com.opengamma.timeseries.DoubleTimeSeries;
import com.opengamma.util.money.Currency;
import com.opengamma.util.tuple.Pair;

/**
 * Injects a time series implied from a value from a {@link CurrencyMatrix} into a dependency graph to satisfy the currency requirements generated by {@link CurrencySeriesConversionFunction}.
 */
public class CurrencyMatrixSeriesSourcingFunction extends AbstractCurrencyMatrixSourcingFunction {

  private static final Logger s_logger = LoggerFactory.getLogger(CurrencyMatrixSeriesSourcingFunction.class);

  // PLAT-2813 Don't need this if we can request HTS requirements directly
  private HistoricalTimeSeriesResolver _htsResolver;

  public CurrencyMatrixSeriesSourcingFunction() {
    super(ValueRequirementNames.HISTORICAL_FX_TIME_SERIES);
  }

  protected void setHistoricalTimeSeriesResolver(final HistoricalTimeSeriesResolver htsResolver) {
    _htsResolver = htsResolver;
  }

  protected HistoricalTimeSeriesResolver getHistoricalTimeSeriesResolver() {
    return _htsResolver;
  }

  @Override
  public void init(final FunctionCompilationContext context) {
    super.init(context);
    // PLAT-2813 Don't need this if we can request HTS requirements directly
    setHistoricalTimeSeriesResolver(OpenGammaCompilationContext.getHistoricalTimeSeriesResolver(context));
  }

  private ValueRequirement getSeriesConversionRequirement(final ExternalIdBundleResolver resolver, final CurrencyMatrixValueRequirement valueRequirement) {
    final ValueRequirement requirement = valueRequirement.getValueRequirement();
    // TODO: PLAT-2813 Don't perform the resolution here; request the time series directly
    final ExternalIdBundle targetIdentifiers = resolver.getExternalIdBundle(requirement.getTargetReference());
    if (targetIdentifiers == null) {
      return null;
    }
    final HistoricalTimeSeriesResolutionResult timeSeries = getHistoricalTimeSeriesResolver().resolve(targetIdentifiers, null, null, null, MarketDataRequirementNames.MARKET_VALUE, null);
    if (timeSeries == null) {
      return null;
    }
    // TODO: Requesting the whole time series isn't ideal but we don't know which points will be needed. Could the time series somehow be a lazy-fetch?
    // Is this really a problem - caching the whole time series at a calc node may be better than requesting different subsets each time?
    return HistoricalTimeSeriesFunctionUtils.createHTSRequirement(timeSeries, MarketDataRequirementNames.MARKET_VALUE, DateConstraint.NULL, true,
        DateConstraint.VALUATION_TIME, true);
  }

  private boolean getRequirements(final CurrencyMatrix matrix, final ExternalIdBundleResolver resolver, final Set<ValueRequirement> requirements, final Set<Pair<Currency, Currency>> visited,
      final Pair<Currency, Currency> currencies) {
    if (!visited.add(currencies)) {
      // Gone round in a loop if we've already seen this pair
      throw new IllegalStateException();
    }
    final CurrencyMatrixValue value = matrix.getConversion(currencies.getFirst(), currencies.getSecond());
    if (value != null) {
      return value.accept(new CurrencyMatrixValueVisitor<Boolean>() {

        @Override
        public Boolean visitCross(final CurrencyMatrixCross cross) {
          return getRequirements(matrix, resolver, requirements, visited, Pair.of(currencies.getFirst(), cross.getCrossCurrency()))
              && getRequirements(matrix, resolver, requirements, visited, Pair.of(cross.getCrossCurrency(), currencies.getSecond()));
        }

        @Override
        public Boolean visitFixed(final CurrencyMatrixFixed fixedValue) {
          // Literal value - nothing required
          return Boolean.TRUE;
        }

        @Override
        public Boolean visitValueRequirement(final CurrencyMatrixValueRequirement valueRequirement) {
          final ValueRequirement requirement = getSeriesConversionRequirement(resolver, valueRequirement);
          if (requirement == null) {
            return Boolean.FALSE;
          }
          requirements.add(tagInput(requirement, currencies.getFirst(), currencies.getSecond()));
          return Boolean.TRUE;
        }

      });
    } else {
      return false;
    }
  }

  @Override
  protected boolean getRequirements(FunctionCompilationContext context, CurrencyMatrix matrix, Set<ValueRequirement> requirements, Currency source, Currency target) {
    return getRequirements(matrix, new ExternalIdBundleResolver(context.getComputationTargetResolver()), requirements, new HashSet<Pair<Currency, Currency>>(), Pair.of(source, target));
  }

  private Object getRate(final CurrencyMatrix matrix, final ExternalIdBundleResolver resolver, final FunctionInputs inputs, final Currency source, final Currency target) {
    final CurrencyMatrixValue value = matrix.getConversion(source, target);
    final Object rate = value.accept(new CurrencyMatrixValueVisitor<Object>() {

      @Override
      public Object visitCross(final CurrencyMatrixCross cross) {
        final Object r1 = getRate(matrix, resolver, inputs, source, cross.getCrossCurrency());
        final Object r2 = getRate(matrix, resolver, inputs, cross.getCrossCurrency(), target);
        return createCrossRate(r1, r2);
      }

      @Override
      public Object visitFixed(final CurrencyMatrixFixed fixedValue) {
        return fixedValue.getFixedValue();
      }

      @Override
      public Object visitValueRequirement(final CurrencyMatrixValueRequirement valueRequirement) {
        final Object marketValue = inputs.getValue(getSeriesConversionRequirement(resolver, valueRequirement));
        if (marketValue instanceof DoubleTimeSeries) {
          //TODO is this branch ever reached?
          DoubleTimeSeries<?> fxRate = (DoubleTimeSeries<?>) marketValue;
          if (valueRequirement.isReciprocal()) {
            fxRate = fxRate.reciprocal();
          }
          return fxRate;
        } else if (marketValue instanceof HistoricalTimeSeries) {
          DoubleTimeSeries<?> fxRate = ((HistoricalTimeSeries) marketValue).getTimeSeries();
          if (valueRequirement.isReciprocal()) {
            fxRate = fxRate.reciprocal();
          }
          return fxRate;
        } else {
          if (marketValue == null) {
            // Missing input case; reported elsewhere
            return null;
          }
          throw new IllegalArgumentException("Expected a time series for " + valueRequirement.toString() + ", got " + marketValue.getClass());
        }
      }

    });
    s_logger.debug("{} to {} = {}", new Object[] {source, target, rate });
    return rate;
  }

  @Override
  protected Object getRate(CurrencyMatrix matrix, FunctionExecutionContext executionContext, FunctionInputs inputs, Currency source, Currency target) {
    return getRate(matrix, new ExternalIdBundleResolver(executionContext.getComputationTargetResolver()), inputs, source, target);
  }

  public static ValueRequirement getConversionRequirement(final Currency source, final Currency target) {
    return new ValueRequirement(ValueRequirementNames.HISTORICAL_FX_TIME_SERIES, CurrencyPair.TYPE.specification(CurrencyPair.of(target, source)));
  }

  public static ValueRequirement getConversionRequirement(final String source, final String target) {
    return getConversionRequirement(Currency.of(source), Currency.of(target));
  }

}
