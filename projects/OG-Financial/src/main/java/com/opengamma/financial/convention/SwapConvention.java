/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.convention;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.ExternalIdBundle;

/**
 *
 */
@BeanDefinition
public class SwapConvention extends Convention {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The fixed leg convention name.
   */
  //TODO is this the right type?
  @PropertyDefinition(validate = "notNull")
  private String _payLegConventionName;

  /**
   * The floating leg convention name.
   */
  //TODO is this the right type?
  @PropertyDefinition(validate = "notNull")
  private String _recieveLegConventionName;

  /**
   * For the builder
   */
  public SwapConvention() {
    super();
  }

  public SwapConvention(final String name, final ExternalIdBundle externalIdBundle, final String payLegConventionName, final String receiveLegConventionName) {
    super(name, externalIdBundle);
    setPayLegConventionName(payLegConventionName);
    setReceiveLegConventionName(receiveLegConventionName);
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SwapConvention}.
   * @return the meta-bean, not null
   */
  public static SwapConvention.Meta meta() {
    return SwapConvention.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(SwapConvention.Meta.INSTANCE);
  }

  @Override
  public SwapConvention.Meta metaBean() {
    return SwapConvention.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(final String propertyName, final boolean quiet) {
    switch (propertyName.hashCode()) {
      case 1537399682:  // payLegConventionName
        return getPayLegConventionName();
      case -1711672529:  // recieveLegConventionName
        return getRecieveLegConventionName();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(final String propertyName, final Object newValue, final boolean quiet) {
    switch (propertyName.hashCode()) {
      case 1537399682:  // payLegConventionName
        setPayLegConventionName((String) newValue);
        return;
      case -1711672529:  // recieveLegConventionName
        setRecieveLegConventionName((String) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_payLegConventionName, "payLegConventionName");
    JodaBeanUtils.notNull(_recieveLegConventionName, "recieveLegConventionName");
    super.validate();
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      final SwapConvention other = (SwapConvention) obj;
      return JodaBeanUtils.equal(getPayLegConventionName(), other.getPayLegConventionName()) &&
          JodaBeanUtils.equal(getRecieveLegConventionName(), other.getRecieveLegConventionName()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getPayLegConventionName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getRecieveLegConventionName());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the payLegConventionName.
   * @return the value of the property, not null
   */
  public String getPayLegConventionName() {
    return _payLegConventionName;
  }

  /**
   * Sets the payLegConventionName.
   * @param payLegConventionName  the new value of the property, not null
   */
  public void setPayLegConventionName(final String payLegConventionName) {
    JodaBeanUtils.notNull(payLegConventionName, "payLegConventionName");
    this._payLegConventionName = payLegConventionName;
  }

  /**
   * Gets the the {@code payLegConventionName} property.
   * @return the property, not null
   */
  public final Property<String> payLegConventionName() {
    return metaBean().payLegConventionName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the recieveLegConventionName.
   * @return the value of the property, not null
   */
  public String getRecieveLegConventionName() {
    return _recieveLegConventionName;
  }

  /**
   * Sets the recieveLegConventionName.
   * @param recieveLegConventionName  the new value of the property, not null
   */
  public void setRecieveLegConventionName(final String recieveLegConventionName) {
    JodaBeanUtils.notNull(recieveLegConventionName, "recieveLegConventionName");
    this._recieveLegConventionName = recieveLegConventionName;
  }

  /**
   * Gets the the {@code recieveLegConventionName} property.
   * @return the property, not null
   */
  public final Property<String> recieveLegConventionName() {
    return metaBean().recieveLegConventionName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SwapConvention}.
   */
  public static class Meta extends Convention.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code payLegConventionName} property.
     */
    private final MetaProperty<String> _payLegConventionName = DirectMetaProperty.ofReadWrite(
        this, "payLegConventionName", SwapConvention.class, String.class);
    /**
     * The meta-property for the {@code recieveLegConventionName} property.
     */
    private final MetaProperty<String> _recieveLegConventionName = DirectMetaProperty.ofReadWrite(
        this, "recieveLegConventionName", SwapConvention.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "payLegConventionName",
        "recieveLegConventionName");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(final String propertyName) {
      switch (propertyName.hashCode()) {
        case 1537399682:  // payLegConventionName
          return _payLegConventionName;
        case -1711672529:  // recieveLegConventionName
          return _recieveLegConventionName;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends SwapConvention> builder() {
      return new DirectBeanBuilder<SwapConvention>(new SwapConvention());
    }

    @Override
    public Class<? extends SwapConvention> beanType() {
      return SwapConvention.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code payLegConventionName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> payLegConventionName() {
      return _payLegConventionName;
    }

    /**
     * The meta-property for the {@code recieveLegConventionName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> recieveLegConventionName() {
      return _recieveLegConventionName;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
