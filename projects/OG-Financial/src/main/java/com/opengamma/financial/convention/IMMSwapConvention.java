/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.convention;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.ExternalId;
import com.opengamma.id.ExternalIdBundle;
import com.opengamma.util.ArgumentChecker;

/**
 * Convention for IMM swaps.
 */
@BeanDefinition
public class IMMSwapConvention extends SwapConvention {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * The IMM date convention.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalId _immDateConvention;

  /**
   * For the builder.
   */
  /* package */ IMMSwapConvention() {
    super();
  }

  /**
   * @param name The convention name, not null
   * @param externalIdBundle The external identifiers for this convention, not null
   * @param payLegConvention The pay leg convention, not null
   * @param receiveLegConvention The receive leg convention, not null
   * @param immDateConvention The IMM date convention, not null
   */
  public IMMSwapConvention(final String name, final ExternalIdBundle externalIdBundle, final ExternalId payLegConvention, final ExternalId receiveLegConvention,
      final ExternalId immDateConvention) {
    super(name, externalIdBundle, payLegConvention, receiveLegConvention);
    setImmDateConvention(immDateConvention);
  }

  /**
   * Accepts a visitor to manage traversal of the hierarchy.
   *
   * @param <T> The result type of the visitor
   * @param visitor The visitor, not null
   * @return The result
   */
  @Override
  public <T> T accept(final ConventionVisitor<T> visitor) {
    ArgumentChecker.notNull(visitor, "visitor");
    return visitor.visitIMMSwapConvention(this);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IMMSwapConvention}.
   * @return the meta-bean, not null
   */
  public static IMMSwapConvention.Meta meta() {
    return IMMSwapConvention.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IMMSwapConvention.Meta.INSTANCE);
  }

  @Override
  public IMMSwapConvention.Meta metaBean() {
    return IMMSwapConvention.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the IMM date convention.
   * @return the value of the property, not null
   */
  public ExternalId getImmDateConvention() {
    return _immDateConvention;
  }

  /**
   * Sets the IMM date convention.
   * @param immDateConvention  the new value of the property, not null
   */
  public void setImmDateConvention(ExternalId immDateConvention) {
    JodaBeanUtils.notNull(immDateConvention, "immDateConvention");
    this._immDateConvention = immDateConvention;
  }

  /**
   * Gets the the {@code immDateConvention} property.
   * @return the property, not null
   */
  public final Property<ExternalId> immDateConvention() {
    return metaBean().immDateConvention().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public IMMSwapConvention clone() {
    return (IMMSwapConvention) super.clone();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IMMSwapConvention other = (IMMSwapConvention) obj;
      return JodaBeanUtils.equal(getImmDateConvention(), other.getImmDateConvention()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getImmDateConvention());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("IMMSwapConvention{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("immDateConvention").append('=').append(getImmDateConvention()).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IMMSwapConvention}.
   */
  public static class Meta extends SwapConvention.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code immDateConvention} property.
     */
    private final MetaProperty<ExternalId> _immDateConvention = DirectMetaProperty.ofReadWrite(
        this, "immDateConvention", IMMSwapConvention.class, ExternalId.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "immDateConvention");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -320899608:  // immDateConvention
          return _immDateConvention;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends IMMSwapConvention> builder() {
      return new DirectBeanBuilder<IMMSwapConvention>(new IMMSwapConvention());
    }

    @Override
    public Class<? extends IMMSwapConvention> beanType() {
      return IMMSwapConvention.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code immDateConvention} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> immDateConvention() {
      return _immDateConvention;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -320899608:  // immDateConvention
          return ((IMMSwapConvention) bean).getImmDateConvention();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -320899608:  // immDateConvention
          ((IMMSwapConvention) bean).setImmDateConvention((ExternalId) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((IMMSwapConvention) bean)._immDateConvention, "immDateConvention");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
