/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.analytics.ircurve.strips;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.ExternalId;
import com.opengamma.util.ArgumentChecker;
import com.opengamma.util.time.Tenor;

/**
 * An IMM FRA curve node.
 */
@BeanDefinition
public class IMMFRANode extends CurveNode {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * The start tenor.
   */
  @PropertyDefinition(validate = "notNull")
  private Tenor _startTenor;

  /**
   * The index tenor.
   */
  @PropertyDefinition(validate = "notNull")
  private Tenor _indexTenor;

  /**
   * The IMM date start number.
   */
  @PropertyDefinition(validate = "notNull")
  private int _startIMMDateNumber;

  /**
   * The IMM date end number.
   */
  @PropertyDefinition(validate = "notNull")
  private int _endIMMDateNumber;

  /**
   * The IMM FRA convention with the underlying convention and the roll date convention.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalId _immFRAConvention;

  /**
   * For the builder.
   */
  /* package */ IMMFRANode() {
    super();
  }

  /**
   * Sets the useFixings field to true and the node name to null
   * @param startTenor The start tenor, not null
   * @param indexTenor The index tenor, not null
   * @param immDateStartNumber The IMM date start number, not negative or zero
   * @param immDateEndNumber The IMM date end number, not negative or zero
   * @param convention The swap convention, not null
   * @param curveNodeIdMapperName The curve node id mapper name, not null
   */
  public IMMFRANode(final Tenor startTenor, final Tenor indexTenor, final int immDateStartNumber, final int immDateEndNumber, final ExternalId convention,
      final String curveNodeIdMapperName) {
    super(curveNodeIdMapperName);
    setStartTenor(startTenor);
    setIndexTenor(indexTenor);
    setStartIMMDateNumber(immDateStartNumber);
    setEndIMMDateNumber(immDateEndNumber);
    setImmFRAConvention(convention);
  }

  /**
   * Sets the useFixings field to true and the node name to null
   * @param startTenor The start tenor, not null
   * @param indexTenor The index tenor, not null
   * @param immDateStartNumber The IMM date start number, not negative or zero
   * @param immDateEndNumber The IMM date end number, not negative or zero
   * @param convention The IMM FRA convention, not null
   * @param curveNodeIdMapperName The curve node id mapper name, not null
   * @param name The curve node name
   */
  public IMMFRANode(final Tenor startTenor, final Tenor indexTenor, final int immDateStartNumber, final int immDateEndNumber, final ExternalId convention,
      final String curveNodeIdMapperName, final String name) {
    super(curveNodeIdMapperName, name);
    setStartTenor(startTenor);
    setIndexTenor(indexTenor);
    setStartIMMDateNumber(immDateStartNumber);
    setEndIMMDateNumber(immDateEndNumber);
    setImmFRAConvention(convention);
  }

  @Override
  public Tenor getResolvedMaturity() {
    final int m = getIndexTenor().getPeriod().getMonths();
    return Tenor.of(getStartTenor().getPeriod().plusMonths(m * getEndIMMDateNumber()));
  }

  @Override
  public <T> T accept(final CurveNodeVisitor<T> visitor) {
    ArgumentChecker.notNull(visitor, "visitor");
    return visitor.visitIMMFRANode(this);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IMMFRANode}.
   * @return the meta-bean, not null
   */
  public static IMMFRANode.Meta meta() {
    return IMMFRANode.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IMMFRANode.Meta.INSTANCE);
  }

  @Override
  public IMMFRANode.Meta metaBean() {
    return IMMFRANode.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the start tenor.
   * @return the value of the property, not null
   */
  public Tenor getStartTenor() {
    return _startTenor;
  }

  /**
   * Sets the start tenor.
   * @param startTenor  the new value of the property, not null
   */
  public void setStartTenor(Tenor startTenor) {
    JodaBeanUtils.notNull(startTenor, "startTenor");
    this._startTenor = startTenor;
  }

  /**
   * Gets the the {@code startTenor} property.
   * @return the property, not null
   */
  public final Property<Tenor> startTenor() {
    return metaBean().startTenor().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the index tenor.
   * @return the value of the property, not null
   */
  public Tenor getIndexTenor() {
    return _indexTenor;
  }

  /**
   * Sets the index tenor.
   * @param indexTenor  the new value of the property, not null
   */
  public void setIndexTenor(Tenor indexTenor) {
    JodaBeanUtils.notNull(indexTenor, "indexTenor");
    this._indexTenor = indexTenor;
  }

  /**
   * Gets the the {@code indexTenor} property.
   * @return the property, not null
   */
  public final Property<Tenor> indexTenor() {
    return metaBean().indexTenor().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the IMM date start number.
   * @return the value of the property, not null
   */
  public int getStartIMMDateNumber() {
    return _startIMMDateNumber;
  }

  /**
   * Sets the IMM date start number.
   * @param startIMMDateNumber  the new value of the property, not null
   */
  public void setStartIMMDateNumber(int startIMMDateNumber) {
    JodaBeanUtils.notNull(startIMMDateNumber, "startIMMDateNumber");
    this._startIMMDateNumber = startIMMDateNumber;
  }

  /**
   * Gets the the {@code startIMMDateNumber} property.
   * @return the property, not null
   */
  public final Property<Integer> startIMMDateNumber() {
    return metaBean().startIMMDateNumber().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the IMM date end number.
   * @return the value of the property, not null
   */
  public int getEndIMMDateNumber() {
    return _endIMMDateNumber;
  }

  /**
   * Sets the IMM date end number.
   * @param endIMMDateNumber  the new value of the property, not null
   */
  public void setEndIMMDateNumber(int endIMMDateNumber) {
    JodaBeanUtils.notNull(endIMMDateNumber, "endIMMDateNumber");
    this._endIMMDateNumber = endIMMDateNumber;
  }

  /**
   * Gets the the {@code endIMMDateNumber} property.
   * @return the property, not null
   */
  public final Property<Integer> endIMMDateNumber() {
    return metaBean().endIMMDateNumber().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the IMM FRA convention with the underlying convention and the roll date convention.
   * @return the value of the property, not null
   */
  public ExternalId getImmFRAConvention() {
    return _immFRAConvention;
  }

  /**
   * Sets the IMM FRA convention with the underlying convention and the roll date convention.
   * @param immFRAConvention  the new value of the property, not null
   */
  public void setImmFRAConvention(ExternalId immFRAConvention) {
    JodaBeanUtils.notNull(immFRAConvention, "immFRAConvention");
    this._immFRAConvention = immFRAConvention;
  }

  /**
   * Gets the the {@code immFRAConvention} property.
   * @return the property, not null
   */
  public final Property<ExternalId> immFRAConvention() {
    return metaBean().immFRAConvention().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public IMMFRANode clone() {
    return (IMMFRANode) super.clone();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IMMFRANode other = (IMMFRANode) obj;
      return JodaBeanUtils.equal(getStartTenor(), other.getStartTenor()) &&
          JodaBeanUtils.equal(getIndexTenor(), other.getIndexTenor()) &&
          (getStartIMMDateNumber() == other.getStartIMMDateNumber()) &&
          (getEndIMMDateNumber() == other.getEndIMMDateNumber()) &&
          JodaBeanUtils.equal(getImmFRAConvention(), other.getImmFRAConvention()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getStartTenor());
    hash += hash * 31 + JodaBeanUtils.hashCode(getIndexTenor());
    hash += hash * 31 + JodaBeanUtils.hashCode(getStartIMMDateNumber());
    hash += hash * 31 + JodaBeanUtils.hashCode(getEndIMMDateNumber());
    hash += hash * 31 + JodaBeanUtils.hashCode(getImmFRAConvention());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(192);
    buf.append("IMMFRANode{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("startTenor").append('=').append(JodaBeanUtils.toString(getStartTenor())).append(',').append(' ');
    buf.append("indexTenor").append('=').append(JodaBeanUtils.toString(getIndexTenor())).append(',').append(' ');
    buf.append("startIMMDateNumber").append('=').append(JodaBeanUtils.toString(getStartIMMDateNumber())).append(',').append(' ');
    buf.append("endIMMDateNumber").append('=').append(JodaBeanUtils.toString(getEndIMMDateNumber())).append(',').append(' ');
    buf.append("immFRAConvention").append('=').append(JodaBeanUtils.toString(getImmFRAConvention())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IMMFRANode}.
   */
  public static class Meta extends CurveNode.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code startTenor} property.
     */
    private final MetaProperty<Tenor> _startTenor = DirectMetaProperty.ofReadWrite(
        this, "startTenor", IMMFRANode.class, Tenor.class);
    /**
     * The meta-property for the {@code indexTenor} property.
     */
    private final MetaProperty<Tenor> _indexTenor = DirectMetaProperty.ofReadWrite(
        this, "indexTenor", IMMFRANode.class, Tenor.class);
    /**
     * The meta-property for the {@code startIMMDateNumber} property.
     */
    private final MetaProperty<Integer> _startIMMDateNumber = DirectMetaProperty.ofReadWrite(
        this, "startIMMDateNumber", IMMFRANode.class, Integer.TYPE);
    /**
     * The meta-property for the {@code endIMMDateNumber} property.
     */
    private final MetaProperty<Integer> _endIMMDateNumber = DirectMetaProperty.ofReadWrite(
        this, "endIMMDateNumber", IMMFRANode.class, Integer.TYPE);
    /**
     * The meta-property for the {@code immFRAConvention} property.
     */
    private final MetaProperty<ExternalId> _immFRAConvention = DirectMetaProperty.ofReadWrite(
        this, "immFRAConvention", IMMFRANode.class, ExternalId.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "startTenor",
        "indexTenor",
        "startIMMDateNumber",
        "endIMMDateNumber",
        "immFRAConvention");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1583746178:  // startTenor
          return _startTenor;
        case 736548110:  // indexTenor
          return _indexTenor;
        case 1503387646:  // startIMMDateNumber
          return _startIMMDateNumber;
        case -2145916891:  // endIMMDateNumber
          return _endIMMDateNumber;
        case 1608413469:  // immFRAConvention
          return _immFRAConvention;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends IMMFRANode> builder() {
      return new DirectBeanBuilder<IMMFRANode>(new IMMFRANode());
    }

    @Override
    public Class<? extends IMMFRANode> beanType() {
      return IMMFRANode.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code startTenor} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Tenor> startTenor() {
      return _startTenor;
    }

    /**
     * The meta-property for the {@code indexTenor} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Tenor> indexTenor() {
      return _indexTenor;
    }

    /**
     * The meta-property for the {@code startIMMDateNumber} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> startIMMDateNumber() {
      return _startIMMDateNumber;
    }

    /**
     * The meta-property for the {@code endIMMDateNumber} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> endIMMDateNumber() {
      return _endIMMDateNumber;
    }

    /**
     * The meta-property for the {@code immFRAConvention} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> immFRAConvention() {
      return _immFRAConvention;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1583746178:  // startTenor
          return ((IMMFRANode) bean).getStartTenor();
        case 736548110:  // indexTenor
          return ((IMMFRANode) bean).getIndexTenor();
        case 1503387646:  // startIMMDateNumber
          return ((IMMFRANode) bean).getStartIMMDateNumber();
        case -2145916891:  // endIMMDateNumber
          return ((IMMFRANode) bean).getEndIMMDateNumber();
        case 1608413469:  // immFRAConvention
          return ((IMMFRANode) bean).getImmFRAConvention();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1583746178:  // startTenor
          ((IMMFRANode) bean).setStartTenor((Tenor) newValue);
          return;
        case 736548110:  // indexTenor
          ((IMMFRANode) bean).setIndexTenor((Tenor) newValue);
          return;
        case 1503387646:  // startIMMDateNumber
          ((IMMFRANode) bean).setStartIMMDateNumber((Integer) newValue);
          return;
        case -2145916891:  // endIMMDateNumber
          ((IMMFRANode) bean).setEndIMMDateNumber((Integer) newValue);
          return;
        case 1608413469:  // immFRAConvention
          ((IMMFRANode) bean).setImmFRAConvention((ExternalId) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((IMMFRANode) bean)._startTenor, "startTenor");
      JodaBeanUtils.notNull(((IMMFRANode) bean)._indexTenor, "indexTenor");
      JodaBeanUtils.notNull(((IMMFRANode) bean)._startIMMDateNumber, "startIMMDateNumber");
      JodaBeanUtils.notNull(((IMMFRANode) bean)._endIMMDateNumber, "endIMMDateNumber");
      JodaBeanUtils.notNull(((IMMFRANode) bean)._immFRAConvention, "immFRAConvention");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
