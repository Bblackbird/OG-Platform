/**
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.analytics.volatility.cube;

import java.io.Serializable;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.core.config.Config;
import com.opengamma.core.config.ConfigGroups;

/**
 * Specification for a volatility cube - contains all available points on the cube.
 */
@Config(description = "Volatility cube specification", group = ConfigGroups.VOL)
@BeanDefinition
public class VolatilityCubeSpecification implements Bean, Serializable {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * The specification name.
   */
  @PropertyDefinition(validate = "notNull")
  private String _name;
  /**
   * The cube quote type.
   */
  @PropertyDefinition(validate = "notNull")
  private String _cubeQuoteType;

  /**
   * The volatility quote type.
   */
  @PropertyDefinition(validate = "notNull")
  private String _volatilityQuoteType;

  /**
   * For the builder.
   */
  /* package */ VolatilityCubeSpecification() {
  }

  /**
   * @param name The name of the specification, not null
   * @param cubeQuoteType The cube quote type, not null
   * @param volatilityQuoteType The volatility quote type, not null
   */
  public VolatilityCubeSpecification(final String name, final String cubeQuoteType, final String volatilityQuoteType) {
    setName(name);
    setCubeQuoteType(cubeQuoteType);
    setVolatilityQuoteType(volatilityQuoteType);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code VolatilityCubeSpecification}.
   * @return the meta-bean, not null
   */
  public static VolatilityCubeSpecification.Meta meta() {
    return VolatilityCubeSpecification.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(VolatilityCubeSpecification.Meta.INSTANCE);
  }

  @Override
  public VolatilityCubeSpecification.Meta metaBean() {
    return VolatilityCubeSpecification.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(final String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the specification name
   * @return the value of the property, not null
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets the specification name
   * @param name  the new value of the property, not null
   */
  public void setName(final String name) {
    JodaBeanUtils.notNull(name, "name");
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the cube quote type
   * @return the value of the property, not null
   */
  public String getCubeQuoteType() {
    return _cubeQuoteType;
  }

  /**
   * Sets the cube quote type
   * @param cubeQuoteType  the new value of the property, not null
   */
  public void setCubeQuoteType(final String cubeQuoteType) {
    JodaBeanUtils.notNull(cubeQuoteType, "cubeQuoteType");
    this._cubeQuoteType = cubeQuoteType;
  }

  /**
   * Gets the the {@code cubeQuoteType} property.
   * @return the property, not null
   */
  public final Property<String> cubeQuoteType() {
    return metaBean().cubeQuoteType().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the volatility quote type.
   * @return the value of the property, not null
   */
  public String getVolatilityQuoteType() {
    return _volatilityQuoteType;
  }

  /**
   * Sets the volatility quote type.
   * @param volatilityQuoteType  the new value of the property, not null
   */
  public void setVolatilityQuoteType(final String volatilityQuoteType) {
    JodaBeanUtils.notNull(volatilityQuoteType, "volatilityQuoteType");
    this._volatilityQuoteType = volatilityQuoteType;
  }

  /**
   * Gets the the {@code volatilityQuoteType} property.
   * @return the property, not null
   */
  public final Property<String> volatilityQuoteType() {
    return metaBean().volatilityQuoteType().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public VolatilityCubeSpecification clone() {
    final BeanBuilder<? extends VolatilityCubeSpecification> builder = metaBean().builder();
    for (final MetaProperty<?> mp : metaBean().metaPropertyIterable()) {
      if (mp.style().isBuildable()) {
        Object value = mp.get(this);
        if (value instanceof Bean) {
          value = ((Bean) value).clone();
        }
        builder.set(mp.name(), value);
      }
    }
    return builder.build();
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      final VolatilityCubeSpecification other = (VolatilityCubeSpecification) obj;
      return JodaBeanUtils.equal(getName(), other.getName()) &&
          JodaBeanUtils.equal(getCubeQuoteType(), other.getCubeQuoteType()) &&
          JodaBeanUtils.equal(getVolatilityQuoteType(), other.getVolatilityQuoteType());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCubeQuoteType());
    hash += hash * 31 + JodaBeanUtils.hashCode(getVolatilityQuoteType());
    return hash;
  }

  @Override
  public String toString() {
    final StringBuilder buf = new StringBuilder(128);
    buf.append("VolatilityCubeSpecification{");
    final int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(final StringBuilder buf) {
    buf.append("name").append('=').append(JodaBeanUtils.toString(getName())).append(',').append(' ');
    buf.append("cubeQuoteType").append('=').append(JodaBeanUtils.toString(getCubeQuoteType())).append(',').append(' ');
    buf.append("volatilityQuoteType").append('=').append(JodaBeanUtils.toString(getVolatilityQuoteType())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code VolatilityCubeSpecification}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(
        this, "name", VolatilityCubeSpecification.class, String.class);
    /**
     * The meta-property for the {@code cubeQuoteType} property.
     */
    private final MetaProperty<String> _cubeQuoteType = DirectMetaProperty.ofReadWrite(
        this, "cubeQuoteType", VolatilityCubeSpecification.class, String.class);
    /**
     * The meta-property for the {@code volatilityQuoteType} property.
     */
    private final MetaProperty<String> _volatilityQuoteType = DirectMetaProperty.ofReadWrite(
        this, "volatilityQuoteType", VolatilityCubeSpecification.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "name",
        "cubeQuoteType",
        "volatilityQuoteType");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(final String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return _name;
        case 1081076513:  // cubeQuoteType
          return _cubeQuoteType;
        case -1213892303:  // volatilityQuoteType
          return _volatilityQuoteType;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends VolatilityCubeSpecification> builder() {
      return new DirectBeanBuilder<VolatilityCubeSpecification>(new VolatilityCubeSpecification());
    }

    @Override
    public Class<? extends VolatilityCubeSpecification> beanType() {
      return VolatilityCubeSpecification.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code cubeQuoteType} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> cubeQuoteType() {
      return _cubeQuoteType;
    }

    /**
     * The meta-property for the {@code volatilityQuoteType} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> volatilityQuoteType() {
      return _volatilityQuoteType;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(final Bean bean, final String propertyName, final boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return ((VolatilityCubeSpecification) bean).getName();
        case 1081076513:  // cubeQuoteType
          return ((VolatilityCubeSpecification) bean).getCubeQuoteType();
        case -1213892303:  // volatilityQuoteType
          return ((VolatilityCubeSpecification) bean).getVolatilityQuoteType();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(final Bean bean, final String propertyName, final Object newValue, final boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          ((VolatilityCubeSpecification) bean).setName((String) newValue);
          return;
        case 1081076513:  // cubeQuoteType
          ((VolatilityCubeSpecification) bean).setCubeQuoteType((String) newValue);
          return;
        case -1213892303:  // volatilityQuoteType
          ((VolatilityCubeSpecification) bean).setVolatilityQuoteType((String) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(final Bean bean) {
      JodaBeanUtils.notNull(((VolatilityCubeSpecification) bean)._name, "name");
      JodaBeanUtils.notNull(((VolatilityCubeSpecification) bean)._cubeQuoteType, "cubeQuoteType");
      JodaBeanUtils.notNull(((VolatilityCubeSpecification) bean)._volatilityQuoteType, "volatilityQuoteType");
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
