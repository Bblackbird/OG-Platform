/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.security.future;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.ExternalId;
import com.opengamma.util.money.Currency;
import com.opengamma.util.time.Expiry;

/**
 * A security for stock futures.
 */
@BeanDefinition
public class StockFutureSecurity extends FutureSecurity {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The underlying identifier.
   */
  @PropertyDefinition
  private ExternalId _underlyingIdentifier;

  /**
   * Creates an empty instance.
   * <p>
   * The security details should be set before use.
   */
  public StockFutureSecurity() {
    super();
  }

  public StockFutureSecurity(Expiry expiry, String tradingExchange, String settlementExchange, Currency currency, double unitAmount) {
    super(expiry, tradingExchange, settlementExchange, currency, unitAmount);
  }

  //-------------------------------------------------------------------------
  @Override
  public <T> T accept(FutureSecurityVisitor<T> visitor) {
    return visitor.visitStockFutureSecurity(this);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code StockFutureSecurity}.
   * @return the meta-bean, not null
   */
  public static StockFutureSecurity.Meta meta() {
    return StockFutureSecurity.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(StockFutureSecurity.Meta.INSTANCE);
  }

  @Override
  public StockFutureSecurity.Meta metaBean() {
    return StockFutureSecurity.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 368639974:  // underlyingIdentifier
        return getUnderlyingIdentifier();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case 368639974:  // underlyingIdentifier
        setUnderlyingIdentifier((ExternalId) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      StockFutureSecurity other = (StockFutureSecurity) obj;
      return JodaBeanUtils.equal(getUnderlyingIdentifier(), other.getUnderlyingIdentifier()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getUnderlyingIdentifier());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the underlying identifier.
   * @return the value of the property
   */
  public ExternalId getUnderlyingIdentifier() {
    return _underlyingIdentifier;
  }

  /**
   * Sets the underlying identifier.
   * @param underlyingIdentifier  the new value of the property
   */
  public void setUnderlyingIdentifier(ExternalId underlyingIdentifier) {
    this._underlyingIdentifier = underlyingIdentifier;
  }

  /**
   * Gets the the {@code underlyingIdentifier} property.
   * @return the property, not null
   */
  public final Property<ExternalId> underlyingIdentifier() {
    return metaBean().underlyingIdentifier().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code StockFutureSecurity}.
   */
  public static class Meta extends FutureSecurity.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code underlyingIdentifier} property.
     */
    private final MetaProperty<ExternalId> _underlyingIdentifier = DirectMetaProperty.ofReadWrite(
        this, "underlyingIdentifier", StockFutureSecurity.class, ExternalId.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "underlyingIdentifier");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 368639974:  // underlyingIdentifier
          return _underlyingIdentifier;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends StockFutureSecurity> builder() {
      return new DirectBeanBuilder<StockFutureSecurity>(new StockFutureSecurity());
    }

    @Override
    public Class<? extends StockFutureSecurity> beanType() {
      return StockFutureSecurity.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code underlyingIdentifier} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> underlyingIdentifier() {
      return _underlyingIdentifier;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
