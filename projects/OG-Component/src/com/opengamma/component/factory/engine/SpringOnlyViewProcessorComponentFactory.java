/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.component.factory.engine;

import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.springframework.context.support.GenericApplicationContext;

import com.opengamma.component.ComponentFactory;
import com.opengamma.component.ComponentRepository;
import com.opengamma.component.factory.AbstractSpringComponentFactory;
import com.opengamma.engine.ComputationTargetResolver;
import com.opengamma.engine.function.CompiledFunctionService;
import com.opengamma.engine.function.resolver.FunctionResolver;
import com.opengamma.engine.view.ViewProcessor;
import com.opengamma.engine.view.calc.MultipleNodeExecutorTuner;
import com.opengamma.engine.view.calc.stats.TotallingGraphStatisticsGathererProvider;
import com.opengamma.engine.view.calcnode.ConfigurationResource;
import com.opengamma.engine.view.calcnode.stats.TotallingNodeStatisticsGatherer;
import com.opengamma.engine.view.helper.AvailableOutputsProvider;

/**
 * Component definition for the view processor defined only in Spring.
 * See also {@link SpringViewProcessorComponentFactory}.
 */
@BeanDefinition
public class SpringOnlyViewProcessorComponentFactory extends AbstractSpringComponentFactory implements ComponentFactory {

  @Override
  public void init(ComponentRepository repo, LinkedHashMap<String, String> configuration) {
    GenericApplicationContext appContext = createApplicationContext();
    register(repo, appContext);
  }

  /**
   * Registers the infrastructure components.
   * 
   * @param repo  the repository to register with, not null
   * @param appContext  the Spring application context, not null
   */
  protected void register(ComponentRepository repo, GenericApplicationContext appContext) {
    // real
    registerInfrastructureByType(repo, AvailableOutputsProvider.class, appContext);
    registerInfrastructureByType(repo, ViewProcessor.class, appContext);
    registerInfrastructureByType(repo, ConfigurationResource.class, appContext);
    
    // debugging
    registerInfrastructureByType(repo, FunctionResolver.class, appContext);
    registerInfrastructureByType(repo, ComputationTargetResolver.class, appContext);
    registerInfrastructureByType(repo, CompiledFunctionService.class, appContext);
    registerInfrastructureByType(repo, TotallingNodeStatisticsGatherer.class, appContext);
    registerInfrastructureByType(repo, TotallingGraphStatisticsGathererProvider.class, appContext);
    registerInfrastructureByType(repo, MultipleNodeExecutorTuner.class, appContext);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SpringOnlyViewProcessorComponentFactory}.
   * @return the meta-bean, not null
   */
  public static SpringOnlyViewProcessorComponentFactory.Meta meta() {
    return SpringOnlyViewProcessorComponentFactory.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(SpringOnlyViewProcessorComponentFactory.Meta.INSTANCE);
  }

  @Override
  public SpringOnlyViewProcessorComponentFactory.Meta metaBean() {
    return SpringOnlyViewProcessorComponentFactory.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      return super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SpringOnlyViewProcessorComponentFactory}.
   */
  public static class Meta extends AbstractSpringComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap());

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    public BeanBuilder<? extends SpringOnlyViewProcessorComponentFactory> builder() {
      return new DirectBeanBuilder<SpringOnlyViewProcessorComponentFactory>(new SpringOnlyViewProcessorComponentFactory());
    }

    @Override
    public Class<? extends SpringOnlyViewProcessorComponentFactory> beanType() {
      return SpringOnlyViewProcessorComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
