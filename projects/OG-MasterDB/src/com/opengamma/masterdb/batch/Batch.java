/**
 * Copyright (C) 2011 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.masterdb.batch;

import com.google.common.collect.Maps;
import com.opengamma.engine.view.CycleInfo;
import com.opengamma.id.*;
import com.opengamma.id.VersionCorrection;
import org.joda.beans.*;
import org.joda.beans.impl.direct.*;
import java.util.Map;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class Batch extends DirectBean {

  @PropertyDefinition
  private BatchId _batchId;

  @PropertyDefinition
  private CycleInfo _cycleInfo;

  @PropertyDefinition
  private Map<String, String> _parametersMap;

  @PropertyDefinition
  private UniqueId _uniqueId;

  @PropertyDefinition
  private SnapshotMode _snapshotMode;

  public Batch(){
  }

  public Batch(CycleInfo cycleInfo) {
    _batchId = new BatchId(cycleInfo.getMarketDataSnapshotUniqueId(), cycleInfo.getViewDefinitionUid(), cycleInfo.getVersionCorrection(), cycleInfo.getValuationTime());
    _cycleInfo = cycleInfo;   
    _parametersMap = Maps.newHashMap();
  }  

  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code Batch}.
   * @return the meta-bean, not null
   */
  public static Batch.Meta meta() {
    return Batch.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(Batch.Meta.INSTANCE);
  }

  @Override
  public Batch.Meta metaBean() {
    return Batch.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -331744779:  // batchId
        return getBatchId();
      case -1561620812:  // cycleInfo
        return getCycleInfo();
      case -378524910:  // parametersMap
        return getParametersMap();
      case -294460212:  // uniqueId
        return getUniqueId();
      case -931724921:  // snapshotMode
        return getSnapshotMode();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @SuppressWarnings("unchecked")
  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -331744779:  // batchId
        setBatchId((BatchId) newValue);
          return;
      case -1561620812:  // cycleInfo
        setCycleInfo((CycleInfo) newValue);
          return;
      case -378524910:  // parametersMap
        setParametersMap((Map<String, String>) newValue);
        return;
      case -294460212:  // uniqueId
        setUniqueId((UniqueId) newValue);
        return;
      case -931724921:  // snapshotMode
        setSnapshotMode((SnapshotMode) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      Batch other = (Batch) obj;
      return JodaBeanUtils.equal(getBatchId(), other.getBatchId()) &&
          JodaBeanUtils.equal(getCycleInfo(), other.getCycleInfo()) &&
          JodaBeanUtils.equal(getParametersMap(), other.getParametersMap()) &&
          JodaBeanUtils.equal(getUniqueId(), other.getUniqueId()) &&
          JodaBeanUtils.equal(getSnapshotMode(), other.getSnapshotMode());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getBatchId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCycleInfo());
    hash += hash * 31 + JodaBeanUtils.hashCode(getParametersMap());
    hash += hash * 31 + JodaBeanUtils.hashCode(getUniqueId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getSnapshotMode());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the batchId.
   * @return the value of the property
   */
  public BatchId getBatchId() {
    return _batchId;
  }

  /**
   * Sets the batchId.
   * @param batchId  the new value of the property
   */
  public void setBatchId(BatchId batchId) {
    this._batchId = batchId;
  }

  /**
   * Gets the the {@code batchId} property.
   * @return the property, not null
   */
  public final Property<BatchId> batchId() {
    return metaBean().batchId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the cycleInfo.
   * @return the value of the property
   */
  public CycleInfo getCycleInfo() {
    return _cycleInfo;
  }

  /**
   * Sets the cycleInfo.
   * @param cycleInfo  the new value of the property
   */
  public void setCycleInfo(CycleInfo cycleInfo) {
    this._cycleInfo = cycleInfo;
  }

  /**
   * Gets the the {@code cycleInfo} property.
   * @return the property, not null
   */
  public final Property<CycleInfo> cycleInfo() {
    return metaBean().cycleInfo().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the parametersMap.
   * @return the value of the property
   */
  public Map<String, String> getParametersMap() {
    return _parametersMap;
  }

  /**
   * Sets the parametersMap.
   * @param parametersMap  the new value of the property
   */
  public void setParametersMap(Map<String, String> parametersMap) {
    this._parametersMap = parametersMap;
  }

  /**
   * Gets the the {@code parametersMap} property.
   * @return the property, not null
   */
  public final Property<Map<String, String>> parametersMap() {
    return metaBean().parametersMap().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the uniqueId.
   * @return the value of the property
   */
  public UniqueId getUniqueId() {
    return _uniqueId;
  }

  /**
   * Sets the uniqueId.
   * @param uniqueId  the new value of the property
   */
  public void setUniqueId(UniqueId uniqueId) {
    this._uniqueId = uniqueId;
  }

  /**
   * Gets the the {@code uniqueId} property.
   * @return the property, not null
   */
  public final Property<UniqueId> uniqueId() {
    return metaBean().uniqueId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the snapshotMode.
   * @return the value of the property
   */
  public SnapshotMode getSnapshotMode() {
    return _snapshotMode;
  }

  /**
   * Sets the snapshotMode.
   * @param snapshotMode  the new value of the property
   */
  public void setSnapshotMode(SnapshotMode snapshotMode) {
    this._snapshotMode = snapshotMode;
  }

  /**
   * Gets the the {@code snapshotMode} property.
   * @return the property, not null
   */
  public final Property<SnapshotMode> snapshotMode() {
    return metaBean().snapshotMode().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code Batch}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code batchId} property.
     */
    private final MetaProperty<BatchId> _batchId = DirectMetaProperty.ofReadWrite(
        this, "batchId", Batch.class, BatchId.class);
    /**
     * The meta-property for the {@code cycleInfo} property.
     */
    private final MetaProperty<CycleInfo> _cycleInfo = DirectMetaProperty.ofReadWrite(
        this, "cycleInfo", Batch.class, CycleInfo.class);
    /**
     * The meta-property for the {@code parametersMap} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Map<String, String>> _parametersMap = DirectMetaProperty.ofReadWrite(
        this, "parametersMap", Batch.class, (Class) Map.class);
    /**
     * The meta-property for the {@code uniqueId} property.
     */
    private final MetaProperty<UniqueId> _uniqueId = DirectMetaProperty.ofReadWrite(
        this, "uniqueId", Batch.class, UniqueId.class);
    /**
     * The meta-property for the {@code snapshotMode} property.
     */
    private final MetaProperty<SnapshotMode> _snapshotMode = DirectMetaProperty.ofReadWrite(
        this, "snapshotMode", Batch.class, SnapshotMode.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map = new DirectMetaPropertyMap(
        this, null,
        "batchId",
        "cycleInfo",
        "parametersMap",
        "uniqueId",
        "snapshotMode");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -331744779:  // batchId
          return _batchId;
        case -1561620812:  // cycleInfo
          return _cycleInfo;
        case -378524910:  // parametersMap
          return _parametersMap;
        case -294460212:  // uniqueId
          return _uniqueId;
        case -931724921:  // snapshotMode
          return _snapshotMode;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends Batch> builder() {
      return new DirectBeanBuilder<Batch>(new Batch());
    }

    @Override
    public Class<? extends Batch> beanType() {
      return Batch.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code batchId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<BatchId> batchId() {
      return _batchId;
    }

    /**
     * The meta-property for the {@code cycleInfo} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<CycleInfo> cycleInfo() {
      return _cycleInfo;
    }

    /**
     * The meta-property for the {@code parametersMap} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Map<String, String>> parametersMap() {
      return _parametersMap;
    }

    /**
     * The meta-property for the {@code uniqueId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueId> uniqueId() {
      return _uniqueId;
    }

    /**
     * The meta-property for the {@code snapshotMode} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<SnapshotMode> snapshotMode() {
      return _snapshotMode;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
