/**
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.bloombergexample.component;

import java.util.Map;

import net.sf.ehcache.CacheManager;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.bbg.BloombergConnector;
import com.opengamma.bbg.BloombergConnectorFactoryBean;
import com.opengamma.bbg.historicaltimeseries.BloombergHistoricalTimeSeriesProvider;
import com.opengamma.component.ComponentRepository;
import com.opengamma.component.factory.provider.HistoricalTimeSeriesProviderComponentFactory;
import com.opengamma.provider.historicaltimeseries.HistoricalTimeSeriesProvider;
import com.opengamma.provider.historicaltimeseries.impl.EHCachingHistoricalTimeSeriesProvider;

/**
 * Component factory for the Bloomberg time series provider.
 */
@BeanDefinition
public class ExampleBloombergHistoricalTimeSeriesProviderComponentFactory extends HistoricalTimeSeriesProviderComponentFactory {

  /**
   * Bloomberg server host.
   */
  @PropertyDefinition(validate = "notNull")
  private String _serverHost;
  /**
   * Bloomberg server port.
   */
  @PropertyDefinition(validate = "notNull")
  private int _serverPort;
  /**
   * The optional cache manager.
   * Caching will be added if this field is set.
   */
  @PropertyDefinition
  private CacheManager _cacheManager;

  //-------------------------------------------------------------------------
  @Override
  protected HistoricalTimeSeriesProvider initHistoricalTimeSeriesProvider(ComponentRepository repo) {
    BloombergConnectorFactoryBean factory = new BloombergConnectorFactoryBean("BloombergHistoricalTimeSeriesProvider", getServerHost(), getServerPort());
    BloombergConnector connector = factory.getObjectCreating();
    
    BloombergHistoricalTimeSeriesProvider provider = new BloombergHistoricalTimeSeriesProvider(connector);
    if (getCacheManager() == null) {
      return provider;
    }
    repo.registerLifecycle(provider);
    return new EHCachingHistoricalTimeSeriesProvider(provider, getCacheManager());
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ExampleBloombergHistoricalTimeSeriesProviderComponentFactory}.
   * @return the meta-bean, not null
   */
  public static ExampleBloombergHistoricalTimeSeriesProviderComponentFactory.Meta meta() {
    return ExampleBloombergHistoricalTimeSeriesProviderComponentFactory.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(ExampleBloombergHistoricalTimeSeriesProviderComponentFactory.Meta.INSTANCE);
  }

  @Override
  public ExampleBloombergHistoricalTimeSeriesProviderComponentFactory.Meta metaBean() {
    return ExampleBloombergHistoricalTimeSeriesProviderComponentFactory.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -1826275445:  // serverHost
        return getServerHost();
      case -1826037148:  // serverPort
        return getServerPort();
      case -1452875317:  // cacheManager
        return getCacheManager();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -1826275445:  // serverHost
        setServerHost((String) newValue);
        return;
      case -1826037148:  // serverPort
        setServerPort((Integer) newValue);
        return;
      case -1452875317:  // cacheManager
        setCacheManager((CacheManager) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_serverHost, "serverHost");
    JodaBeanUtils.notNull(_serverPort, "serverPort");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ExampleBloombergHistoricalTimeSeriesProviderComponentFactory other = (ExampleBloombergHistoricalTimeSeriesProviderComponentFactory) obj;
      return JodaBeanUtils.equal(getServerHost(), other.getServerHost()) &&
          JodaBeanUtils.equal(getServerPort(), other.getServerPort()) &&
          JodaBeanUtils.equal(getCacheManager(), other.getCacheManager()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getServerHost());
    hash += hash * 31 + JodaBeanUtils.hashCode(getServerPort());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCacheManager());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets bloomberg server host.
   * @return the value of the property, not null
   */
  public String getServerHost() {
    return _serverHost;
  }

  /**
   * Sets bloomberg server host.
   * @param serverHost  the new value of the property, not null
   */
  public void setServerHost(String serverHost) {
    JodaBeanUtils.notNull(serverHost, "serverHost");
    this._serverHost = serverHost;
  }

  /**
   * Gets the the {@code serverHost} property.
   * @return the property, not null
   */
  public final Property<String> serverHost() {
    return metaBean().serverHost().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets bloomberg server port.
   * @return the value of the property, not null
   */
  public int getServerPort() {
    return _serverPort;
  }

  /**
   * Sets bloomberg server port.
   * @param serverPort  the new value of the property, not null
   */
  public void setServerPort(int serverPort) {
    JodaBeanUtils.notNull(serverPort, "serverPort");
    this._serverPort = serverPort;
  }

  /**
   * Gets the the {@code serverPort} property.
   * @return the property, not null
   */
  public final Property<Integer> serverPort() {
    return metaBean().serverPort().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the optional cache manager.
   * Caching will be added if this field is set.
   * @return the value of the property
   */
  public CacheManager getCacheManager() {
    return _cacheManager;
  }

  /**
   * Sets the optional cache manager.
   * Caching will be added if this field is set.
   * @param cacheManager  the new value of the property
   */
  public void setCacheManager(CacheManager cacheManager) {
    this._cacheManager = cacheManager;
  }

  /**
   * Gets the the {@code cacheManager} property.
   * Caching will be added if this field is set.
   * @return the property, not null
   */
  public final Property<CacheManager> cacheManager() {
    return metaBean().cacheManager().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ExampleBloombergHistoricalTimeSeriesProviderComponentFactory}.
   */
  public static class Meta extends HistoricalTimeSeriesProviderComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code serverHost} property.
     */
    private final MetaProperty<String> _serverHost = DirectMetaProperty.ofReadWrite(
        this, "serverHost", ExampleBloombergHistoricalTimeSeriesProviderComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code serverPort} property.
     */
    private final MetaProperty<Integer> _serverPort = DirectMetaProperty.ofReadWrite(
        this, "serverPort", ExampleBloombergHistoricalTimeSeriesProviderComponentFactory.class, Integer.TYPE);
    /**
     * The meta-property for the {@code cacheManager} property.
     */
    private final MetaProperty<CacheManager> _cacheManager = DirectMetaProperty.ofReadWrite(
        this, "cacheManager", ExampleBloombergHistoricalTimeSeriesProviderComponentFactory.class, CacheManager.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "serverHost",
        "serverPort",
        "cacheManager");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1826275445:  // serverHost
          return _serverHost;
        case -1826037148:  // serverPort
          return _serverPort;
        case -1452875317:  // cacheManager
          return _cacheManager;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ExampleBloombergHistoricalTimeSeriesProviderComponentFactory> builder() {
      return new DirectBeanBuilder<ExampleBloombergHistoricalTimeSeriesProviderComponentFactory>(new ExampleBloombergHistoricalTimeSeriesProviderComponentFactory());
    }

    @Override
    public Class<? extends ExampleBloombergHistoricalTimeSeriesProviderComponentFactory> beanType() {
      return ExampleBloombergHistoricalTimeSeriesProviderComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code serverHost} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> serverHost() {
      return _serverHost;
    }

    /**
     * The meta-property for the {@code serverPort} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> serverPort() {
      return _serverPort;
    }

    /**
     * The meta-property for the {@code cacheManager} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<CacheManager> cacheManager() {
      return _cacheManager;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
