/**
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.livedata.cogda.msg;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * 
 */
@BeanDefinition
public class ConnectionResponseMessage extends DirectBean {
  /**
   * The classifier under which to publish.
   */
  @PropertyDefinition(validate = "notNull")
  private ConnectionResult _result;
  
  // TODO kirk 2012-07-23 -- Add in the list of possible servers

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ConnectionResponseMessage}.
   * @return the meta-bean, not null
   */
  public static ConnectionResponseMessage.Meta meta() {
    return ConnectionResponseMessage.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(ConnectionResponseMessage.Meta.INSTANCE);
  }

  @Override
  public ConnectionResponseMessage.Meta metaBean() {
    return ConnectionResponseMessage.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -934426595:  // result
        return getResult();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -934426595:  // result
        setResult((ConnectionResult) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  protected void validate() {
    JodaBeanUtils.notNull(_result, "result");
    super.validate();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ConnectionResponseMessage other = (ConnectionResponseMessage) obj;
      return JodaBeanUtils.equal(getResult(), other.getResult());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getResult());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the classifier under which to publish.
   * @return the value of the property, not null
   */
  public ConnectionResult getResult() {
    return _result;
  }

  /**
   * Sets the classifier under which to publish.
   * @param result  the new value of the property, not null
   */
  public void setResult(ConnectionResult result) {
    JodaBeanUtils.notNull(result, "result");
    this._result = result;
  }

  /**
   * Gets the the {@code result} property.
   * @return the property, not null
   */
  public final Property<ConnectionResult> result() {
    return metaBean().result().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ConnectionResponseMessage}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code result} property.
     */
    private final MetaProperty<ConnectionResult> _result = DirectMetaProperty.ofReadWrite(
        this, "result", ConnectionResponseMessage.class, ConnectionResult.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "result");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -934426595:  // result
          return _result;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ConnectionResponseMessage> builder() {
      return new DirectBeanBuilder<ConnectionResponseMessage>(new ConnectionResponseMessage());
    }

    @Override
    public Class<? extends ConnectionResponseMessage> beanType() {
      return ConnectionResponseMessage.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code result} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ConnectionResult> result() {
      return _result;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
