
	<!--
		Licensed to the Apache Software Foundation (ASF) under one or more
		contributor license agreements. See the NOTICE file distributed with
		this work for additional information regarding copyright ownership.
		The ASF licenses this file to you under the Apache License, Version
		2.0 (the "License"); you may not use this file except in compliance
		with the License. You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0 Unless required by
		applicable law or agreed to in writing, software distributed under the
		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the License for
		the specific language governing permissions and limitations under the
		License.
	-->
<project name="all" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- Load the environment variables first -->
	<property environment="env" />
	<!-- also, try a property file because some JVMs don't support env properly -->
	<property file="${user.home}/.OG-Build-common.properties" />

	<property file="build.properties" />
	<!-- Set where the OGDEV dir is. We do this outside build.properties so that
	     we can reference it in build.properties. -->
	<property file="${common.dir}/ogdev.properties"/>
	<condition property="ogdev.dir" value="${ogdev.dir.windows}" else="${ogdev.dir.posix}"><os family="windows" /></condition>
	<property file="${common.dir}/build.properties" />

	<condition property="env.IVY_SHARED_DEFAULT_ROOT_DEFAULT" value="${env.IVY_SHARED_DEFAULT_ROOT_WINDOWS}" else="${env.IVY_SHARED_DEFAULT_ROOT_NONWINDOWS}"><os family="windows" /></condition>
	<condition property="env.IVY_SHARED_DEFAULT_ROOT" value="${env.IVY_SHARED_DEFAULT_ROOT_DEFAULT}"><not><isset property="env.IVY_SHARED_DEFAULT_ROOT" /></not></condition>

	<property name="ivy.jar.dir" value="${user.home}/.ivy2/jars" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<property name="ivy.install.version" value="2.1.0" />
	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	
	<import file="git-macros.xml" />

	<available file="${ivy.jar.file}" property="skip.download"/>

	<!--target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}" /-->
		<!--
			download Ivy from web site so that it can be used even without any
			special installation
		-->
		<!--echo message="installing ivy..." />
		<get src="http://ivyrepo.opengamma.com/org.apache.ant/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" username="opengamma" password="opengamma" usetimestamp="true" />

	</target-->
	
	<import file="${common.dir}/common-ivy.xml"/>

	<!--
		================================= target: load-ivy this target is not
		necessary if you put ivy.jar in your ant lib directory if you already
		have ivy 1.4 in your ant lib, you can simply remove this target
		=================================
	-->
	<!-- target name="load-ivy" depends="download-ivy"-->
		<!--
			try to load ivy here from home ivy dir, in case the user has not
			already dropped it into ant's lib dir (note that the latter copy will
			always take precedence). We will not fail as long as ivy home lib dir
			exists (it may be empty) and ivy is in at least one of ant's lib dir
			or the ivy home lib dir.
		-->
		<!--path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
		<echo file="${common.dir}/ivy.shared.default.root">&lt;ivysettings&gt;&lt;property name="ivy.shared.default.root" value="${env.IVY_SHARED_DEFAULT_ROOT}" /&gt;&lt;/ivysettings&gt;</echo>
		<ivy:settings file="${common.dir}/ivysettings.xml" />
	</target-->

	<target name="buildlist" depends="load-ivy">
		<mkdir dir="projects" />
		<ivy:buildlist reference="build-path">
			<fileset dir="projects">
				<include name="*/build.xml" />
				<exclude name="Fudge-CSharp/**" />
				<exclude name="fudgemsg-dist/**" />
				<exclude name="Hermit/**" />
				<exclude name="jsr-310*/**" />
				<exclude name="OG-PrivateIvy/**" />
				<exclude name="sysadmin/**" />
			</fileset>
		</ivy:buildlist>
	</target>

	<macrodef name="og-subant">
		<attribute name="target" />
		<attribute name="buildpathref" />
		<sequential>
			<echo message="Executing @{target} on sub-project @{buildpathref}"/>
			<subant target="@{target}" buildpathref="@{buildpathref}">
				<property name="og.build.invoked" value="true" />
			</subant>
		</sequential>
	</macrodef>

	<target name="publish-all" depends="buildlist"
		description="compile, jar and publish all projects in the right order">
		<og-subant target="publish" buildpathref="build-path" />
	</target>

	<target name="publish-all-local" depends="buildlist"
		description="compile, jar and publish all projects in the right order">
		<og-subant target="publish-local" buildpathref="build-path" />
	</target>

	<target name="resolve-all" depends="buildlist" description="resolve all projects in the right order">
		<og-subant target="resolve" buildpathref="build-path" />
	</target>

	<target name="compile" depends="buildlist"
		description="compile all projects in the right order">
		<og-subant target="compile" buildpathref="build-path" />
	</target>

	<target name="tarball" depends="buildlist"
		description="build tarballs for all projects">
		<og-subant target="tarball" buildpathref="build-path" />
	</target>

	<target name="zipfile" depends="buildlist"
		description="build zip files for all projects">
		<og-subant target="zipfile" buildpathref="build-path" />
	</target>
	
	<target name="tests" depends="buildlist"
		description="run unit tests for all projects">
		<og-subant target="tests" buildpathref="build-path" />
	</target>
	
	<target name="clean-all" depends="buildlist" description="clean all projects">
		<og-subant target="clean" buildpathref="build-path" />
	</target>

	<target name="clean-src" depends="buildlist">
		<og-subant target="clean-src" buildpathref="build-path" />
	</target>
	
	<target name="clean-lib"
		description="--> clean the project libraries directory (dependencies)">
		<delete includeemptydirs="true" dir="${lib.dir}" />
	</target>

	<target name="fudge-proto" depends="clean-src">
		<og-subant target="fudge-proto" buildpathref="build-path" />
	</target>

	<target name="clean" depends="clean-all, load-ivy"
		description="delete repository, clean ivy cache, and clean all projects">
		<delete dir="${repository.dir}" />
		<ivy:cleancache />
	</target>
	
	<import file="${common.dir}/clover-common.xml"/>
	<target name="clover" depends="buildlist, taskdef-clover, guard-noclover"
		description="run all unit tests with Clover enabled and produce one merged report">
		<og-subant target="tests-with-clover" buildpathref="build-path"/>
		<clover-merge initstring="${clover.db.dir}">
			<cloverDb span="30 mins"  initstring="projects/Fudge-Java/tests/output/clover.db/clover-db-" />
			<cloverDb span="30 mins"  initstring="projects/Fudge-Proto/tests/output/clover.db/clover-db-" />
			<cloverDb span="30 mins"  initstring="projects/OG-Analytics/tests/output/clover.db/clover-db-" />
			<cloverDb span="30 mins"  initstring="projects/OG-Bloomberg/tests/output/clover.db/clover-db-" />
			<cloverDb span="30 mins"  initstring="projects/OG-Engine/tests/output/clover.db/clover-db-" />
			<cloverDb span="30 mins"  initstring="projects/OG-Financial/tests/output/clover.db/clover-db-" />
			<cloverDb span="30 mins"  initstring="projects/OG-LiveData/tests/output/clover.db/clover-db-" />
			<cloverDb span="30 mins"  initstring="projects/OG-Util/tests/output/clover.db/clover-db-" />
			<cloverDb span="30 mins"  initstring="projects/OG-Integration/tests/output/clover.db/clover-db-" />
			<cloverDb span="30 mins"  initstring="projects/OG-Security/tests/output/clover.db/clover-db-" />
			<cloverDb span="30 mins"  initstring="projects/OG-TimeSeriesStorage/tests/output/clover.db/clover-db-" />
			<cloverDb span="30 mins"  initstring="projects/OG-Reuters/tests/output/clover.db/clover-db-" />
			<cloverDb span="30 mins"  initstring="projects/OG-Config/tests/output/clover.db/clover-db-" />
		</clover-merge>
		<clover-html-report
			initstring="${clover.db.dir}"
			outdir="${clover.html.report.dir}"
		>
		</clover-html-report>
	</target>
	
	<target name="javadoc-public" depends="load-ivy, resolve" description="--> build Javadocs for public APIs and SPIs of the project">
		<mkdir dir="${docs.dir}" />
		<mkdir dir="${docs.dir}/javadoc-public" />
		<mkdir dir="${docs.dir}/temp-src" />
		<copy toDir="${docs.dir}/temp-src">
			<fileset dir="${projects.dir}/OG-Engine/src" includes="**/*.java">
		    	<contains text="@PublicAPI" casesensitive="yes"/>
		   	</fileset>
		   	<fileset dir="${projects.dir}/OG-Engine/src" includes="**/*.java">
	 	   		<contains text="@PublicSPI" casesensitive="yes"/>
		   </fileset>
			<fileset dir="${projects.dir}/OG-Util/src" includes="**/*.java">
		    	<contains text="@PublicAPI" casesensitive="yes"/>
		   	</fileset>
		   	<fileset dir="${projects.dir}/OG-Util/src" includes="**/*.java">
	 	   		<contains text="@PublicSPI" casesensitive="yes"/>
		   </fileset>
			<fileset dir="${projects.dir}/OG-Config/src" includes="**/*.java">
		    	<contains text="@PublicAPI" casesensitive="yes"/>
		   	</fileset>
		   	<fileset dir="${projects.dir}/OG-Config/src" includes="**/*.java">
	 	   		<contains text="@PublicSPI" casesensitive="yes"/>
		   </fileset>
		</copy>
		<javadoc sourcepath="${docs.dir}/temp-src" destdir="${docs.dir}/javadoc-public"
			classpathref="lib.path.id" author="false" windowtitle="${javadocs.windowtitle}"
			doctitle="${javadocs.doctitle}" bottom="${javadocs.footer}">
	    </javadoc>
		<delete dir="${docs.dir}/temp-src"/>
	</target>
	
	<!-- we might need to do something with versioning here (like depends on 'version' from common.xml) -->
	<target name="javadoc-public-jar" depends="javadoc-public"
		description="--> make a javadoc jar file for this project">
		<jar destfile="${javadocs.jar.file}" basedir="${docs.dir}/javadoc-public"
			compress="${jar.compress}" />
	</target>

	<target name="clone-or-pull" depends="clean-src" description="clone or pull all projects from git">
		<git-clone-pull repository="git@github.com:OpenGamma/Fudge-Java.git" dest="projects/Fudge-Java" />
		<git-clone-pull repository="git@github.com:OpenGamma/Fudge-Proto.git" dest="projects/Fudge-Proto" />
		<git-clone-pull repository="git@github.com:OpenGamma/OG-Bloomberg.git" dest="projects/OG-Bloomberg" />
		<git-clone-pull repository="git@github.com:OpenGamma/OG-Integration.git" dest="projects/OG-Integration" />
		<git-clone-pull repository="git@github.com:OpenGamma/OG-Reuters.git" dest="projects/OG-Reuters" />
		<git-clone-pull repository="git@github.com:OpenGamma/OG-Excel.git" dest="projects/OG-Excel" />
	</target>

	<target name="pull" depends="clean-src" description="pull origin master all projects from git">
		<git-pull dest="." />
		<git-pull dest="projects/Fudge-Java" />
		<git-pull dest="projects/Fudge-Proto" />
		<git-pull dest="projects/OG-Bloomberg" />
		<git-pull dest="projects/OG-Integration" />
		<git-pull dest="projects/OG-Reuters" />
		<git-pull dest="projects/OG-Excel" />
	</target>

	<target name="status" description="display the status of all projects from git">
		<git-status dest="." displayName="OG-Platform" />
		<git-status dest="projects/Fudge-Java" displayName="Fudge-Java" />
		<git-status dest="projects/Fudge-Proto" displayName="Fudge-Proto" />
		<git-status dest="projects/OG-Bloomberg" displayName="OG-Bloomberg" />
		<git-status dest="projects/OG-Integration" displayName="OG-Integration" />
		<git-status dest="projects/OG-Reuters" displayName="OG-Reuters" />
		<git-status dest="projects/OG-Excel" displayName="OG-Excel" />
	</target>

	<target name="publish-common-dir" if="publish-common-dir" description="publish common files">
		<echo message="Syncing common files to ${publish-common-dir}" />
		<sync todir="${publish-common-dir}/common">
			<fileset dir="common"/>
		</sync>
	</target>
</project>

