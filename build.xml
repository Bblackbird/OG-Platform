
	<!--
		Licensed to the Apache Software Foundation (ASF) under one or more
		contributor license agreements. See the NOTICE file distributed with
		this work for additional information regarding copyright ownership.
		The ASF licenses this file to you under the Apache License, Version
		2.0 (the "License"); you may not use this file except in compliance
		with the License. You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0 Unless required by
		applicable law or agreed to in writing, software distributed under the
		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the License for
		the specific language governing permissions and limitations under the
		License.
	-->
<project name="all" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- Load the environment variables first -->
	<property environment="env" />
	<!-- also, try a property file because some JVMs don't support env properly -->
	<property file="${user.home}/.OG-Build-common.properties" />

	<property file="build.properties" />
	<!-- Set where the OGDEV dir is. We do this outside build.properties so that
	     we can reference it in build.properties. -->
	<property file="${common.dir}/ogdev.properties"/>
	<condition property="ogdev.dir" value="${ogdev.dir.windows}" else="${ogdev.dir.posix}"><os family="windows" /></condition>
	<property file="${common.dir}/build.properties" />

	<condition property="env.IVY_SHARED_DEFAULT_ROOT_DEFAULT" value="${env.IVY_SHARED_DEFAULT_ROOT_WINDOWS}" else="${env.IVY_SHARED_DEFAULT_ROOT_NONWINDOWS}"><os family="windows" /></condition>
	<condition property="env.IVY_SHARED_DEFAULT_ROOT" value="${env.IVY_SHARED_DEFAULT_ROOT_DEFAULT}"><not><isset property="env.IVY_SHARED_DEFAULT_ROOT" /></not></condition>

	<property name="ivy.jar.dir" value="${user.home}/.ivy2/jars" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<property name="ivy.install.version" value="2.1.0" />
	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
		
	<import file="git-macros.xml" />

	<available file="${ivy.jar.file}" property="skip.download"/>

	<import file="${common.dir}/common-ivy.xml"/>

	<target name="init" depends="get-build-projects-file-for-user"/>
	
	<!-- get user-specific build-projects.xml file -->
	<target name="get-build-projects-file-for-user" depends="init-credentials">
		<get src="${opengamma.config.repository}/users/${opengamma.username}/ant/build-projects.xml" dest="${common.dir}/build-projects.xml" username="${opengamma.username}" password="${opengamma.password}"/>
	</target>
	
	<!-- dump the credentials established in dependant targets to a properties file for use by ivy --> 
	<target name="init-credentials" depends="init-prompt,init-env">
		<echo file="${common.dir}/credentials.properties">opengamma.username=${opengamma.username}${line.separator}opengamma.password=${opengamma.password}</echo>
    </target>
    	
	<!-- prompts the user for username and password if environemnt variables are not set -->
	<target name="init-prompt" depends="check-user-env-and-password-present" unless="og.user.and.password.set">
		<echo message="Please enter your credentials or use the defaults if you don't have an account"/>
		<input message="${line.separator}Username" defaultvalue="opengamma-public" addproperty="opengamma.username"/>
		<input message="Password" defaultvalue="opengamma" addproperty="opengamma.password">
			<handler type="secure"/>
	    </input>
	    <echo message="Username: ${opengamma.username}, Password: ${opengamma.password}"/>
	</target>
	
	<!-- copies the username and password properties from environment vairables if they're set -->
	<target name="init-env" depends="check-user-env-and-password-present" if="og.user.and.password.set">
		<property name="opengamma.username" value="${env.OG_USER}"/>
		<property name="opengamma.password" value="${env.OG_PASSWORD}"/>
	</target>	
	
	<!-- this task sets the og.user.and.password.set property if the environment variables OG_USER and OG_PASSWORD are set -->
	<!-- which overrides the manual prompt so we can do automated builds from within Bamboo -->
	<target name="check-user-env-and-password-present">
	    <condition property="og.user.and.password.set">
		  <and>
		  	<isset property="env.OG_USER"/>
		  	<isset property="env.OG_PASSWORD"/>
		  </and>
		</condition>
	</target>
		
	<target name="buildlist" depends="load-ivy">
		<mkdir dir="projects" />
		<ivy:buildlist reference="build-path">
			<fileset dir="projects">
				<include name="*/build.xml" />
			</fileset>
		</ivy:buildlist>
	</target>

	<macrodef name="og-subant">
		<attribute name="target" />
		<attribute name="buildpathref" />
		<sequential>
			<echo message="Executing @{target} on sub-project @{buildpathref}"/>
			<subant target="@{target}" buildpathref="@{buildpathref}">
				<property name="og.build.invoked" value="true" />
			</subant>
		</sequential>
	</macrodef>

	<target name="publish-all" depends="buildlist"
		description="compile, jar and publish all projects in the right order">
		<og-subant target="publish" buildpathref="build-path" />
	</target>

	<target name="publish-all-local" depends="buildlist"
		description="compile, jar and publish all projects in the right order">
		<og-subant target="publish-local" buildpathref="build-path" />
	</target>

	<target name="resolve-all" depends="buildlist" description="resolve all projects in the right order">
		<og-subant target="resolve" buildpathref="build-path" />
	</target>

	<target name="compile" depends="buildlist"
		description="compile all projects in the right order">
		<og-subant target="compile" buildpathref="build-path" />
	</target>

	<target name="tarball" depends="buildlist"
		description="build tarballs for all projects">
		<og-subant target="tarball" buildpathref="build-path" />
	</target>

	<target name="zipfile" depends="buildlist"
		description="build zip files for all projects">
		<og-subant target="zipfile" buildpathref="build-path" />
	</target>
	
	<target name="tests" depends="buildlist"
		description="run unit tests for all projects">
		<og-subant target="tests" buildpathref="build-path" />
	</target>
	
	<target name="clean-all" depends="buildlist" description="clean all projects">
		<og-subant target="clean" buildpathref="build-path" />
	</target>

	<target name="clean-src" depends="buildlist">
		<og-subant target="clean-src" buildpathref="build-path" />
	</target>
	
	<target name="clean-lib"
		description="--> clean the project libraries directory (dependencies)">
		<delete includeemptydirs="true" dir="${lib.dir}" />
	</target>

	<target name="fudge-proto" depends="clean-src">
		<og-subant target="fudge-proto" buildpathref="build-path" />
	</target>

    <target name="joda-bean" depends="buildlist"
    	description="builds the Joda-Bean files">
        <og-subant target="joda-bean" buildpathref="build-path" />
    </target>

	<target name="clean" depends="clean-all, load-ivy"
		description="delete repository, clean ivy cache, and clean all projects">
		<delete dir="${repository.dir}" />
		<ivy:cleancache />
	</target>
	
	<target name="javadoc-public" depends="load-ivy, resolve" description="--> build Javadocs for public APIs and SPIs of the project">
		<mkdir dir="${docs.dir}" />
		<mkdir dir="${docs.dir}/javadoc-public" />
		<mkdir dir="${docs.dir}/temp-src" />
		<copy toDir="${docs.dir}/temp-src">
			<fileset dir="${projects.dir}/OG-Engine/src" includes="**/*.java **/package.html">
				<contains text="@PublicAPI" casesensitive="yes"/>
			</fileset>
			<fileset dir="${projects.dir}/OG-Engine/src" includes="**/*.java **/package.html">
				<contains text="@PublicSPI" casesensitive="yes"/>
			</fileset>
			<fileset dir="${projects.dir}/OG-Util/src" includes="**/*.java **/package.html">
				<contains text="@PublicAPI" casesensitive="yes"/>
			</fileset>
			<fileset dir="${projects.dir}/OG-Util/src" includes="**/*.java **/package.html">
				<contains text="@PublicSPI" casesensitive="yes"/>
			</fileset>
			<fileset dir="${projects.dir}/OG-Core/src" includes="**/*.java **/package.html">
				<contains text="@PublicAPI" casesensitive="yes"/>
			</fileset>
			<fileset dir="${projects.dir}/OG-Core/src" includes="**/*.java **/package.html">
				<contains text="@PublicSPI" casesensitive="yes"/>
			</fileset>
			<fileset dir="${projects.dir}/OG-Master/src" includes="**/*.java **/package.html">
				<contains text="@PublicAPI" casesensitive="yes"/>
			</fileset>
			<fileset dir="${projects.dir}/OG-Master/src" includes="**/*.java **/package.html">
				<contains text="@PublicSPI" casesensitive="yes"/>
			</fileset>
		</copy>
		<javadoc sourcepath="${docs.dir}/temp-src" destdir="${docs.dir}/javadoc-public"
			classpathref="lib.path.id" author="false" windowtitle="${javadocs.windowtitle}"
			doctitle="${javadocs.doctitle}" bottom="${javadocs.footer}">
			<link href="http://download.oracle.com/javase/6/docs/api/" />
			<link href="http://dist.fudgemsg.org/java/javadoc/0.2/" />
			<link href="https://jsr-310.dev.java.net/nonav/doc-2010-06-22/" />
			<link href="http://joda-beans.sourceforge.net/apidocs/" />
		</javadoc>
		<delete dir="${docs.dir}/temp-src"/>
	</target>
	
	<!-- we might need to do something with versioning here (like depends on 'version' from common.xml) -->
	<target name="javadoc-public-jar" depends="javadoc-public"
		description="--> make a javadoc jar file for this project">
		<jar destfile="${javadocs.jar.file}" basedir="${docs.dir}/javadoc-public"
			compress="${jar.compress}" />
	</target>

	<target name="publish-common-dir" if="publish-common-dir" depends="init" description="publish common files">
		<echo message="Syncing common files to ${publish-common-dir}" />
		<sync todir="${publish-common-dir}/common">
			<fileset dir="common"/>
		</sync>
	</target>

    <target name="ivy-report" depends="publish-all-local" description="generate ivy dependency report">
            <ivy:report conf="opengamma" organisation="com.opengamma" module="og-integration" />
    </target>
	
	<import file="${common.dir}/clover-common.xml"/>
	<import file="${common.dir}/build-projects.xml" optional="true"/>
</project>

