
	<!--
		Licensed to the Apache Software Foundation (ASF) under one or more
		contributor license agreements. See the NOTICE file distributed with
		this work for additional information regarding copyright ownership.
		The ASF licenses this file to you under the Apache License, Version
		2.0 (the "License"); you may not use this file except in compliance
		with the License. You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0 Unless required by
		applicable law or agreed to in writing, software distributed under the
		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the License for
		the specific language governing permissions and limitations under the
		License.
	-->
<project name="common" xmlns:ivy="antlib:org.apache.ivy.ant">

        <!-- Load the environment variables first -->
        <property environment="env" />
        <!-- also, try a property file because some JVMs don't support env properly -->
        <property file="${user.home}/.OG-Build-common.properties" />

        <!-- project detaults -->
        <property file="${common.dir}/build.properties" />

	<condition property="env.IVY_SHARED_DEFAULT_ROOT_DEFAULT" value="${env.IVY_SHARED_DEFAULT_ROOT_WINDOWS}" else="${env.IVY_SHARED_DEFAULT_ROOT_NONWINDOWS}"><os family="windows" /></condition>
	<condition property="env.IVY_SHARED_DEFAULT_ROOT" value="${env.IVY_SHARED_DEFAULT_ROOT_DEFAULT}"><not><isset property="env.IVY_SHARED_DEFAULT_ROOT" /></not></condition>

	<property name="ivy.jar.dir" value="${user.home}/.ivy2/jars" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
        <available file="${ivy.jar.file}" property="skip.download"/>

	<target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}" />
		<!--
			download Ivy from web site so that it can be used even without any
			special installation
		-->
		<echo message="installing ivy..." />
		<get
			src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
			dest="${ivy.jar.file}" usetimestamp="true" />
	</target>
	<!--
		================================= target: load-ivy this target is not
		necessary if you put ivy.jar in your ant lib directory if you already
		have ivy 2.0 in your ant lib, you can simply remove this target
		=================================
	-->
	<target name="load-ivy" depends="download-ivy">
		<!--
			try to load ivy here from home ivy dir, in case the user has not
			already dropped it into ant's lib dir (note that the latter copy will
			always take precedence). We will not fail as long as ivy home lib dir
			exists (it may be empty) and ivy is in at least one of ant's lib dir
			or the ivy home lib dir.
		-->
		<mkdir dir="${ivy.jar.dir}" />
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant"
			classpathref="ivy.lib.path" />
		<echo file="${common.dir}/ivy.shared.default.root">&lt;ivysettings&gt;&lt;property name="ivy.shared.default.root" value="${env.IVY_SHARED_DEFAULT_ROOT}" /&gt;&lt;/ivysettings&gt;</echo>
		<ivy:settings file="${common.dir}/ivysettings.xml" />
	</target>

	<path id="lib.path.id">
		<fileset dir="${lib.dir}">
			<exclude name="*/org.apache.ant/ant/*.jar" />
		</fileset>
	</path>
	<path id="run.path.id">
		<path refid="lib.path.id" />
		<path location="${classes.dir}" />
	</path>


	<!-- setup ivy default configuration with some custom info -->
	<property name="ivy.local.default.root" value="${repository.dir}/local" />
	<property name="ivy.shared.default.root" value="${repository.dir}/shared" />

	<target name="resolve" depends="clean-lib, load-ivy"
		description="--> resolve and retrieve dependencies with ivy">
		<mkdir dir="${lib.dir}" />
		<!--
			not usually necessary, ivy creates the directory IF there are
			dependencies
		-->

		<!--
			the call to resolve is not mandatory, retrieve makes an implicit call
			if we don't
		-->
		<ivy:resolve file="${ivy.file}" />
		<ivy:retrieve
			pattern="${lib.dir}/[type]/[organization]/[module]/[artifact]-[revision].[ext]" />
	</target>

	<target name="report" depends="resolve"
		description="--> generates a report of dependencies">
		<ivy:report todir="${build.dir}" />
	</target>

	<target name="compile" depends="compile-src,compile-tests"
		description="--> compile all source code" />

        <target name="fudge-proto-present" depends="resolve">
                <available classname="org.fudgemsg.proto.AntTask" classpathref="lib.path.id" property="fudge.proto.present" />
                <available property="fudge.proto.gitignore.exists" file="${fudge.proto.gitIgnoreFlag}" />
        </target>

	<target name="fudge-proto-gitignore" depends="fudge-proto-present" unless="fudge.proto.gitignore.exists">
		<touch file="${fudge.proto.gitIgnoreFlag}" />
		<property name="fudge.proto.gitIgnore" value="true" />
	</target>

        <target name="fudge-proto-compile" depends="fudge-proto-gitignore" if="fudge.proto.present">
                 <path id="fudge.proto.project.path">
                         <dirset dir="${projects.dir}">
                                 <include name="**/src" />
                         </dirset>
                 </path>
                 <taskdef name="fudgeproto" classname="org.fudgemsg.proto.AntTask" classpathref="lib.path.id" />
                 <fudgeproto
                        srcdir="${src.dir}"
                        destdir="${src.dir}"
                        searchdir="${toString:fudge.proto.project.path}"
                        equals="${fudge.proto.equals}"
                        toString="${fudge.proto.toString}"
                        hashCode="${fudge.proto.hashCode}"
                        verbose="${build.verbose}"
                        fudgeContext="${fudge.proto.fudgeContext}"
                        rebuildAll="${fudge.proto.rebuildall}"
                        gitIgnore="${fudge.proto.gitIgnore}" />
        </target>

        <target name="fudge-proto" depends="fudge-proto-compile" 
                description="--> compile any Fudge .proto files">
        </target>

	<target name="compile-src" depends="fudge-proto"
		description="--> compile the main project files">
		<mkdir dir="${classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${classes.dir}"
			classpathref="lib.path.id" debug="${build.debug}" optimize="${build.optimize}"
                        memoryMaximumSize="512M" fork="true"
			verbose="${build.verbose}" listfiles="${build.listfiles}" />
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="javadoc" depends="load-ivy" description="--> build Javadocs for the project">
		<mkdir dir="${docs.dir}" />
		<mkdir dir="${docs.dir}/javadoc" />
		<javadoc sourcepath="${src.dir}" destdir="${docs.dir}/javadoc"
			classpathref="lib.path.id" author="false" windowtitle="${javadocs.windowtitle}"
			doctitle="${javadocs.doctitle}" bottom="${javadocs.footer}" />
	</target>

	<target name="compile-tests" description="--> compile the tests">
		<mkdir dir="${tests.classes.dir}" />
		<path id="tests.build.classpath.id">
			<path refid="lib.path.id" />
			<pathelement path="${classes.dir}" />
		</path>
		<javac srcdir="${tests.src.dir}" destdir="${tests.classes.dir}"
			classpathref="tests.build.classpath.id" debug="${build.debug}"
                        memoryMaximumSize="512M" fork="true"
			optimize="${build.optimize}" verbose="${build.verbose}" listfiles="${build.listfiles}" />
		<copy todir="${tests.classes.dir}">
			<fileset dir="${tests.src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>
	
	<property name="test.database.type" value="all"/>  <!-- derby, postgres, all. -->
	
	<target name="tests" depends="create-test-db,junit-batch,junit-report" description="--> run unit tests and generate report"/>
	
	<target name="create-test-db" if="dbscript.dir"> <!-- Use dbscript.dir to deduce that there is a test database to be created -->
		<taskdef name="dbtool" classname="com.opengamma.util.test.DBTool" classpathref="lib.path.id" />
		<dbtool createTestDb="${test.database.type}"
				basedir="${basedir}"/>
	</target>

	<target name="junit-batch" depends="compile-tests">
		<mkdir dir="${tests.junit.dir}/xml" />
		<!-- if junit.logback defines a class, use that as an arg to the JVM for logging. Otherwise, create a dummy arg (-Dcom.opengamma.ogbuild=0) -->
		<condition property="junit.logback.jvmarg" value="-Dlogback.configurationFile=${junit.logback}"><isset property="junit.logback" /></condition>
		<property name="junit.logback.jvmarg" value="-Dcom.opengamma.ogbuild=0" />
		<junit printSummary="true" fork="true" forkmode="perTest" maxmemory="${junit.maxheap}">
			<classpath>
				<path refid="lib.path.id" />
				<pathelement path="${classes.dir}" />
				<pathelement path="${tests.classes.dir}" />
				<pathelement path="${config.dir}" />
			</classpath>
			<jvmarg value="${junit.logback.jvmarg}" />
			<assertions>
				<enable />
			</assertions>
			<formatter type="xml" />
			<batchtest todir="${tests.junit.dir}/xml">
				<fileset dir="${tests.src.dir}" includes="**/*Test.java" />
				<!-- TODO: deal with interop, integration, etc -->
				<!--fileset dir="${tests.dir}/interop" includes="**/*Test.java" /-->
			</batchtest>
			<sysproperty key="test.properties" value="${basedir}/tests.properties"/> <!-- Read in TestProperties.java -->
			<sysproperty key="test.database.type" value="${test.database.type}"/> <!-- Read in HibernateTest.java -->
		</junit>
	</target>

	<target name="junit-report" depends="junit-batch">
                <mkdir dir="${tests.junit.dir}/html" />
                <mkdir dir="${tests.junit.dir}/xml" />
                <junitreport todir="${tests.junit.dir}/xml">
                        <fileset dir="${tests.junit.dir}/xml" includes="TEST-*.xml" />
                        <report todir="${tests.junit.dir}/html" />
                </junitreport>
	</target>

	<target name="run" depends="version, compile" description="--> compile and run the project">
		<java classpathref="run.path.id" classname="${main.class.name}" />
	</target>

	<target name="ivy-new-version" depends="load-ivy" unless="ivy.new.revision">
		<!-- default module version prefix value -->
		<property name="module.version.prefix" value="${module.version.target}-dev-b" />

		<!-- asks to ivy an available version number -->
		<ivy:info file="${ivy.file}" />
		<ivy:buildnumber organisation="${ivy.organisation}"
			module="${ivy.module}" revision="${module.version.prefix}"
			defaultBuildNumber="1" revSep="" />
	</target>

	<target name="local-version">
		<tstamp>
			<format property="now" pattern="yyyyMMddHHmmss" />
		</tstamp>
		<property name="ivy.new.revision" value="${module.version.target}-local-${now}" />
	</target>

	<target name="version" depends="ivy-new-version">
		<!-- create version file in classpath for later inclusion in jar -->
		<mkdir dir="${classes.dir}" />
		<echo message="version=${ivy.new.revision}" file="${classes.dir}/${ant.project.name}.properties"
			append="false" />

		<!-- load generated version properties file -->
		<property file="${classes.dir}/${ant.project.name}.properties" />
	</target>

	<target name="jar" depends="version, compile"
		description="--> make a jar file for this project">
		<jar destfile="${jar.file}">
			<fileset dir="${classes.dir}" />
			<fileset dir="${tests.classes.dir}" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Build-Version" value="${version}" />
				<attribute name="Main-Class" value="${main.class.name}" />
			</manifest>
		</jar>
	</target>

	<target name="src-jar" depends="version"
		description="--> make a source jar file for this project">
		<jar destfile="${src.jar.file}" compress="${jar.compress}">
			<fileset dir="${src.dir}" excludes="**/*.class" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Build-Version" value="${version}" />
			</manifest>
		</jar>
	</target>

	<target name="javadoc-jar" depends="version, javadoc"
		description="--> make a javadoc jar file for this project">
		<jar destfile="${javadocs.jar.file}" basedir="${docs.dir}/javadoc"
			compress="${jar.compress}" />
	</target>

	<target name="publish" depends="clean-build, jar"
		description="--> publish this project in the ivy repository">
		<ivy:publish artifactspattern="${build.dir}/[artifact].[ext]"
			resolver="shared" pubrevision="${version}" status="release" />
		<echo message="project ${ant.project.name} released with version ${version}" />
	</target>

	<target name="publish-local" depends="local-version, jar"
		description="--> publish this project in the local ivy repository">
		<ivy:publish artifactspattern="${build.dir}/[artifact].[ext]"
			resolver="local" pubrevision="${version}" pubdate="${now}" status="integration"
			forcedeliver="true" />
		<echo
			message="project ${ant.project.name} published locally with version ${version}" />
	</target>

	<target name="dist" depends="jar,src-jar,javadoc-jar">
		<mkdir dir="${dist.dir}" />
		<copy todir="${dist.dir}/${dist.name}-${version}" file="${basedir}/LICENSE.txt" failonerror="false"/>
		<copy todir="${dist.dir}/${dist.name}" file="${basedir}/README.txt" failonerror="false"/>
		<copy todir="${dist.dir}/${dist.name}" file="${jar.file}" />
		<copy todir="${dist.dir}/${dist.name}" file="${src.jar.file}" />
		<copy todir="${dist.dir}/${dist.name}" file="${javadocs.jar.file}" />
		<copy todir="${dist.dir}/${dist.name}/config">
			 <fileset dir="${basedir}/config"/>
		</copy>
		<copy todir="${dist.dir}/${dist.name}/scripts">
			 <fileset dir="${basedir}/scripts"/>
		</copy>
		<mkdir dir="${dist.dir}/${dist.name}/lib" />
		<ivy:retrieve pattern="${dist.dir}/${dist.name}/lib/[type]-[organization]-[module]-[artifact]-[revision].[ext]" />
	</target>

	<target name="tarball" depends="dist" description="--> generate a tarball for distribution">
		<tar destfile="${dist.dir}/${dist.name}-${version}.tar" basedir="${dist.dir}">
			<include name="${dist.name}/**/*" />
		</tar>
		<bzip2 src="${dist.dir}/${dist.name}-${version}.tar" destfile="${dist.dir}/${dist.name}-${version}.tar.bz2" />
	</target>

	<target name="zipfile" depends="dist" description="--> generate a zip file for distribution">
		<zip destfile="${dist.dir}/${dist.name}-${version}.zip" basedir="${dist.dir}">
			<include name="${dist.name}/**/*" />
		</zip>
	</target>

	<target name="clean-local" depends="load-ivy"
		description="--> cleans the local repository for the current module">
		<ivy:info file="${ivy.file}" />
		<delete dir="${ivy.local.default.root}/${ivy.organisation}/${ivy.module}" />
	</target>

	<target name="clean-lib"
		description="--> clean the project libraries directory (dependencies)">
		<delete includeemptydirs="true" dir="${lib.dir}" />
	</target>

	<target name="clean-build" description="--> clean the project build files">
		<delete includeemptydirs="true" dir="${build.dir}" />
		<delete includeemptydirs="true" dir="${tests.build.dir}" />
	</target>
	
	<target name="clean-dist" description="--> clean the project distribution files">
		<delete includeemptydirs="true" dir="${dist.dir}" />
	</target>

	<target name="clean-src" description="--> clean the project auto-generated source files (.gitignore'd ones)">
		<subant genericantfile="${common.dir}/gitignore.xml">
			<dirset dir="${src.dir}" />
		</subant>
		<delete file="${fudge.proto.gitIgnoreFlag}" />
	</target>
	
	<target name="clean" depends="clean-build, clean-lib, clean-dist, clean-src"
		description="--> clean the project" />
	
	<target name="run-hbm2ddl" depends="load-ivy,compile"
		description="--> Generate Hibernate schema from mapping files">
		<taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask"
			classpathref="lib.path.id" />
		<mkdir dir="${dbscript.dir}" />  
		<java classname="com.opengamma.util.test.DBTool" classpathref="lib.path.id" failonerror="true" fork="true">
			<arg value="--server=${jdbc.url}"/>
			<arg value="--user=${hibernate.connection.username}"/>
			<arg value="--password=${hibernate.connection.password}"/>
			<arg value="--create"/>
			<arg value="--database=blank"/>
		</java>
		<hibernatetool destdir="${dbscript.dir}" >
			<classpath>
				<path location="${classes.dir}" />
				<path location="${tests.classes.dir}" />
			</classpath>
			<configuration configurationfile="hibernate.cfg.xml"  propertyfile="build.properties"/>
			<hbm2ddl format="true" outputfilename="hbm2ddl-create-db.sql" />
		</hibernatetool>
	</target>

</project>
