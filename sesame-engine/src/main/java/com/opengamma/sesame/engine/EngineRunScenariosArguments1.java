/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.engine;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;
import com.opengamma.sesame.config.ViewConfig;
import com.opengamma.sesame.marketdata.MarketDataEnvironment;
import com.opengamma.sesame.marketdata.ScenarioMarketDataEnvironment;

/**
 * Encapsulates the arguments to {@link Engine#runView(ViewConfig, CalculationArguments, MarketDataEnvironment, List)}
 * so it can be invoked via REST.
 */
@BeanDefinition
public final class EngineRunScenariosArguments1 implements ImmutableBean {

  /** Configuration of the view defining the calculations. */
  @PropertyDefinition(validate = "notNull")
  private final ViewConfig _viewConfig;

  /** Arguments used when performing the calculations for the scenarios. */
  @PropertyDefinition(validate = "notNull")
  private final ScenarioCalculationArguments _calculationArguments;

  /**
   * Market data for running the calculations, one set for each scenario. The engine will try to provide any data
   * required by the calculations but not included in the environment.
   */
  @PropertyDefinition(validate = "notNull")
  private final ScenarioMarketDataEnvironment _marketData;

  /** Items in the portfolio (normally trades) which are the inputs to the calculations. */
  @PropertyDefinition(validate = "notNull")
  private final List<Object> _portfolio;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code EngineRunScenariosArguments1}.
   * @return the meta-bean, not null
   */
  public static EngineRunScenariosArguments1.Meta meta() {
    return EngineRunScenariosArguments1.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(EngineRunScenariosArguments1.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static EngineRunScenariosArguments1.Builder builder() {
    return new EngineRunScenariosArguments1.Builder();
  }

  private EngineRunScenariosArguments1(
      ViewConfig viewConfig,
      ScenarioCalculationArguments calculationArguments,
      ScenarioMarketDataEnvironment marketData,
      List<Object> portfolio) {
    JodaBeanUtils.notNull(viewConfig, "viewConfig");
    JodaBeanUtils.notNull(calculationArguments, "calculationArguments");
    JodaBeanUtils.notNull(marketData, "marketData");
    JodaBeanUtils.notNull(portfolio, "portfolio");
    this._viewConfig = viewConfig;
    this._calculationArguments = calculationArguments;
    this._marketData = marketData;
    this._portfolio = ImmutableList.copyOf(portfolio);
  }

  @Override
  public EngineRunScenariosArguments1.Meta metaBean() {
    return EngineRunScenariosArguments1.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets configuration of the view defining the calculations.
   * @return the value of the property, not null
   */
  public ViewConfig getViewConfig() {
    return _viewConfig;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets arguments used when performing the calculations for the scenarios.
   * @return the value of the property, not null
   */
  public ScenarioCalculationArguments getCalculationArguments() {
    return _calculationArguments;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets market data for running the calculations, one set for each scenario. The engine will try to provide any data
   * required by the calculations but not included in the environment.
   * @return the value of the property, not null
   */
  public ScenarioMarketDataEnvironment getMarketData() {
    return _marketData;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets items in the portfolio (normally trades) which are the inputs to the calculations.
   * @return the value of the property, not null
   */
  public List<Object> getPortfolio() {
    return _portfolio;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      EngineRunScenariosArguments1 other = (EngineRunScenariosArguments1) obj;
      return JodaBeanUtils.equal(getViewConfig(), other.getViewConfig()) &&
          JodaBeanUtils.equal(getCalculationArguments(), other.getCalculationArguments()) &&
          JodaBeanUtils.equal(getMarketData(), other.getMarketData()) &&
          JodaBeanUtils.equal(getPortfolio(), other.getPortfolio());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getViewConfig());
    hash = hash * 31 + JodaBeanUtils.hashCode(getCalculationArguments());
    hash = hash * 31 + JodaBeanUtils.hashCode(getMarketData());
    hash = hash * 31 + JodaBeanUtils.hashCode(getPortfolio());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("EngineRunScenariosArguments1{");
    buf.append("viewConfig").append('=').append(getViewConfig()).append(',').append(' ');
    buf.append("calculationArguments").append('=').append(getCalculationArguments()).append(',').append(' ');
    buf.append("marketData").append('=').append(getMarketData()).append(',').append(' ');
    buf.append("portfolio").append('=').append(JodaBeanUtils.toString(getPortfolio()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code EngineRunScenariosArguments1}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code viewConfig} property.
     */
    private final MetaProperty<ViewConfig> _viewConfig = DirectMetaProperty.ofImmutable(
        this, "viewConfig", EngineRunScenariosArguments1.class, ViewConfig.class);
    /**
     * The meta-property for the {@code calculationArguments} property.
     */
    private final MetaProperty<ScenarioCalculationArguments> _calculationArguments = DirectMetaProperty.ofImmutable(
        this, "calculationArguments", EngineRunScenariosArguments1.class, ScenarioCalculationArguments.class);
    /**
     * The meta-property for the {@code marketData} property.
     */
    private final MetaProperty<ScenarioMarketDataEnvironment> _marketData = DirectMetaProperty.ofImmutable(
        this, "marketData", EngineRunScenariosArguments1.class, ScenarioMarketDataEnvironment.class);
    /**
     * The meta-property for the {@code portfolio} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<Object>> _portfolio = DirectMetaProperty.ofImmutable(
        this, "portfolio", EngineRunScenariosArguments1.class, (Class) List.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "viewConfig",
        "calculationArguments",
        "marketData",
        "portfolio");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1970035271:  // viewConfig
          return _viewConfig;
        case -172471155:  // calculationArguments
          return _calculationArguments;
        case 1116764678:  // marketData
          return _marketData;
        case 1121781064:  // portfolio
          return _portfolio;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public EngineRunScenariosArguments1.Builder builder() {
      return new EngineRunScenariosArguments1.Builder();
    }

    @Override
    public Class<? extends EngineRunScenariosArguments1> beanType() {
      return EngineRunScenariosArguments1.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code viewConfig} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ViewConfig> viewConfig() {
      return _viewConfig;
    }

    /**
     * The meta-property for the {@code calculationArguments} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ScenarioCalculationArguments> calculationArguments() {
      return _calculationArguments;
    }

    /**
     * The meta-property for the {@code marketData} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ScenarioMarketDataEnvironment> marketData() {
      return _marketData;
    }

    /**
     * The meta-property for the {@code portfolio} property.
     * @return the meta-property, not null
     */
    public MetaProperty<List<Object>> portfolio() {
      return _portfolio;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1970035271:  // viewConfig
          return ((EngineRunScenariosArguments1) bean).getViewConfig();
        case -172471155:  // calculationArguments
          return ((EngineRunScenariosArguments1) bean).getCalculationArguments();
        case 1116764678:  // marketData
          return ((EngineRunScenariosArguments1) bean).getMarketData();
        case 1121781064:  // portfolio
          return ((EngineRunScenariosArguments1) bean).getPortfolio();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code EngineRunScenariosArguments1}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<EngineRunScenariosArguments1> {

    private ViewConfig _viewConfig;
    private ScenarioCalculationArguments _calculationArguments;
    private ScenarioMarketDataEnvironment _marketData;
    private List<Object> _portfolio = new ArrayList<Object>();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(EngineRunScenariosArguments1 beanToCopy) {
      this._viewConfig = beanToCopy.getViewConfig();
      this._calculationArguments = beanToCopy.getCalculationArguments();
      this._marketData = beanToCopy.getMarketData();
      this._portfolio = new ArrayList<Object>(beanToCopy.getPortfolio());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1970035271:  // viewConfig
          return _viewConfig;
        case -172471155:  // calculationArguments
          return _calculationArguments;
        case 1116764678:  // marketData
          return _marketData;
        case 1121781064:  // portfolio
          return _portfolio;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1970035271:  // viewConfig
          this._viewConfig = (ViewConfig) newValue;
          break;
        case -172471155:  // calculationArguments
          this._calculationArguments = (ScenarioCalculationArguments) newValue;
          break;
        case 1116764678:  // marketData
          this._marketData = (ScenarioMarketDataEnvironment) newValue;
          break;
        case 1121781064:  // portfolio
          this._portfolio = (List<Object>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public EngineRunScenariosArguments1 build() {
      return new EngineRunScenariosArguments1(
          _viewConfig,
          _calculationArguments,
          _marketData,
          _portfolio);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code viewConfig} property in the builder.
     * @param viewConfig  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder viewConfig(ViewConfig viewConfig) {
      JodaBeanUtils.notNull(viewConfig, "viewConfig");
      this._viewConfig = viewConfig;
      return this;
    }

    /**
     * Sets the {@code calculationArguments} property in the builder.
     * @param calculationArguments  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder calculationArguments(ScenarioCalculationArguments calculationArguments) {
      JodaBeanUtils.notNull(calculationArguments, "calculationArguments");
      this._calculationArguments = calculationArguments;
      return this;
    }

    /**
     * Sets the {@code marketData} property in the builder.
     * @param marketData  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder marketData(ScenarioMarketDataEnvironment marketData) {
      JodaBeanUtils.notNull(marketData, "marketData");
      this._marketData = marketData;
      return this;
    }

    /**
     * Sets the {@code portfolio} property in the builder.
     * @param portfolio  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder portfolio(List<Object> portfolio) {
      JodaBeanUtils.notNull(portfolio, "portfolio");
      this._portfolio = portfolio;
      return this;
    }

    /**
     * Sets the {@code portfolio} property in the builder
     * from an array of objects.
     * @param portfolio  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder portfolio(Object... portfolio) {
      return portfolio(Arrays.asList(portfolio));
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("EngineRunScenariosArguments1.Builder{");
      buf.append("viewConfig").append('=').append(JodaBeanUtils.toString(_viewConfig)).append(',').append(' ');
      buf.append("calculationArguments").append('=').append(JodaBeanUtils.toString(_calculationArguments)).append(',').append(' ');
      buf.append("marketData").append('=').append(JodaBeanUtils.toString(_marketData)).append(',').append(' ');
      buf.append("portfolio").append('=').append(JodaBeanUtils.toString(_portfolio));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
