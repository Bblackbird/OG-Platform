/**
 * Copyright (C) 2009 - 2010 by OpenGamma Inc.
 *
 * Please see distribution for license.
 */

namespace com.opengamma.financial.security {

  /**
   * Request for searching for historic securities.
   * <p>
   * A full security master implements historical storage of data.
   * History can be stored in two dimensions and this request provides searching.
   * <p>
   * The first historic dimension is the classic series of versions.
   * Each new version is stored in such a manor that previous versions can be accessed.
   * <p>
   * The second historic dimension is corrections.
   * A correction occurs when it is realized that the original data stored was incorrect.
   * A simple security master might simply replace the original version with the corrected value.
   * A full implementation will store the correction in such a manner that it is still possible
   * to obtain the value before the correction was made.
   * <p>
   * For example, a security added on Monday and updated on Thursday has two versions.
   * If it is realized on Friday that the version stored on Monday was incorrect, then a
   * correction may be applied. There are now two versions, the first of which has one correction.
   * This may continue, with multiple corrections allowed for each version.
   * <p>
   * Versions are represented by instants in the search.
   */
  message SecuritySearchHistoricRequest {
   
    /**
     * The request for paging, if omitted all matching items will be returned.
     */
    optional util.db.PagingRequest pagingRequest;
    
    /**
     * The object identifier to match. The unique identifier must contain a version.
     */
    optional id.UniqueIdentifier objectIdentifier;
   
    /**
     * The earliest instant to return, inclusive. If omitted will retrieve values starting from the earliest version.
     */
    optional datetime versionFrom;

    /**
     * The latest instant to return, exclusive. If omitted will retrieve values up to the latest version.
     */
    optional datetime versionTo;
    
    /**
     * Whether to return all the corrections of each version. True returns all data corrections, false returns the data as of the correction view instant.
     */
    required boolean allCorrections [default = false];

    /**
     * The instant that the data has been corrected to. This allows the data to be accessed before or after a specific correction. If omitted will retrieve the latest correction.
     */
    optional datetime correctedTo;
  
    binding Java { datetime "javax.time.Instant=javax.time.InstantProvider/toInstant"; }
  
  }

}

extern message com.opengamma.util.db.PagingRequest;