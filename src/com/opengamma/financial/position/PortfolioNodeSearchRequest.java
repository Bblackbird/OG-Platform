/**
 * Copyright (C) 2009 - 2010 by OpenGamma Inc.
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.position;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicMetaBean;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.id.UniqueIdentifier;
import com.opengamma.util.db.PagingRequest;

/**
 * Request for searching for nodes.
 */
@BeanDefinition
public class PortfolioNodeSearchRequest extends DirectBean {

  /**
   * The request for paging.
   * By default all matching items will be returned.
   */
  @PropertyDefinition
  private PagingRequest _pagingRequest = PagingRequest.ALL;
  /**
   * The portfolio unique identifier, null to search all portfolios.
   */
  @PropertyDefinition
  private UniqueIdentifier _portfolio;
  /**
   * The name, wildcards allowed, null to not match on name.
   */
  @PropertyDefinition
  private String _name;
  /**
   * The minimum number of positions, null for minimum of zero.
   */
  @PropertyDefinition
  private Integer _minPositions;
  /**
   * The maximum number of positions, null for no maximum.
   */
  @PropertyDefinition
  private Integer _maxPositions;

  /**
   * Creates an instance.
   */
  public PortfolioNodeSearchRequest() {
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code PortfolioNodeSearchRequest}.
   * @return the meta-bean, not null
   */
  public static PortfolioNodeSearchRequest.Meta meta() {
    return PortfolioNodeSearchRequest.Meta.INSTANCE;
  }

  @Override
  public PortfolioNodeSearchRequest.Meta metaBean() {
    return PortfolioNodeSearchRequest.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case -2092032669:  // pagingRequest
        return getPagingRequest();
      case 1121781064:  // portfolio
        return getPortfolio();
      case 3373707:  // name
        return getName();
      case 758252088:  // minPositions
        return getMinPositions();
      case 283826022:  // maxPositions
        return getMaxPositions();
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case -2092032669:  // pagingRequest
        setPagingRequest((PagingRequest) newValue);
        return;
      case 1121781064:  // portfolio
        setPortfolio((UniqueIdentifier) newValue);
        return;
      case 3373707:  // name
        setName((String) newValue);
        return;
      case 758252088:  // minPositions
        setMinPositions((Integer) newValue);
        return;
      case 283826022:  // maxPositions
        setMaxPositions((Integer) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the request for paging.
   * By default all matching items will be returned.
   * @return the value of the property
   */
  public PagingRequest getPagingRequest() {
    return _pagingRequest;
  }

  /**
   * Sets the request for paging.
   * By default all matching items will be returned.
   * @param pagingRequest  the new value of the property
   */
  public void setPagingRequest(PagingRequest pagingRequest) {
    this._pagingRequest = pagingRequest;
  }

  /**
   * Gets the the {@code pagingRequest} property.
   * By default all matching items will be returned.
   * @return the property, not null
   */
  public final Property<PagingRequest> pagingRequest() {
    return metaBean().pagingRequest().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the portfolio unique identifier, null to search all portfolios.
   * @return the value of the property
   */
  public UniqueIdentifier getPortfolio() {
    return _portfolio;
  }

  /**
   * Sets the portfolio unique identifier, null to search all portfolios.
   * @param portfolio  the new value of the property
   */
  public void setPortfolio(UniqueIdentifier portfolio) {
    this._portfolio = portfolio;
  }

  /**
   * Gets the the {@code portfolio} property.
   * @return the property, not null
   */
  public final Property<UniqueIdentifier> portfolio() {
    return metaBean().portfolio().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name, wildcards allowed, null to not match on name.
   * @return the value of the property
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets the name, wildcards allowed, null to not match on name.
   * @param name  the new value of the property
   */
  public void setName(String name) {
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the minimum number of positions, null for minimum of zero.
   * @return the value of the property
   */
  public Integer getMinPositions() {
    return _minPositions;
  }

  /**
   * Sets the minimum number of positions, null for minimum of zero.
   * @param minPositions  the new value of the property
   */
  public void setMinPositions(Integer minPositions) {
    this._minPositions = minPositions;
  }

  /**
   * Gets the the {@code minPositions} property.
   * @return the property, not null
   */
  public final Property<Integer> minPositions() {
    return metaBean().minPositions().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the maximum number of positions, null for no maximum.
   * @return the value of the property
   */
  public Integer getMaxPositions() {
    return _maxPositions;
  }

  /**
   * Sets the maximum number of positions, null for no maximum.
   * @param maxPositions  the new value of the property
   */
  public void setMaxPositions(Integer maxPositions) {
    this._maxPositions = maxPositions;
  }

  /**
   * Gets the the {@code maxPositions} property.
   * @return the property, not null
   */
  public final Property<Integer> maxPositions() {
    return metaBean().maxPositions().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code PortfolioNodeSearchRequest}.
   */
  public static class Meta extends BasicMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code pagingRequest} property.
     */
    private final MetaProperty<PagingRequest> _pagingRequest = DirectMetaProperty.ofReadWrite(this, "pagingRequest", PagingRequest.class);
    /**
     * The meta-property for the {@code portfolio} property.
     */
    private final MetaProperty<UniqueIdentifier> _portfolio = DirectMetaProperty.ofReadWrite(this, "portfolio", UniqueIdentifier.class);
    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(this, "name", String.class);
    /**
     * The meta-property for the {@code minPositions} property.
     */
    private final MetaProperty<Integer> _minPositions = DirectMetaProperty.ofReadWrite(this, "minPositions", Integer.class);
    /**
     * The meta-property for the {@code maxPositions} property.
     */
    private final MetaProperty<Integer> _maxPositions = DirectMetaProperty.ofReadWrite(this, "maxPositions", Integer.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings("unchecked")
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap();
      temp.put("pagingRequest", _pagingRequest);
      temp.put("portfolio", _portfolio);
      temp.put("name", _name);
      temp.put("minPositions", _minPositions);
      temp.put("maxPositions", _maxPositions);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public PortfolioNodeSearchRequest createBean() {
      return new PortfolioNodeSearchRequest();
    }

    @Override
    public Class<? extends PortfolioNodeSearchRequest> beanType() {
      return PortfolioNodeSearchRequest.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code pagingRequest} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<PagingRequest> pagingRequest() {
      return _pagingRequest;
    }

    /**
     * The meta-property for the {@code portfolio} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueIdentifier> portfolio() {
      return _portfolio;
    }

    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code minPositions} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> minPositions() {
      return _minPositions;
    }

    /**
     * The meta-property for the {@code maxPositions} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> maxPositions() {
      return _maxPositions;
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
