/**
 * Copyright (C) 2009 - 2010 by OpenGamma Inc.
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.position.master;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.time.Instant;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.PropertyReadWrite;
import org.joda.beans.impl.BasicMetaBean;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.google.common.collect.Maps;
import com.opengamma.engine.position.Portfolio;
import com.opengamma.id.UniqueIdentifier;
import com.opengamma.util.ArgumentChecker;

/**
 * A document used to pass a portfolio tree into and out of the position master.
 * <p>
 * The portfolio tree contains the portfolio and the node hierarchy.
 * To find the positions on a node, it must be individually retrieved.
 */
@BeanDefinition
public class PortfolioTreeDocument extends DirectBean {

  /**
   * The portfolio unique identifier.
   */
  @PropertyDefinition
  private UniqueIdentifier _portfolioId;
  /**
   * The instant that the portfolio is valid from.
   */
  @PropertyDefinition
  private Instant _validFromInstant;
  /**
   * The instant that the portfolio is valid to.
   */
  @PropertyDefinition
  private Instant _validToInstant;
  /**
   * The instant that the portfolio was last modified.
   */
  @PropertyDefinition
  private Instant _lastModifiedInstant;
  /**
   * The portfolio, containing the full tree but no positions.
   */
  @PropertyDefinition
  private Portfolio _portfolio;
  /**
   * The map of node unique identifier to the count of positions directly on that node.
   */
  @PropertyDefinition(readWrite = PropertyReadWrite.READ_ONLY)
  private Map<UniqueIdentifier, Integer> _positionCounts = Maps.newHashMap();

  /**
   * Creates an instance.
   */
  public PortfolioTreeDocument() {
  }

  /**
   * Creates an instance.
   * @param portfolio  the portfolio, not null
   */
  public PortfolioTreeDocument(final Portfolio portfolio) {
    ArgumentChecker.notNull(portfolio, "portfolio");
    setPortfolioId(portfolio.getUniqueIdentifier());
    setPortfolio(portfolio);
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code PortfolioTreeDocument}.
   * @return the meta-bean, not null
   */
  public static PortfolioTreeDocument.Meta meta() {
    return PortfolioTreeDocument.Meta.INSTANCE;
  }

  @Override
  public PortfolioTreeDocument.Meta metaBean() {
    return PortfolioTreeDocument.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case -5186429:  // portfolioId
        return getPortfolioId();
      case -3992261:  // validFromInstant
        return getValidFromInstant();
      case -1035122102:  // validToInstant
        return getValidToInstant();
      case 1792974178:  // lastModifiedInstant
        return getLastModifiedInstant();
      case 1121781064:  // portfolio
        return getPortfolio();
      case -2113727539:  // positionCounts
        return getPositionCounts();
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case -5186429:  // portfolioId
        setPortfolioId((UniqueIdentifier) newValue);
        return;
      case -3992261:  // validFromInstant
        setValidFromInstant((Instant) newValue);
        return;
      case -1035122102:  // validToInstant
        setValidToInstant((Instant) newValue);
        return;
      case 1792974178:  // lastModifiedInstant
        setLastModifiedInstant((Instant) newValue);
        return;
      case 1121781064:  // portfolio
        setPortfolio((Portfolio) newValue);
        return;
      case -2113727539:  // positionCounts
        throw new UnsupportedOperationException("Property cannot be written: positionCounts");
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the portfolio unique identifier.
   * @return the value of the property
   */
  public UniqueIdentifier getPortfolioId() {
    return _portfolioId;
  }

  /**
   * Sets the portfolio unique identifier.
   * @param portfolioId  the new value of the property
   */
  public void setPortfolioId(UniqueIdentifier portfolioId) {
    this._portfolioId = portfolioId;
  }

  /**
   * Gets the the {@code portfolioId} property.
   * @return the property, not null
   */
  public final Property<UniqueIdentifier> portfolioId() {
    return metaBean().portfolioId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the instant that the portfolio is valid from.
   * @return the value of the property
   */
  public Instant getValidFromInstant() {
    return _validFromInstant;
  }

  /**
   * Sets the instant that the portfolio is valid from.
   * @param validFromInstant  the new value of the property
   */
  public void setValidFromInstant(Instant validFromInstant) {
    this._validFromInstant = validFromInstant;
  }

  /**
   * Gets the the {@code validFromInstant} property.
   * @return the property, not null
   */
  public final Property<Instant> validFromInstant() {
    return metaBean().validFromInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the instant that the portfolio is valid to.
   * @return the value of the property
   */
  public Instant getValidToInstant() {
    return _validToInstant;
  }

  /**
   * Sets the instant that the portfolio is valid to.
   * @param validToInstant  the new value of the property
   */
  public void setValidToInstant(Instant validToInstant) {
    this._validToInstant = validToInstant;
  }

  /**
   * Gets the the {@code validToInstant} property.
   * @return the property, not null
   */
  public final Property<Instant> validToInstant() {
    return metaBean().validToInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the instant that the portfolio was last modified.
   * @return the value of the property
   */
  public Instant getLastModifiedInstant() {
    return _lastModifiedInstant;
  }

  /**
   * Sets the instant that the portfolio was last modified.
   * @param lastModifiedInstant  the new value of the property
   */
  public void setLastModifiedInstant(Instant lastModifiedInstant) {
    this._lastModifiedInstant = lastModifiedInstant;
  }

  /**
   * Gets the the {@code lastModifiedInstant} property.
   * @return the property, not null
   */
  public final Property<Instant> lastModifiedInstant() {
    return metaBean().lastModifiedInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the portfolio, containing the full tree but no positions.
   * @return the value of the property
   */
  public Portfolio getPortfolio() {
    return _portfolio;
  }

  /**
   * Sets the portfolio, containing the full tree but no positions.
   * @param portfolio  the new value of the property
   */
  public void setPortfolio(Portfolio portfolio) {
    this._portfolio = portfolio;
  }

  /**
   * Gets the the {@code portfolio} property.
   * @return the property, not null
   */
  public final Property<Portfolio> portfolio() {
    return metaBean().portfolio().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the map of node unique identifier to the count of positions directly on that node.
   * @return the value of the property
   */
  public Map<UniqueIdentifier, Integer> getPositionCounts() {
    return _positionCounts;
  }

  /**
   * Gets the the {@code positionCounts} property.
   * @return the property, not null
   */
  public final Property<Map<UniqueIdentifier, Integer>> positionCounts() {
    return metaBean().positionCounts().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code PortfolioTreeDocument}.
   */
  public static class Meta extends BasicMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code portfolioId} property.
     */
    private final MetaProperty<UniqueIdentifier> _portfolioId = DirectMetaProperty.ofReadWrite(this, "portfolioId", UniqueIdentifier.class);
    /**
     * The meta-property for the {@code validFromInstant} property.
     */
    private final MetaProperty<Instant> _validFromInstant = DirectMetaProperty.ofReadWrite(this, "validFromInstant", Instant.class);
    /**
     * The meta-property for the {@code validToInstant} property.
     */
    private final MetaProperty<Instant> _validToInstant = DirectMetaProperty.ofReadWrite(this, "validToInstant", Instant.class);
    /**
     * The meta-property for the {@code lastModifiedInstant} property.
     */
    private final MetaProperty<Instant> _lastModifiedInstant = DirectMetaProperty.ofReadWrite(this, "lastModifiedInstant", Instant.class);
    /**
     * The meta-property for the {@code portfolio} property.
     */
    private final MetaProperty<Portfolio> _portfolio = DirectMetaProperty.ofReadWrite(this, "portfolio", Portfolio.class);
    /**
     * The meta-property for the {@code positionCounts} property.
     */
    @SuppressWarnings("unchecked")
    private final MetaProperty<Map<UniqueIdentifier, Integer>> _positionCounts = DirectMetaProperty.ofReadOnly(this, "positionCounts", (Class) Map.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings("unchecked")
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap();
      temp.put("portfolioId", _portfolioId);
      temp.put("validFromInstant", _validFromInstant);
      temp.put("validToInstant", _validToInstant);
      temp.put("lastModifiedInstant", _lastModifiedInstant);
      temp.put("portfolio", _portfolio);
      temp.put("positionCounts", _positionCounts);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public PortfolioTreeDocument createBean() {
      return new PortfolioTreeDocument();
    }

    @Override
    public Class<? extends PortfolioTreeDocument> beanType() {
      return PortfolioTreeDocument.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code portfolioId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueIdentifier> portfolioId() {
      return _portfolioId;
    }

    /**
     * The meta-property for the {@code validFromInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> validFromInstant() {
      return _validFromInstant;
    }

    /**
     * The meta-property for the {@code validToInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> validToInstant() {
      return _validToInstant;
    }

    /**
     * The meta-property for the {@code lastModifiedInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> lastModifiedInstant() {
      return _lastModifiedInstant;
    }

    /**
     * The meta-property for the {@code portfolio} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Portfolio> portfolio() {
      return _portfolio;
    }

    /**
     * The meta-property for the {@code positionCounts} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Map<UniqueIdentifier, Integer>> positionCounts() {
      return _positionCounts;
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
