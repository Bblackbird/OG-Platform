/**
 * Copyright (C) 2009 - 2010 by OpenGamma Inc.
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.position.master;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.time.Instant;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicMetaBean;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.id.UniqueIdentifier;
import com.opengamma.util.ArgumentChecker;

/**
 * Request for getting a portfolio node with all children and positions.
 */
@BeanDefinition
public class FullPortfolioNodeGetRequest extends DirectBean {

  /**
   * The portfolio node identifier.
   * <p>
   * The object identifier part of the unique identifier is used to identify the correct node.
   * The version part is used to identify the required version in conjunction with the instants.
   * <p>
   * The implementation may choose to store the instants in the identifier.
   * If this is the case, then if an instant is null then the version/correction encoded in
   * the identifier will be used.
   * In all other cases, the instants override the identifier version, with a null instant
   * indicating the current instant.
   */
  @PropertyDefinition
  private UniqueIdentifier _portfolioNodeId;
  /**
   * The instant to search for a version at.
   * See the portfolioNodeId property for details of how null is handled.
   */
  @PropertyDefinition
  private Instant _versionAsOfInstant;
  /**
   * The instant to search for corrections for.
   * See the portfolioNodeId property for details of how null is handled.
   */
  @PropertyDefinition
  private Instant _correctedToInstant;

  /**
   * Creates an instance.
   */
  public FullPortfolioNodeGetRequest() {
  }

  /**
   * Creates an instance.
   * @param uid  the node identifier, may be null
   */
  public FullPortfolioNodeGetRequest(final UniqueIdentifier uid) {
    setPortfolioNodeId(uid);
  }

  /**
   * Creates an instance retrieving the node at a specific instant.
   * @param uid  the node identifier, may be null
   * @param versionAsOfInstant  the instant to search for a version at, may be null
   * @param correctedToInstant  the instant to search for corrections for, may be null
   */
  public FullPortfolioNodeGetRequest(final UniqueIdentifier uid, final Instant versionAsOfInstant, final Instant correctedToInstant) {
    setPortfolioNodeId(uid);
    setVersionAsOfInstant(versionAsOfInstant);
    setCorrectedToInstant(correctedToInstant);
  }

  //-------------------------------------------------------------------------
  /**
   * Checks that this request is valid.
   */
  public void checkValid() {
    ArgumentChecker.notNull(getPortfolioNodeId(), "portfolioNodeId");
  }

  /**
   * Checks if this is an instant based search.
   * @return true if at least one instant is specified, or the identifier is unversioned
   */
  public boolean isInstantBasedSearch() {
    return getVersionAsOfInstant() != null || getCorrectedToInstant() != null || getPortfolioNodeId().isLatest() == false;
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code FullPortfolioNodeGetRequest}.
   * @return the meta-bean, not null
   */
  public static FullPortfolioNodeGetRequest.Meta meta() {
    return FullPortfolioNodeGetRequest.Meta.INSTANCE;
  }

  @Override
  public FullPortfolioNodeGetRequest.Meta metaBean() {
    return FullPortfolioNodeGetRequest.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case -731178459:  // portfolioNodeId
        return getPortfolioNodeId();
      case 598802432:  // versionAsOfInstant
        return getVersionAsOfInstant();
      case -28367267:  // correctedToInstant
        return getCorrectedToInstant();
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case -731178459:  // portfolioNodeId
        setPortfolioNodeId((UniqueIdentifier) newValue);
        return;
      case 598802432:  // versionAsOfInstant
        setVersionAsOfInstant((Instant) newValue);
        return;
      case -28367267:  // correctedToInstant
        setCorrectedToInstant((Instant) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the portfolio node identifier.
   * <p>
   * The object identifier part of the unique identifier is used to identify the correct node.
   * The version part is used to identify the required version in conjunction with the instants.
   * <p>
   * The implementation may choose to store the instants in the identifier.
   * If this is the case, then if an instant is null then the version/correction encoded in
   * the identifier will be used.
   * In all other cases, the instants override the identifier version, with a null instant
   * indicating the current instant.
   * @return the value of the property
   */
  public UniqueIdentifier getPortfolioNodeId() {
    return _portfolioNodeId;
  }

  /**
   * Sets the portfolio node identifier.
   * <p>
   * The object identifier part of the unique identifier is used to identify the correct node.
   * The version part is used to identify the required version in conjunction with the instants.
   * <p>
   * The implementation may choose to store the instants in the identifier.
   * If this is the case, then if an instant is null then the version/correction encoded in
   * the identifier will be used.
   * In all other cases, the instants override the identifier version, with a null instant
   * indicating the current instant.
   * @param portfolioNodeId  the new value of the property
   */
  public void setPortfolioNodeId(UniqueIdentifier portfolioNodeId) {
    this._portfolioNodeId = portfolioNodeId;
  }

  /**
   * Gets the the {@code portfolioNodeId} property.
   * <p>
   * The object identifier part of the unique identifier is used to identify the correct node.
   * The version part is used to identify the required version in conjunction with the instants.
   * <p>
   * The implementation may choose to store the instants in the identifier.
   * If this is the case, then if an instant is null then the version/correction encoded in
   * the identifier will be used.
   * In all other cases, the instants override the identifier version, with a null instant
   * indicating the current instant.
   * @return the property, not null
   */
  public final Property<UniqueIdentifier> portfolioNodeId() {
    return metaBean().portfolioNodeId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the instant to search for a version at.
   * See the portfolioNodeId property for details of how null is handled.
   * @return the value of the property
   */
  public Instant getVersionAsOfInstant() {
    return _versionAsOfInstant;
  }

  /**
   * Sets the instant to search for a version at.
   * See the portfolioNodeId property for details of how null is handled.
   * @param versionAsOfInstant  the new value of the property
   */
  public void setVersionAsOfInstant(Instant versionAsOfInstant) {
    this._versionAsOfInstant = versionAsOfInstant;
  }

  /**
   * Gets the the {@code versionAsOfInstant} property.
   * See the portfolioNodeId property for details of how null is handled.
   * @return the property, not null
   */
  public final Property<Instant> versionAsOfInstant() {
    return metaBean().versionAsOfInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the instant to search for corrections for.
   * See the portfolioNodeId property for details of how null is handled.
   * @return the value of the property
   */
  public Instant getCorrectedToInstant() {
    return _correctedToInstant;
  }

  /**
   * Sets the instant to search for corrections for.
   * See the portfolioNodeId property for details of how null is handled.
   * @param correctedToInstant  the new value of the property
   */
  public void setCorrectedToInstant(Instant correctedToInstant) {
    this._correctedToInstant = correctedToInstant;
  }

  /**
   * Gets the the {@code correctedToInstant} property.
   * See the portfolioNodeId property for details of how null is handled.
   * @return the property, not null
   */
  public final Property<Instant> correctedToInstant() {
    return metaBean().correctedToInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FullPortfolioNodeGetRequest}.
   */
  public static class Meta extends BasicMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code portfolioNodeId} property.
     */
    private final MetaProperty<UniqueIdentifier> _portfolioNodeId = DirectMetaProperty.ofReadWrite(this, "portfolioNodeId", UniqueIdentifier.class);
    /**
     * The meta-property for the {@code versionAsOfInstant} property.
     */
    private final MetaProperty<Instant> _versionAsOfInstant = DirectMetaProperty.ofReadWrite(this, "versionAsOfInstant", Instant.class);
    /**
     * The meta-property for the {@code correctedToInstant} property.
     */
    private final MetaProperty<Instant> _correctedToInstant = DirectMetaProperty.ofReadWrite(this, "correctedToInstant", Instant.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings("unchecked")
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap();
      temp.put("portfolioNodeId", _portfolioNodeId);
      temp.put("versionAsOfInstant", _versionAsOfInstant);
      temp.put("correctedToInstant", _correctedToInstant);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public FullPortfolioNodeGetRequest createBean() {
      return new FullPortfolioNodeGetRequest();
    }

    @Override
    public Class<? extends FullPortfolioNodeGetRequest> beanType() {
      return FullPortfolioNodeGetRequest.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code portfolioNodeId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueIdentifier> portfolioNodeId() {
      return _portfolioNodeId;
    }

    /**
     * The meta-property for the {@code versionAsOfInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> versionAsOfInstant() {
      return _versionAsOfInstant;
    }

    /**
     * The meta-property for the {@code correctedToInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> correctedToInstant() {
      return _correctedToInstant;
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
