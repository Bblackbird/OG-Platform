/**
 * Copyright (C) 2009 - 2010 by OpenGamma Inc.
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.position;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.time.Instant;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicMetaBean;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.id.UniqueIdentifier;

/**
 * Request for getting a portfolio node with all children and positions.
 */
@BeanDefinition
public class FullPortfolioNodeGetRequest extends DirectBean {

  /**
   * The portfolio node identifier.
   * Any identifier version specified will be overridden by the instants.
   */
  @PropertyDefinition
  private UniqueIdentifier _portfolioNodeUid;
  /**
   * The instant representing the version to obtain.
   * Null is treated as the latest version.
   */
  @PropertyDefinition
  private Instant _versionInstant;
  /**
   * The instant representing the version has been corrected to.
   * Null is treated as the latest correction.
   */
  @PropertyDefinition
  private Instant _correctedToInstant;

  /**
   * Creates an instance.
   */
  public FullPortfolioNodeGetRequest() {
  }

  /**
   * Creates an instance.
   * @param uid  the portfolio node unique identifier
   */
  public FullPortfolioNodeGetRequest(UniqueIdentifier uid) {
    setPortfolioNodeUid(uid);
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code PortfolioNodeGetRequest}.
   * @return the meta-bean, not null
   */
  public static FullPortfolioNodeGetRequest.Meta meta() {
    return FullPortfolioNodeGetRequest.Meta.INSTANCE;
  }

  @Override
  public FullPortfolioNodeGetRequest.Meta metaBean() {
    return FullPortfolioNodeGetRequest.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case -1191683962:  // portfolioNodeUid
        return getPortfolioNodeUid();
      case 2084044265:  // versionInstant
        return getVersionInstant();
      case -28367267:  // correctedToInstant
        return getCorrectedToInstant();
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case -1191683962:  // portfolioNodeUid
        setPortfolioNodeUid((UniqueIdentifier) newValue);
        return;
      case 2084044265:  // versionInstant
        setVersionInstant((Instant) newValue);
        return;
      case -28367267:  // correctedToInstant
        setCorrectedToInstant((Instant) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the portfolio node identifier.
   * Any identifier version specified will be overridden by the instants.
   * @return the value of the property
   */
  public UniqueIdentifier getPortfolioNodeUid() {
    return _portfolioNodeUid;
  }

  /**
   * Sets the portfolio node identifier.
   * Any identifier version specified will be overridden by the instants.
   * @param portfolioNodeUid  the new value of the property
   */
  public void setPortfolioNodeUid(UniqueIdentifier portfolioNodeUid) {
    this._portfolioNodeUid = portfolioNodeUid;
  }

  /**
   * Gets the the {@code portfolioNodeUid} property.
   * Any identifier version specified will be overridden by the instants.
   * @return the property, not null
   */
  public final Property<UniqueIdentifier> portfolioNodeUid() {
    return metaBean().portfolioNodeUid().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the instant representing the version to obtain.
   * Null is treated as the latest version.
   * @return the value of the property
   */
  public Instant getVersionInstant() {
    return _versionInstant;
  }

  /**
   * Sets the instant representing the version to obtain.
   * Null is treated as the latest version.
   * @param versionInstant  the new value of the property
   */
  public void setVersionInstant(Instant versionInstant) {
    this._versionInstant = versionInstant;
  }

  /**
   * Gets the the {@code versionInstant} property.
   * Null is treated as the latest version.
   * @return the property, not null
   */
  public final Property<Instant> versionInstant() {
    return metaBean().versionInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the instant representing the version has been corrected to.
   * Null is treated as the latest correction.
   * @return the value of the property
   */
  public Instant getCorrectedToInstant() {
    return _correctedToInstant;
  }

  /**
   * Sets the instant representing the version has been corrected to.
   * Null is treated as the latest correction.
   * @param correctedToInstant  the new value of the property
   */
  public void setCorrectedToInstant(Instant correctedToInstant) {
    this._correctedToInstant = correctedToInstant;
  }

  /**
   * Gets the the {@code correctedToInstant} property.
   * Null is treated as the latest correction.
   * @return the property, not null
   */
  public final Property<Instant> correctedToInstant() {
    return metaBean().correctedToInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code PortfolioNodeGetRequest}.
   */
  public static class Meta extends BasicMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code portfolioNodeUid} property.
     */
    private final MetaProperty<UniqueIdentifier> _portfolioNodeUid = DirectMetaProperty.ofReadWrite(this, "portfolioNodeUid", UniqueIdentifier.class);
    /**
     * The meta-property for the {@code versionInstant} property.
     */
    private final MetaProperty<Instant> _versionInstant = DirectMetaProperty.ofReadWrite(this, "versionInstant", Instant.class);
    /**
     * The meta-property for the {@code correctedToInstant} property.
     */
    private final MetaProperty<Instant> _correctedToInstant = DirectMetaProperty.ofReadWrite(this, "correctedToInstant", Instant.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings("unchecked")
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap();
      temp.put("portfolioNodeUid", _portfolioNodeUid);
      temp.put("versionInstant", _versionInstant);
      temp.put("correctedToInstant", _correctedToInstant);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public FullPortfolioNodeGetRequest createBean() {
      return new FullPortfolioNodeGetRequest();
    }

    @Override
    public Class<? extends FullPortfolioNodeGetRequest> beanType() {
      return FullPortfolioNodeGetRequest.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code portfolioNodeUid} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueIdentifier> portfolioNodeUid() {
      return _portfolioNodeUid;
    }

    /**
     * The meta-property for the {@code versionInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> versionInstant() {
      return _versionInstant;
    }

    /**
     * The meta-property for the {@code correctedToInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> correctedToInstant() {
      return _correctedToInstant;
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
