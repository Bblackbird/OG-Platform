/**
 * Copyright (C) 2009 - 2010 by OpenGamma Inc.
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.position;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.time.Instant;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicMetaBean;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectMetaProperty;

import com.opengamma.engine.position.Portfolio;
import com.opengamma.id.UniqueIdentifier;
import com.opengamma.util.ArgumentChecker;

/**
 * A document used to pass a portfolio into and out of the position master.
 * <p>
 * This document contains only the portfolio and the root node without any root node positions.
 * The full tree of nodes and all positions are not included.
 */
@BeanDefinition
public class PortfolioDocument extends DirectBean {

  /**
   * The portfolio unique identifier.
   */
  @PropertyDefinition
  private UniqueIdentifier _portfolioUid;
  /**
   * The instant that the portfolio is valid from.
   */
  @PropertyDefinition
  private Instant _validFromInstant;
  /**
   * The instant that the portfolio is valid to.
   */
  @PropertyDefinition
  private Instant _validToInstant;
  /**
   * The instant that the portfolio was last modified.
   */
  @PropertyDefinition
  private Instant _lastModifiedInstant;
  /**
   * The portfolio.
   */
  @PropertyDefinition
  private Portfolio _portfolio;
  /**
   * The total number of positions within the portfolio.
   */
  @PropertyDefinition
  private Integer _totalPositions;

  /**
   * Creates an instance.
   */
  public PortfolioDocument() {
  }

  /**
   * Creates an instance.
   * @param portfolio  the portfolio, not null
   */
  public PortfolioDocument(final Portfolio portfolio) {
    ArgumentChecker.notNull(portfolio, "portfolio");
    setPortfolioUid(portfolio.getUniqueIdentifier());
    setPortfolio(portfolio);
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code PortfolioDocument}.
   * @return the meta-bean, not null
   */
  public static PortfolioDocument.Meta meta() {
    return PortfolioDocument.Meta.INSTANCE;
  }

  @Override
  public PortfolioDocument.Meta metaBean() {
    return PortfolioDocument.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName) {
    switch (propertyName.hashCode()) {
      case -160767512:  // portfolioUid
        return getPortfolioUid();
      case -3992261:  // validFromInstant
        return getValidFromInstant();
      case -1035122102:  // validToInstant
        return getValidToInstant();
      case 1792974178:  // lastModifiedInstant
        return getLastModifiedInstant();
      case 1121781064:  // portfolio
        return getPortfolio();
      case -1767621242:  // totalPositions
        return getTotalPositions();
    }
    return super.propertyGet(propertyName);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue) {
    switch (propertyName.hashCode()) {
      case -160767512:  // portfolioUid
        setPortfolioUid((UniqueIdentifier) newValue);
        return;
      case -3992261:  // validFromInstant
        setValidFromInstant((Instant) newValue);
        return;
      case -1035122102:  // validToInstant
        setValidToInstant((Instant) newValue);
        return;
      case 1792974178:  // lastModifiedInstant
        setLastModifiedInstant((Instant) newValue);
        return;
      case 1121781064:  // portfolio
        setPortfolio((Portfolio) newValue);
        return;
      case -1767621242:  // totalPositions
        setTotalPositions((Integer) newValue);
        return;
    }
    super.propertySet(propertyName, newValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the portfolio unique identifier.
   * @return the value of the property
   */
  public UniqueIdentifier getPortfolioUid() {
    return _portfolioUid;
  }

  /**
   * Sets the portfolio unique identifier.
   * @param portfolioUid  the new value of the property
   */
  public void setPortfolioUid(UniqueIdentifier portfolioUid) {
    this._portfolioUid = portfolioUid;
  }

  /**
   * Gets the the {@code portfolioUid} property.
   * @return the property, not null
   */
  public final Property<UniqueIdentifier> portfolioUid() {
    return metaBean().portfolioUid().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the instant that the portfolio is valid from.
   * @return the value of the property
   */
  public Instant getValidFromInstant() {
    return _validFromInstant;
  }

  /**
   * Sets the instant that the portfolio is valid from.
   * @param validFromInstant  the new value of the property
   */
  public void setValidFromInstant(Instant validFromInstant) {
    this._validFromInstant = validFromInstant;
  }

  /**
   * Gets the the {@code validFromInstant} property.
   * @return the property, not null
   */
  public final Property<Instant> validFromInstant() {
    return metaBean().validFromInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the instant that the portfolio is valid to.
   * @return the value of the property
   */
  public Instant getValidToInstant() {
    return _validToInstant;
  }

  /**
   * Sets the instant that the portfolio is valid to.
   * @param validToInstant  the new value of the property
   */
  public void setValidToInstant(Instant validToInstant) {
    this._validToInstant = validToInstant;
  }

  /**
   * Gets the the {@code validToInstant} property.
   * @return the property, not null
   */
  public final Property<Instant> validToInstant() {
    return metaBean().validToInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the instant that the portfolio was last modified.
   * @return the value of the property
   */
  public Instant getLastModifiedInstant() {
    return _lastModifiedInstant;
  }

  /**
   * Sets the instant that the portfolio was last modified.
   * @param lastModifiedInstant  the new value of the property
   */
  public void setLastModifiedInstant(Instant lastModifiedInstant) {
    this._lastModifiedInstant = lastModifiedInstant;
  }

  /**
   * Gets the the {@code lastModifiedInstant} property.
   * @return the property, not null
   */
  public final Property<Instant> lastModifiedInstant() {
    return metaBean().lastModifiedInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the portfolio.
   * @return the value of the property
   */
  public Portfolio getPortfolio() {
    return _portfolio;
  }

  /**
   * Sets the portfolio.
   * @param portfolio  the new value of the property
   */
  public void setPortfolio(Portfolio portfolio) {
    this._portfolio = portfolio;
  }

  /**
   * Gets the the {@code portfolio} property.
   * @return the property, not null
   */
  public final Property<Portfolio> portfolio() {
    return metaBean().portfolio().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the total number of positions within the portfolio.
   * @return the value of the property
   */
  public Integer getTotalPositions() {
    return _totalPositions;
  }

  /**
   * Sets the total number of positions within the portfolio.
   * @param totalPositions  the new value of the property
   */
  public void setTotalPositions(Integer totalPositions) {
    this._totalPositions = totalPositions;
  }

  /**
   * Gets the the {@code totalPositions} property.
   * @return the property, not null
   */
  public final Property<Integer> totalPositions() {
    return metaBean().totalPositions().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code PortfolioDocument}.
   */
  public static class Meta extends BasicMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code portfolioUid} property.
     */
    private final MetaProperty<UniqueIdentifier> _portfolioUid = DirectMetaProperty.ofReadWrite(this, "portfolioUid", UniqueIdentifier.class);
    /**
     * The meta-property for the {@code validFromInstant} property.
     */
    private final MetaProperty<Instant> _validFromInstant = DirectMetaProperty.ofReadWrite(this, "validFromInstant", Instant.class);
    /**
     * The meta-property for the {@code validToInstant} property.
     */
    private final MetaProperty<Instant> _validToInstant = DirectMetaProperty.ofReadWrite(this, "validToInstant", Instant.class);
    /**
     * The meta-property for the {@code lastModifiedInstant} property.
     */
    private final MetaProperty<Instant> _lastModifiedInstant = DirectMetaProperty.ofReadWrite(this, "lastModifiedInstant", Instant.class);
    /**
     * The meta-property for the {@code portfolio} property.
     */
    private final MetaProperty<Portfolio> _portfolio = DirectMetaProperty.ofReadWrite(this, "portfolio", Portfolio.class);
    /**
     * The meta-property for the {@code totalPositions} property.
     */
    private final MetaProperty<Integer> _totalPositions = DirectMetaProperty.ofReadWrite(this, "totalPositions", Integer.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map;

    @SuppressWarnings("unchecked")
    protected Meta() {
      LinkedHashMap temp = new LinkedHashMap();
      temp.put("portfolioUid", _portfolioUid);
      temp.put("validFromInstant", _validFromInstant);
      temp.put("validToInstant", _validToInstant);
      temp.put("lastModifiedInstant", _lastModifiedInstant);
      temp.put("portfolio", _portfolio);
      temp.put("totalPositions", _totalPositions);
      _map = Collections.unmodifiableMap(temp);
    }

    @Override
    public PortfolioDocument createBean() {
      return new PortfolioDocument();
    }

    @Override
    public Class<? extends PortfolioDocument> beanType() {
      return PortfolioDocument.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code portfolioUid} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueIdentifier> portfolioUid() {
      return _portfolioUid;
    }

    /**
     * The meta-property for the {@code validFromInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> validFromInstant() {
      return _validFromInstant;
    }

    /**
     * The meta-property for the {@code validToInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> validToInstant() {
      return _validToInstant;
    }

    /**
     * The meta-property for the {@code lastModifiedInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> lastModifiedInstant() {
      return _lastModifiedInstant;
    }

    /**
     * The meta-property for the {@code portfolio} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Portfolio> portfolio() {
      return _portfolio;
    }

    /**
     * The meta-property for the {@code totalPositions} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> totalPositions() {
      return _totalPositions;
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
