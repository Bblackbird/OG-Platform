/**
 * Copyright (C) 2009 - 2010 by OpenGamma Inc.
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.convention;

import static com.opengamma.id.IdentificationScheme.BLOOMBERG_TICKER;

import java.util.ArrayList;
import java.util.Collection;

import com.opengamma.financial.convention.businessday.BusinessDayConvention;
import com.opengamma.financial.convention.businessday.BusinessDayConventionFactory;
import com.opengamma.financial.convention.daycount.DayCount;
import com.opengamma.financial.convention.daycount.DayCountFactory;
import com.opengamma.financial.convention.frequency.Frequency;
import com.opengamma.financial.convention.frequency.SimpleFrequencyFactory;
import com.opengamma.id.IdentificationScheme;
import com.opengamma.id.Identifier;
import com.opengamma.id.IdentifierBundle;
import com.opengamma.id.IdentifierBundleMapper;
import com.opengamma.id.UniqueIdentifier;
/**
 * An in-memory, statically initialized master for convention bundles and their meta-data
 */
public class InMemoryConventionBundleMaster implements ConventionBundleMaster {
  /**
   * IdentificationScheme to use when specifying rates with simple descriptions e.g. 'LIBOR O/N', 'LIBOR 1w' etc.
   */
  public static final IdentificationScheme SIMPLE_NAME_SCHEME = new IdentificationScheme("Reference Rate Simple Name");
  
  /**
   * IdentificationScheme of the unique identifiers generated by this repository.
   */
  public static final IdentificationScheme IN_MEMORY_UNIQUE_SCHEME = new IdentificationScheme("In-memory Reference Rate unique");
  
  private IdentifierBundleMapper<ConventionBundle> _mapper = new IdentifierBundleMapper<ConventionBundle>(IN_MEMORY_UNIQUE_SCHEME.getName());
  
  public InMemoryConventionBundleMaster() {
    //CSOFF
    // NOTE THESE ONLY APPLY TO US LIBOR RATES
    BusinessDayConvention modified = BusinessDayConventionFactory.INSTANCE.getBusinessDayConvention("Modified");
    BusinessDayConvention following = BusinessDayConventionFactory.INSTANCE.getBusinessDayConvention("Following");
    DayCount act360 = DayCountFactory.INSTANCE.getDayCount("Actual/360");
    Frequency freq = null;
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US00O/N Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR O/N")), "LIBOR O/N", act360, following, freq, 2);
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US0001W Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 1w")), "LIBOR 1w", act360, following, freq, 2);
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US0002W Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 2w")), "LIBOR 2w", act360, following, freq, 2);
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US0001M Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 1m")), "LIBOR 1m", act360, modified, freq, 2);
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US0002M Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 2m")), "LIBOR 2m", act360, modified, freq, 2);
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US0003M Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 3m")), "LIBOR 3m", act360, modified, freq, 2);
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US0004M Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 4m")), "LIBOR 4m", act360, modified, freq, 2);
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US0005M Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 5m")), "LIBOR 5m", act360, modified, freq, 2);
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US0006M Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 6m")), "LIBOR 6m", act360, modified, freq, 2);
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US0007M Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 7m")), "LIBOR 7m", act360, modified, freq, 2);
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US0008M Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 8m")), "LIBOR 8m", act360, modified, freq, 2);
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US0009M Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 9m")), "LIBOR 9m", act360, modified, freq, 2);
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US0010M Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 10m")), "LIBOR 10m", act360, modified, freq, 2);
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US0011M Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 11m")), "LIBOR 11m", act360, modified, freq, 2);
    addConventionBundle(IdentifierBundle.of(Identifier.of(BLOOMBERG_TICKER, "US0012M Index"), Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 12m")), "LIBOR 12m", act360, modified, freq, 2);
    
    DayCount thirty360 = DayCountFactory.INSTANCE.getDayCount("30/360");
    Frequency semiAnnual = SimpleFrequencyFactory.INSTANCE.getFrequency(Frequency.SEMI_ANNUAL_NAME);
    Frequency quarterly = SimpleFrequencyFactory.INSTANCE.getFrequency(Frequency.QUARTERLY_NAME);
    addConventionBundle(IdentifierBundle.of(Identifier.of(SIMPLE_NAME_SCHEME, "USD_SWAP")), "USD_SWAP", thirty360, following, semiAnnual, 2, act360, following, quarterly, 2, Identifier.of(SIMPLE_NAME_SCHEME, "LIBOR 3m") );
  }
  
  @Override
  public synchronized UniqueIdentifier addConventionBundle(IdentifierBundle bundle, String name, DayCount dayCount,
                                                           BusinessDayConvention businessDayConvention, Frequency frequency, 
                                                           int settlementDays) {
    ConventionBundleImpl refRate = new ConventionBundleImpl(bundle, name, dayCount, businessDayConvention, frequency, settlementDays);
    UniqueIdentifier uid = _mapper.add(bundle, refRate);
    refRate.setUniqueIdentifier(uid);
    return uid;
  }
  
  @Override
  public synchronized UniqueIdentifier addConventionBundle(IdentifierBundle bundle, String name, 
                                                           DayCount swapFixedLegDayCount, BusinessDayConvention swapFixedLegBusinessDayConvention, Frequency swapFixedLegFrequency, Integer swapFixedLegSettlementDays,
                                                           DayCount swapFloatingLegDayCount, BusinessDayConvention swapFloatingLegBusinessDayConvention, Frequency swapFloatingLegFrequency, Integer swapFloatingLegSettlementDays,
                                                           Identifier swapFloatingLegInitialRate) {
    ConventionBundleImpl refRate = new ConventionBundleImpl(bundle, name, swapFixedLegDayCount, swapFixedLegBusinessDayConvention, swapFixedLegFrequency, swapFixedLegSettlementDays,
                                                            swapFloatingLegDayCount, swapFloatingLegBusinessDayConvention, swapFloatingLegFrequency, swapFloatingLegSettlementDays, swapFloatingLegInitialRate);
    UniqueIdentifier uid = _mapper.add(bundle, refRate);
    refRate.setUniqueIdentifier(uid);
    return uid;
  }

  @Override
  public ConventionBundleDocument getConventionBundle(UniqueIdentifier uniqueIdentifier) {
    return new ConventionBundleDocument(_mapper.get(uniqueIdentifier));
  }
  
  @Override
  public ConventionBundleSearchResult searchConventionBundle(ConventionBundleSearchRequest request) {
    Collection<ConventionBundle> collection = _mapper.get(request.getIdentifiers());
    return new ConventionBundleSearchResult(wrapReferenceRatesWithDocuments(collection));
  }
  
  @Override
  public ConventionBundleSearchResult searchHistoricConventionBundle(ConventionBundleSearchHistoricRequest request) {
    Collection<ConventionBundle> collection = _mapper.get(request.getIdentifiers());
    return new ConventionBundleSearchResult(wrapReferenceRatesWithDocuments(collection));
  }
  
  private Collection<ConventionBundleDocument> wrapReferenceRatesWithDocuments(Collection<ConventionBundle> referenceRates) {
    Collection<ConventionBundleDocument> results = new ArrayList<ConventionBundleDocument>(referenceRates.size());
    for (ConventionBundle referenceRate : referenceRates) {
      results.add(new ConventionBundleDocument(referenceRate));
    }
    return results;
  }
}
