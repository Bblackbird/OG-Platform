/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.engine;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.sesame.trace.CallGraph;

/**
*
*/
@BeanDefinition
public final class ResultItem implements ImmutableBean {

  // TODO include OutputName, in the current engine it's used for number formatting

  @PropertyDefinition
  private final Object _output;

  @PropertyDefinition
  private final CallGraph _callGraph;

  @ImmutableConstructor
  /* package */ ResultItem(Object output, CallGraph callGraph) {
    _output = output;
    _callGraph = callGraph;
  }

  @Override
  public String toString() {
    return "Item [_output=" + _output + ", _callGraph=" + _callGraph + "]";
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ResultItem}.
   * @return the meta-bean, not null
   */
  public static ResultItem.Meta meta() {
    return ResultItem.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ResultItem.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ResultItem.Builder builder() {
    return new ResultItem.Builder();
  }

  @Override
  public ResultItem.Meta metaBean() {
    return ResultItem.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the output.
   * @return the value of the property
   */
  public Object getOutput() {
    return _output;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the callGraph.
   * @return the value of the property
   */
  public CallGraph getCallGraph() {
    return _callGraph;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public ResultItem clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ResultItem other = (ResultItem) obj;
      return JodaBeanUtils.equal(getOutput(), other.getOutput()) &&
          JodaBeanUtils.equal(getCallGraph(), other.getCallGraph());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getOutput());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCallGraph());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ResultItem}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code output} property.
     */
    private final MetaProperty<Object> _output = DirectMetaProperty.ofImmutable(
        this, "output", ResultItem.class, Object.class);
    /**
     * The meta-property for the {@code callGraph} property.
     */
    private final MetaProperty<CallGraph> _callGraph = DirectMetaProperty.ofImmutable(
        this, "callGraph", ResultItem.class, CallGraph.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "output",
        "callGraph");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1005512447:  // output
          return _output;
        case -1068293744:  // callGraph
          return _callGraph;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ResultItem.Builder builder() {
      return new ResultItem.Builder();
    }

    @Override
    public Class<? extends ResultItem> beanType() {
      return ResultItem.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code output} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Object> output() {
      return _output;
    }

    /**
     * The meta-property for the {@code callGraph} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CallGraph> callGraph() {
      return _callGraph;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1005512447:  // output
          return ((ResultItem) bean).getOutput();
        case -1068293744:  // callGraph
          return ((ResultItem) bean).getCallGraph();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ResultItem}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<ResultItem> {

    private Object _output;
    private CallGraph _callGraph;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(ResultItem beanToCopy) {
      this._output = beanToCopy.getOutput();
      this._callGraph = beanToCopy.getCallGraph();
    }

    //-----------------------------------------------------------------------
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1005512447:  // output
          this._output = (Object) newValue;
          break;
        case -1068293744:  // callGraph
          this._callGraph = (CallGraph) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ResultItem build() {
      return new ResultItem(
          _output,
          _callGraph);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code output} property in the builder.
     * @param output  the new value
     * @return this, for chaining, not null
     */
    public Builder output(Object output) {
      this._output = output;
      return this;
    }

    /**
     * Sets the {@code callGraph} property in the builder.
     * @param callGraph  the new value
     * @return this, for chaining, not null
     */
    public Builder callGraph(CallGraph callGraph) {
      this._callGraph = callGraph;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("ResultItem.Builder{");
      buf.append("output").append('=').append(JodaBeanUtils.toString(_output)).append(',').append(' ');
      buf.append("callGraph").append('=').append(JodaBeanUtils.toString(_callGraph));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
