/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.config;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicImmutableBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableMap;

/**
 *
 */
@BeanDefinition
public final class ViewColumn implements ImmutableBean {

  // TODO default value requirement name for types that don't specify one? but won't know if it's valid for all

  /** Column name. */
  @PropertyDefinition(validate = "notEmpty")
  private final String _name;

  /** Requirements keyed by target type. */
  @PropertyDefinition(validate = "notNull")
  private final Map<Class<?>, ColumnOutput> _requirements;

  /* package */ ViewColumn(String name, List<ColumnOutput> outputs) {
    this(name, buildOutputMap(outputs));
  }

  private static ImmutableMap<Class<?>, ColumnOutput> buildOutputMap(List<ColumnOutput> outputs) {
    ImmutableMap.Builder<Class<?>, ColumnOutput> builder = ImmutableMap.builder();
    for (ColumnOutput output : outputs) {
      builder.put(output.getTargetType(), output);
    }
    return builder.build();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ViewColumn}.
   * @return the meta-bean, not null
   */
  public static ViewColumn.Meta meta() {
    return ViewColumn.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ViewColumn.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   *
   * @return the builder, not null
   */
  public static ViewColumn.Builder builder() {
    return new ViewColumn.Builder();
  }

  private ViewColumn(
      String name,
      Map<Class<?>, ColumnOutput> requirements) {
    JodaBeanUtils.notEmpty(name, "name");
    JodaBeanUtils.notNull(requirements, "requirements");
    this._name = name;
    this._requirements = ImmutableMap.copyOf(requirements);
  }

  @Override
  public ViewColumn.Meta metaBean() {
    return ViewColumn.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets column name.
   * @return the value of the property, not empty
   */
  public String getName() {
    return _name;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets requirements keyed by target type.
   * @return the value of the property, not null
   */
  public Map<Class<?>, ColumnOutput> getRequirements() {
    return _requirements;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public ViewColumn clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ViewColumn other = (ViewColumn) obj;
      return JodaBeanUtils.equal(getName(), other.getName()) &&
          JodaBeanUtils.equal(getRequirements(), other.getRequirements());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getRequirements());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("ViewColumn{");
    buf.append("name").append('=').append(getName()).append(',').append(' ');
    buf.append("requirements").append('=').append(JodaBeanUtils.toString(getRequirements()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ViewColumn}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofImmutable(
        this, "name", ViewColumn.class, String.class);
    /**
     * The meta-property for the {@code requirements} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Map<Class<?>, ColumnOutput>> _requirements = DirectMetaProperty.ofImmutable(
        this, "requirements", ViewColumn.class, (Class) Map.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "name",
        "requirements");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return _name;
        case -1619874672:  // requirements
          return _requirements;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ViewColumn.Builder builder() {
      return new ViewColumn.Builder();
    }

    @Override
    public Class<? extends ViewColumn> beanType() {
      return ViewColumn.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code requirements} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Map<Class<?>, ColumnOutput>> requirements() {
      return _requirements;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return ((ViewColumn) bean).getName();
        case -1619874672:  // requirements
          return ((ViewColumn) bean).getRequirements();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ViewColumn}.
   */
  public static final class Builder extends BasicImmutableBeanBuilder<ViewColumn> {

    private String _name;
    private Map<Class<?>, ColumnOutput> _requirements = new HashMap<Class<?>, ColumnOutput>();

    /**
     * Restricted constructor.
     */
    private Builder() {
      super(ViewColumn.Meta.INSTANCE);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(ViewColumn beanToCopy) {
      super(ViewColumn.Meta.INSTANCE);
      this._name = beanToCopy.getName();
      this._requirements = new HashMap<Class<?>, ColumnOutput>(beanToCopy.getRequirements());
    }

    //-----------------------------------------------------------------------
    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          this._name = (String) newValue;
          break;
        case -1619874672:  // requirements
          this._requirements = (Map<Class<?>, ColumnOutput>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public ViewColumn build() {
      return new ViewColumn(
          _name,
          _requirements);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code name} property in the builder.
     * @param name  the new value, not empty
     * @return this, for chaining, not null
     */
    public Builder name(String name) {
      JodaBeanUtils.notEmpty(name, "name");
      this._name = name;
      return this;
    }

    /**
     * Sets the {@code requirements} property in the builder.
     * @param requirements  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder requirements(Map<Class<?>, ColumnOutput> requirements) {
      JodaBeanUtils.notNull(requirements, "requirements");
      this._requirements = requirements;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("ViewColumn.Builder{");
      buf.append("name").append('=').append(_name).append(',').append(' ');
      buf.append("requirements").append('=').append(_requirements);
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
