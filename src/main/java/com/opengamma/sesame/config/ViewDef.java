/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.config;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicImmutableBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;

/**
 *
 */
@BeanDefinition
public final class ViewDef implements ImmutableBean {

  // TODO non-column outputs

  @PropertyDefinition(validate = "notEmpty")
  private final String _name;

  @PropertyDefinition(validate = "notNull")
  private final List<ViewColumn> _columns;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ViewDef}.
   * @return the meta-bean, not null
   */
  public static ViewDef.Meta meta() {
    return ViewDef.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ViewDef.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   *
   * @return the builder, not null
   */
  public static ViewDef.Builder builder() {
    return new ViewDef.Builder();
  }

  private ViewDef(
      String name,
      List<ViewColumn> columns) {
    JodaBeanUtils.notEmpty(name, "name");
    JodaBeanUtils.notNull(columns, "columns");
    this._name = name;
    this._columns = ImmutableList.copyOf(columns);
  }

  @Override
  public ViewDef.Meta metaBean() {
    return ViewDef.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name.
   * @return the value of the property, not empty
   */
  public String getName() {
    return _name;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the columns.
   * @return the value of the property, not null
   */
  public List<ViewColumn> getColumns() {
    return _columns;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public ViewDef clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ViewDef other = (ViewDef) obj;
      return JodaBeanUtils.equal(getName(), other.getName()) &&
          JodaBeanUtils.equal(getColumns(), other.getColumns());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getColumns());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("ViewDef{");
    buf.append("name").append('=').append(getName()).append(',').append(' ');
    buf.append("columns").append('=').append(JodaBeanUtils.toString(getColumns()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ViewDef}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofImmutable(
        this, "name", ViewDef.class, String.class);
    /**
     * The meta-property for the {@code columns} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<ViewColumn>> _columns = DirectMetaProperty.ofImmutable(
        this, "columns", ViewDef.class, (Class) List.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "name",
        "columns");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return _name;
        case 949721053:  // columns
          return _columns;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ViewDef.Builder builder() {
      return new ViewDef.Builder();
    }

    @Override
    public Class<? extends ViewDef> beanType() {
      return ViewDef.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code columns} property.
     * @return the meta-property, not null
     */
    public MetaProperty<List<ViewColumn>> columns() {
      return _columns;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return ((ViewDef) bean).getName();
        case 949721053:  // columns
          return ((ViewDef) bean).getColumns();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ViewDef}.
   */
  public static final class Builder extends BasicImmutableBeanBuilder<ViewDef> {

    private String _name;
    private List<ViewColumn> _columns = new ArrayList<ViewColumn>();

    /**
     * Restricted constructor.
     */
    private Builder() {
      super(ViewDef.Meta.INSTANCE);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(ViewDef beanToCopy) {
      super(ViewDef.Meta.INSTANCE);
      this._name = beanToCopy.getName();
      this._columns = new ArrayList<ViewColumn>(beanToCopy.getColumns());
    }

    //-----------------------------------------------------------------------
    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          this._name = (String) newValue;
          break;
        case 949721053:  // columns
          this._columns = (List<ViewColumn>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public ViewDef build() {
      return new ViewDef(
          _name,
          _columns);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code name} property in the builder.
     * @param name  the new value, not empty
     * @return this, for chaining, not null
     */
    public Builder name(String name) {
      JodaBeanUtils.notEmpty(name, "name");
      this._name = name;
      return this;
    }

    /**
     * Sets the {@code columns} property in the builder.
     * @param columns  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder columns(List<ViewColumn> columns) {
      JodaBeanUtils.notNull(columns, "columns");
      this._columns = columns;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("ViewDef.Builder{");
      buf.append("name").append('=').append(_name).append(',').append(' ');
      buf.append("columns").append('=').append(_columns);
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
