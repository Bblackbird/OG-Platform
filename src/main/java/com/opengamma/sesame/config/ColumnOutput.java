/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.config;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicImmutableBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * TODO an interface over the top of this and FunctionConfig
 */
@BeanDefinition
public final class ColumnOutput implements ImmutableBean {

  // TODO sentinel empty value

  @PropertyDefinition(validate = "notNull")
  private final String _outputName;

  @PropertyDefinition(validate = "notNull")
  private final FunctionConfig _functionConfig;

  public ColumnOutput(String outputName) {
    this(outputName, FunctionConfig.EMPTY);
  }

  @ImmutableConstructor
  public ColumnOutput(String outputName, FunctionConfig functionConfig) {
    JodaBeanUtils.notNull(functionConfig, "functionConfig");
    _outputName = outputName;
    _functionConfig = functionConfig;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ColumnOutput}.
   * @return the meta-bean, not null
   */
  public static ColumnOutput.Meta meta() {
    return ColumnOutput.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ColumnOutput.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   *
   * @return the builder, not null
   */
  public static ColumnOutput.Builder builder() {
    return new ColumnOutput.Builder();
  }

  @Override
  public ColumnOutput.Meta metaBean() {
    return ColumnOutput.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the outputName.
   * @return the value of the property, not null
   */
  public String getOutputName() {
    return _outputName;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the functionConfig.
   * @return the value of the property, not null
   */
  public FunctionConfig getFunctionConfig() {
    return _functionConfig;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public ColumnOutput clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ColumnOutput other = (ColumnOutput) obj;
      return JodaBeanUtils.equal(getOutputName(), other.getOutputName()) &&
          JodaBeanUtils.equal(getFunctionConfig(), other.getFunctionConfig());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getOutputName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getFunctionConfig());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("ColumnOutput{");
    buf.append("outputName").append('=').append(getOutputName()).append(',').append(' ');
    buf.append("functionConfig").append('=').append(JodaBeanUtils.toString(getFunctionConfig()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ColumnOutput}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code outputName} property.
     */
    private final MetaProperty<String> _outputName = DirectMetaProperty.ofImmutable(
        this, "outputName", ColumnOutput.class, String.class);
    /**
     * The meta-property for the {@code functionConfig} property.
     */
    private final MetaProperty<FunctionConfig> _functionConfig = DirectMetaProperty.ofImmutable(
        this, "functionConfig", ColumnOutput.class, FunctionConfig.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "outputName",
        "functionConfig");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1274044628:  // outputName
          return _outputName;
        case -1567383238:  // functionConfig
          return _functionConfig;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ColumnOutput.Builder builder() {
      return new ColumnOutput.Builder();
    }

    @Override
    public Class<? extends ColumnOutput> beanType() {
      return ColumnOutput.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code outputName} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> outputName() {
      return _outputName;
    }

    /**
     * The meta-property for the {@code functionConfig} property.
     * @return the meta-property, not null
     */
    public MetaProperty<FunctionConfig> functionConfig() {
      return _functionConfig;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1274044628:  // outputName
          return ((ColumnOutput) bean).getOutputName();
        case -1567383238:  // functionConfig
          return ((ColumnOutput) bean).getFunctionConfig();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ColumnOutput}.
   */
  public static final class Builder extends BasicImmutableBeanBuilder<ColumnOutput> {

    private String _outputName;
    private FunctionConfig _functionConfig;

    /**
     * Restricted constructor.
     */
    private Builder() {
      super(ColumnOutput.Meta.INSTANCE);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(ColumnOutput beanToCopy) {
      super(ColumnOutput.Meta.INSTANCE);
      this._outputName = beanToCopy.getOutputName();
      this._functionConfig = beanToCopy.getFunctionConfig();
    }

    //-----------------------------------------------------------------------
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1274044628:  // outputName
          this._outputName = (String) newValue;
          break;
        case -1567383238:  // functionConfig
          this._functionConfig = (FunctionConfig) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public ColumnOutput build() {
      return new ColumnOutput(
          _outputName,
          _functionConfig);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code outputName} property in the builder.
     * @param outputName  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder outputName(String outputName) {
      JodaBeanUtils.notNull(outputName, "outputName");
      this._outputName = outputName;
      return this;
    }

    /**
     * Sets the {@code functionConfig} property in the builder.
     * @param functionConfig  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder functionConfig(FunctionConfig functionConfig) {
      JodaBeanUtils.notNull(functionConfig, "functionConfig");
      this._functionConfig = functionConfig;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("ColumnOutput.Builder{");
      buf.append("outputName").append('=').append(_outputName).append(',').append(' ');
      buf.append("functionConfig").append('=').append(_functionConfig);
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
