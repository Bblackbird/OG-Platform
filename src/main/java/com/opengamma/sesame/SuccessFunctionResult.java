/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicImmutableBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 *
 */
@BeanDefinition
public final class SuccessFunctionResult<T> implements FunctionResult<T>, ImmutableBean {

  @PropertyDefinition(validate = "notNull")
  private final T _result;

  @ImmutableConstructor
  /* package */ SuccessFunctionResult(T result) {
    _result = result;
  }

  @Override
  public String getFailureMessage() {
    throw new IllegalStateException("Unable to get an error message from a success result");
  }

  @Override
  public String toString() {
    return "SuccessFunctionResult{_result=" + _result + '}';
  }

  @Override
  public ResultStatus getStatus() {
    return SuccessStatus.SUCCESS;
  }

  @Override
  public boolean isResultAvailable() {
    return true;
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SuccessFunctionResult}.
   * @return the meta-bean, not null
   */
  @SuppressWarnings("rawtypes")
  public static SuccessFunctionResult.Meta meta() {
    return SuccessFunctionResult.Meta.INSTANCE;
  }

  /**
   * The meta-bean for {@code SuccessFunctionResult}.
   * @param <R>  the bean's generic type
   * @param cls  the bean's generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R> SuccessFunctionResult.Meta<R> metaSuccessFunctionResult(Class<R> cls) {
    return SuccessFunctionResult.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(SuccessFunctionResult.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   *
   * @param <T>  the type
   * @return the builder, not null
   */
  public static <T> SuccessFunctionResult.Builder<T> builder() {
    return new SuccessFunctionResult.Builder<T>();
  }

  @SuppressWarnings("unchecked")
  @Override
  public SuccessFunctionResult.Meta<T> metaBean() {
    return SuccessFunctionResult.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the result.
   * @return the value of the property, not null
   */
  public T getResult() {
    return _result;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder<T> toBuilder() {
    return new Builder<T>(this);
  }

  @Override
  public SuccessFunctionResult<T> clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      SuccessFunctionResult<?> other = (SuccessFunctionResult<?>) obj;
      return JodaBeanUtils.equal(getResult(), other.getResult());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getResult());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SuccessFunctionResult}.
   */
  public static final class Meta<T> extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code result} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<T> _result = (DirectMetaProperty) DirectMetaProperty.ofImmutable(
        this, "result", SuccessFunctionResult.class, Object.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "result");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -934426595:  // result
          return _result;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public SuccessFunctionResult.Builder<T> builder() {
      return new SuccessFunctionResult.Builder<T>();
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends SuccessFunctionResult<T>> beanType() {
      return (Class) SuccessFunctionResult.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code result} property.
     * @return the meta-property, not null
     */
    public MetaProperty<T> result() {
      return _result;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -934426595:  // result
          return ((SuccessFunctionResult<?>) bean).getResult();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code SuccessFunctionResult}.
   */
  public static final class Builder<T> extends BasicImmutableBeanBuilder<SuccessFunctionResult<T>> {

    private T _result;

    /**
     * Restricted constructor.
     */
    private Builder() {
      super(SuccessFunctionResult.Meta.INSTANCE);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(SuccessFunctionResult<T> beanToCopy) {
      super(SuccessFunctionResult.Meta.INSTANCE);
      this._result = beanToCopy.getResult();
    }

    //-----------------------------------------------------------------------
    @SuppressWarnings("unchecked")
    @Override
    public Builder<T> set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -934426595:  // result
          this._result = (T) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public SuccessFunctionResult<T> build() {
      return new SuccessFunctionResult<T>(
          _result);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code result} property in the builder.
     * @param result  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<T> result(T result) {
      JodaBeanUtils.notNull(result, "result");
      this._result = result;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("SuccessFunctionResult.Builder{");
      buf.append("result").append('=').append(_result);
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
