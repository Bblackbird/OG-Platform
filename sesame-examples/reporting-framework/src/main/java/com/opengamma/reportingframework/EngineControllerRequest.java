package com.opengamma.reportingframework;

import java.util.ArrayList;
import java.util.List;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaBean;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;

import com.opengamma.master.security.ManageableSecurity;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class EngineControllerRequest extends DirectBean {
  
  @PropertyDefinition
  private List<ManageableSecurity> radarRequest = new ArrayList<>();
  @PropertyDefinition
  private String marketData;
  @PropertyDefinition
  private String view;
  
  public EngineControllerRequest(List<ManageableSecurity> requestList, String marketData, String viewData) {
    this.radarRequest = requestList;
    this.marketData = marketData;
    this.view = viewData;
  }
  
  private EngineControllerRequest() {
    
  }
  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code EngineControllerRequest}.
   * @return the meta-bean, not null
   */
  public static EngineControllerRequest.Meta meta() {
    return EngineControllerRequest.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(EngineControllerRequest.Meta.INSTANCE);
  }

  @Override
  public EngineControllerRequest.Meta metaBean() {
    return EngineControllerRequest.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the radarRequest.
   * @return the value of the property
   */
  public List<ManageableSecurity> getRadarRequest() {
    return radarRequest;
  }

  /**
   * Sets the radarRequest.
   * @param radarRequest  the new value of the property
   */
  public void setRadarRequest(List<ManageableSecurity> radarRequest) {
    this.radarRequest = radarRequest;
  }

  /**
   * Gets the the {@code radarRequest} property.
   * @return the property, not null
   */
  public final Property<List<ManageableSecurity>> radarRequest() {
    return metaBean().radarRequest().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the marketData.
   * @return the value of the property
   */
  public String getMarketData() {
    return marketData;
  }

  /**
   * Sets the marketData.
   * @param marketData  the new value of the property
   */
  public void setMarketData(String marketData) {
    this.marketData = marketData;
  }

  /**
   * Gets the the {@code marketData} property.
   * @return the property, not null
   */
  public final Property<String> marketData() {
    return metaBean().marketData().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the view.
   * @return the value of the property
   */
  public String getView() {
    return view;
  }

  /**
   * Sets the view.
   * @param view  the new value of the property
   */
  public void setView(String view) {
    this.view = view;
  }

  /**
   * Gets the the {@code view} property.
   * @return the property, not null
   */
  public final Property<String> view() {
    return metaBean().view().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public EngineControllerRequest clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      EngineControllerRequest other = (EngineControllerRequest) obj;
      return JodaBeanUtils.equal(getRadarRequest(), other.getRadarRequest()) &&
          JodaBeanUtils.equal(getMarketData(), other.getMarketData()) &&
          JodaBeanUtils.equal(getView(), other.getView());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getRadarRequest());
    hash += hash * 31 + JodaBeanUtils.hashCode(getMarketData());
    hash += hash * 31 + JodaBeanUtils.hashCode(getView());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("EngineControllerRequest{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("radarRequest").append('=').append(JodaBeanUtils.toString(getRadarRequest())).append(',').append(' ');
    buf.append("marketData").append('=').append(JodaBeanUtils.toString(getMarketData())).append(',').append(' ');
    buf.append("view").append('=').append(JodaBeanUtils.toString(getView())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code EngineControllerRequest}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code radarRequest} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<ManageableSecurity>> _radarRequest = DirectMetaProperty.ofReadWrite(
        this, "radarRequest", EngineControllerRequest.class, (Class) List.class);
    /**
     * The meta-property for the {@code marketData} property.
     */
    private final MetaProperty<String> _marketData = DirectMetaProperty.ofReadWrite(
        this, "marketData", EngineControllerRequest.class, String.class);
    /**
     * The meta-property for the {@code view} property.
     */
    private final MetaProperty<String> _view = DirectMetaProperty.ofReadWrite(
        this, "view", EngineControllerRequest.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "radarRequest",
        "marketData",
        "view");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1496261801:  // radarRequest
          return _radarRequest;
        case 1116764678:  // marketData
          return _marketData;
        case 3619493:  // view
          return _view;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends EngineControllerRequest> builder() {
      return new DirectBeanBuilder<EngineControllerRequest>(new EngineControllerRequest());
    }

    @Override
    public Class<? extends EngineControllerRequest> beanType() {
      return EngineControllerRequest.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code radarRequest} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<List<ManageableSecurity>> radarRequest() {
      return _radarRequest;
    }

    /**
     * The meta-property for the {@code marketData} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> marketData() {
      return _marketData;
    }

    /**
     * The meta-property for the {@code view} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> view() {
      return _view;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1496261801:  // radarRequest
          return ((EngineControllerRequest) bean).getRadarRequest();
        case 1116764678:  // marketData
          return ((EngineControllerRequest) bean).getMarketData();
        case 3619493:  // view
          return ((EngineControllerRequest) bean).getView();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1496261801:  // radarRequest
          ((EngineControllerRequest) bean).setRadarRequest((List<ManageableSecurity>) newValue);
          return;
        case 1116764678:  // marketData
          ((EngineControllerRequest) bean).setMarketData((String) newValue);
          return;
        case 3619493:  // view
          ((EngineControllerRequest) bean).setView((String) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
